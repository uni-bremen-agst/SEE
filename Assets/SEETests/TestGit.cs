using LibGit2Sharp;
using NUnit.Framework;
using SEE.Utils;
using System.IO;

namespace SEE.VCS
{
    /// <summary>
    /// Exploration tests for <see cref="LibGit2Sharp"/>.
    /// </summary>
    /// <remarks>These are not really tests, but rather a playground to
    /// explore the API of <see cref="LibGit2Sharp"/>.</remarks>
    [Category("SkipOnCI")]
    internal class TestGit
    {
        // For more examples of using LibGit2Sharp, see:
        //   https://github.com/libgit2/libgit2sharp/blob/master/LibGit2Sharp.Tests/

        /// <summary>
        /// Represents information to access a Git repository, including its URL and access token.
        /// </summary>
        /// <remarks>This type is used to encapsulate the essential details required to interact with a
        /// Git repository. The <see cref="Url"/> property specifies the repository's location, while the <see
        /// cref="AccessToken"/>  provides the access token necessary for authentication.
        /// The latter should be should be a token generated by GitHub's
        /// "settings->developer settings"</remarks>
        private record RepositoryInfo(string Url, string AccessToken)
        {
            /// <summary>
            /// Returns the <cref name="Url"/> with the added <cref ="AccessToken"/>.
            ///
            /// For instance, AddToken("https://github.com/koschke/TestProjectForSEE.git", "mytoken")
            /// yields "https://mytoken@github.com/koschke/TestProjectForSEE.git".
            /// </summary>
            /// <param name="repositoryUrl">URL to the repository; must start with https://</param>
            /// <param name="accessToken">access token to be added</param>
            /// <returns><paramref name="repositoryUrl"/> where <paramref name="accessToken"/> has
            /// been added</returns>
            public string AddToken => Url.Replace("https://", $"https://{AccessToken}@");
        }

        /// <summary>
        /// A private repository on GitHub used for testing purposes.
        /// </summary>
        private static readonly RepositoryInfo TestRepo =
            new("https://github.com/koschke/TestProjectForSEE.git",
                ""); // ADD YOUR TOKEN HERE TO RUN THE TESTS. DO NOT CHECK IN YOUR TOKEN!


        [Test]
        public void TestCloneTestRepo()
        {
            TestCloneRepo(TestRepo);
        }

        /// <summary>
        /// Clones a repository described by <paramref name="repositoryInfo"/>.
        /// </summary>
        /// <param name="repositoryInfo"></param>
        private static void TestCloneRepo(RepositoryInfo repositoryInfo)
        {
            string localRepoPath = LocalPath(repositoryInfo.Url);
            try
            {
                Repository.Clone(repositoryInfo.AddToken, localRepoPath, new CloneOptions());
            }
            catch (LibGit2SharpException)
            {
                throw;
            }
            finally
            {
                DeleteDirectoryIfItExists(localRepoPath);
            }
        }

        [Test]
        public void TestCloneAndFetchTestRepo()
        {
            TestCloneAndFetchRepo(TestRepo);
        }

        /// <summary>
        /// Clones and fetches a GitHub repository described by <paramref name="repositoryInfo"/>.
        /// </summary>
        private static void TestCloneAndFetchRepo(RepositoryInfo repositoryInfo)
        {
            string localRepoPath = LocalPath(repositoryInfo.Url);
            try
            {
                // First clone the repository, then fetch.
                Repository.Clone(repositoryInfo.AddToken, localRepoPath, new CloneOptions());

                using Repository repo = new(localRepoPath);

                // Find the remote named "origin".
                Remote remote = repo.Network.Remotes["origin"];

                // Fetch the changes from the remote.
                Commands.Fetch(repo, remote.Name, new string[] { }, new FetchOptions(), null);
            }
            catch (LibGit2SharpException)
            {
                throw;
            }
            finally
            {
                DeleteDirectoryIfItExists(localRepoPath);
            }
        }

        /// <summary>
        /// Yields the local temporary directory path where the repository
        /// at <paramref name="repositoryUrl"/> can be checked out. It will
        /// a subdirectory of the system's temporary directory named after
        /// the last part of the repository URL.
        ///
        /// For instance, LocalPath("https://github.com/koschke/TestProjectForSEE.git")
        /// yields something like "C:\Users\koschke\AppData\Local\Temp\TestProjectForSEE.git"
        /// on a Windows machine.
        /// </summary>
        /// <param name="repositoryUrl">the URL to the repository</param>
        /// <returns>local temporary directory path</returns>
        private static string LocalPath(string repositoryUrl)
        {
            return Path.Combine(Path.GetTempPath(), Filenames.Basename(repositoryUrl, '/'));
        }

        /// <summary>
        /// Deletes the directory at <paramref name="path"/> if it exists.
        /// </summary>
        /// <param name="path"></param>
        private static void DeleteDirectoryIfItExists(string path)
        {
            if (Directory.Exists(path))
            {
                // Remove read-only attribute from directory and all its contents
                // so that we can delete everything.
                DirectoryInfo directory = new(path) { Attributes = FileAttributes.Normal };

                foreach (FileSystemInfo info in directory.GetFileSystemInfos("*", SearchOption.AllDirectories))
                {
                    info.Attributes = FileAttributes.Normal;
                }

                directory.Delete(true);
            }
        }
    }
}
