using LibGit2Sharp;
using NUnit.Framework;
using SEE.Utils;
using System.IO;
using UnityEngine;

namespace SEE.VCS
{
    /// <summary>
    /// Exploration tests for <see cref="LibGit2Sharp"/>.
    /// </summary>
    /// <remarks>These are not really tests, but rather a playground to
    /// explore the API of <see cref="LibGit2Sharp"/>.</remarks>
    [Category("SkipOnCI")]
    internal class TestGit
    {
        // For more examples of using LibGit2Sharp, see:
        //   https://github.com/libgit2/libgit2sharp/blob/master/LibGit2Sharp.Tests/


        /// <summary>
        /// Clones a repository from <paramref name="repositoryUrl"/> using a <paramref name="userName"/>
        /// and the associated <paramref name="password"/>.
        /// </summary>
        /// <param name="repositoryUrl">The URL of the Git repository.</param>
        /// <param name="userName">The name of the Git user, which may be an email address.</param>
        /// <param name="password">The Git user's password; can be token generated by GitHub's "settings->developer settings"</param>
        /// <remarks>See https://www.c-sharpcorner.com/article/git-and-github-integration-in-c-sharp-apps-with-libgit2sharp/</remarks>
        [Test]
        [TestCase("https://github.com/koschke/TestProjectForSEE", "koschke", "")]
        public void CloneRepo(string repositoryUrl, string userName, string password)
        {
            string localRepoPath = Path.Combine(Path.GetTempPath(), Filenames.Basename(repositoryUrl, '/'));

            try
            {
                CloneOptions options = new()
                                       {
                                          FetchOptions =
                                          {
                                             CredentialsProvider = (_url, _user, _cred) => new UsernamePasswordCredentials
                                                                                           {
                                                                                              Username = userName,
                                                                                              Password = password
                                                                                           }
                                           }
                                       };
                Repository.Clone(repositoryUrl, localRepoPath, options);
                Debug.Log($"Cloned repository from {repositoryUrl} to {localRepoPath}\n");
            }
            catch (LibGit2SharpException)
            {
                throw;
            }
            finally
            {
                DeleteDirectoryIfItExists(localRepoPath);
            }
        }

        private static void DeleteDirectoryIfItExists(string localRepoPath)
        {
            if (Directory.Exists(localRepoPath))
            {
                Directory.Delete(localRepoPath, true);
                Debug.Log($"Deleted cloned repository at {localRepoPath}\n");
            }
        }
    }
}
