#pragma kernel PreprocessImageNetV1
#pragma kernel PreprocessResNet50

sampler2D _Texture;
RWBuffer<float> _Tensor;
uint _Width, _Height;

float3 SampleInput(uint3 id)
{
    float2 uv = (id.xy + 0.5) / float2(_Width, _Height);
    uv.y = 1 - uv.y;

    float2 dx = float2(1.0 / _Width, 0);
    float2 dy = float2(0, -1.0 / _Height);

    return tex2Dgrad(_Texture, uv, dx, dy).rgb;
}

void OutputElement(uint3 id, float3 rgb)
{
    uint offs = (id.y * _Width + id.x) * 3;
    _Tensor[offs + 0] = rgb.r;
    _Tensor[offs + 1] = rgb.g;
    _Tensor[offs + 2] = rgb.b;
}

[numthreads(8, 8, 1)]
void PreprocessImageNetV1(uint3 id : SV_DispatchThreadID)
{
    if (any(id.xy >= uint2(_Width, _Height))) return;
    OutputElement(id, SampleInput(id) * 2 - 1);
}

[numthreads(8, 8, 1)]
void PreprocessResNet50(uint3 id : SV_DispatchThreadID)
{
    if (any(id.xy >= uint2(_Width, _Height))) return;
    const float3 kImageNetMean = float3(-123.15, -115.90, -103.06);
    OutputElement(id, SampleInput(id) * 255 + kImageNetMean);
}
