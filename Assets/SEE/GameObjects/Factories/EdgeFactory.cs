using System.Collections.Generic;
using System.Linq;
using SEE.DataModel;
using SEE.Game;
using SEE.Layout;
using SEE.Layout.EdgeLayouts;
using UnityEngine;

namespace SEE.GO
{
    /// <summary>
    /// A factory to create game objects for laid out edges.
    /// </summary>
    public class EdgeFactory
    {
        /// <summary>
        /// Constructor.
        /// Saves the <paramref name="layout"/> to be used and the requested <paramref name="edgeWidth"/>
        /// and creates the materials for the edges, but does not actually create any edges.
        /// </summary>
        /// <param name="layout">the edge layouter used to calculate the line for the edges</param>
        /// <param name="edgeWidth">the width of the line for the edges</param>
        /// <param name="tubularSegments">The amount of segments of the tubular</param>
        /// <param name="radius">The radius of the tubular</param>
        /// <param name="radialSegments">The amount of radial segments of the tubular</param>
        /// <param name="isEdgeSelectable">Are the edges selectable or not; if not, no colliders will be added</param>
        public EdgeFactory(IEdgeLayout layout, float edgeWidth, int tubularSegments, float radius, int radialSegments, bool isEdgeSelectable)
        {
            this.layout = layout;
            this.edgeWidth = edgeWidth;
            this.tubularSegments = tubularSegments > 0 ? tubularSegments : 50;

            this.radius = radius > 0 ? radius : 0.005f;
            this.radialSegments = radialSegments > 0 ? radialSegments : 8;
            this.isEdgeSelectable = isEdgeSelectable;
            defaultLineMaterial = Materials.New(Materials.ShaderType.TransparentLine, Color.white);
        }

        /// <summary>
        /// Path to the material used for edges.
        /// </summary>
        private const string materialPath = "Hidden/Internal-Colored";

        /// <summary>
        /// The material used for edges.
        /// </summary>
        protected readonly Material defaultLineMaterial;

        /// <summary>
        /// The width of the line for the created edges, given in the constructor.
        /// </summary>
        private readonly float edgeWidth;

        /// <summary>
        /// The amount of segments of the tubular.
        /// </summary>
        private readonly int tubularSegments;

        /// <summary>
        /// The radius of the tubular.
        /// </summary>
        private readonly float radius;

        /// <summary>
        /// The amount of radial segments of the tubular.
        /// </summary>
        private readonly int radialSegments;

        /// <summary>
        /// Determines whether the edges are selectable or not. If they are not selectable,
        /// no colliders will be added.
        /// </summary>
        private readonly bool isEdgeSelectable;

        /// <summary>
        /// The edge layouter used to generate the line for the edges, given in the constructor.
        /// </summary>
        private readonly IEdgeLayout layout;

        /// <summary>
        /// Returns a new game edge.
        /// </summary>
        /// <returns>new game edge</returns>
        private static GameObject NewGameEdge(LayoutEdge layoutEdge)
        {
            GameObject gameEdge = new GameObject
            {
                tag = Tags.Edge,
                isStatic = false,
                name = layoutEdge.ItsEdge.ID
            };

            EdgeRef edgeRef = gameEdge.AddComponent<EdgeRef>();
            edgeRef.Value = layoutEdge.ItsEdge;
            edgeRef.SourceNodeID = layoutEdge.Source.ID;
            edgeRef.TargetNodeID = layoutEdge.Source.ID;

            SEESpline spline = gameEdge.AddComponent<SEESpline>();
            spline.Spline = layoutEdge.Spline;

            return gameEdge;
        }

        /// <summary>
        /// Creates and returns game objects for the given <paramref name="edges"/> among the given
        /// <paramref name="nodes"/>. An edge is drawn as a line using a LineRenderer (attached to
        /// the resulting edges). The line is generated by the edge layouter provided in the
        /// constructor.
        /// </summary>
        /// <param name="nodes">source and target nodes of the <paramref name="edges"/></param>
        /// <param name="edges">the layout edges for which to create game objects</param>
        /// <returns>game objects representing the <paramref name="edges"/></returns>
        public ICollection<GameObject> DrawEdges(ICollection<ILayoutNode> nodes, ICollection<LayoutEdge> edges)
        {
            List<GameObject> result = new List<GameObject>(edges.Count);
            if (edges.Count == 0)
            {
                return result;
            }
            layout.Create(nodes, edges.Cast<ILayoutEdge>().ToList());
            foreach (LayoutEdge layoutEdge in edges)
            {
                GameObject gameEdge = NewGameEdge(layoutEdge);
                result.Add(gameEdge);

                // Add a line renderer which serves as a preview in the Unity
                // editor. The line renderer will be replaced with a mesh
                // renderer at runtime (i.e., when starting the application).
                LineRenderer line = gameEdge.AddComponent<LineRenderer>();

                // Use sharedMaterial if changes to the original material
                // should affect all objects using this material;
                // renderer.material instead will create a copy of the
                // material and will not be affected by changes of the
                // original material.
                line.sharedMaterial = defaultLineMaterial;
                line.sharedMaterial.renderQueue = new[] { layoutEdge.Source, layoutEdge.Target }.Max(x => x.gameObject.GetComponent<Renderer>().sharedMaterial.renderQueue);

                LineFactory.SetDefaults(line);
                LineFactory.SetWidth(line, edgeWidth);

                // If enabled, the lines are defined in world space. This
                // means the object's position is ignored and the lines are
                // rendered around world origin.
                line.useWorldSpace = false;

                // Draw spline as poly line.
                SEESpline spline = gameEdge.GetComponent<SEESpline>();
                Vector3[] positions = spline.PolyLine();
                line.positionCount = positions.Length; // number of vertices
                line.SetPositions(positions);
            }
            return result;
        }

        /// <summary>
        /// Creates and returns game objects for the given <paramref name="edges"/> among the given
        /// <paramref name="nodes"/>. An edge is calculated as a line without drawing it.
        /// The line is generated by the edge layouter provided in the constructor.
        /// </summary>
        /// <param name="nodes">source and target nodes of the <paramref name="edges"/></param>
        /// <param name="edges">the layout edges for which to create game objects</param>
        /// <returns>game objects representing the <paramref name="edges"/></returns>
        public ICollection<GameObject> CalculateNewEdges(ICollection<ILayoutNode> nodes, ICollection<LayoutEdge> edges)
        {
            List<GameObject> result = new List<GameObject>(edges.Count);
            if (edges.Count == 0)
            {
                return result;
            }
            layout.Create(nodes, edges.Cast<ILayoutEdge>().ToList());
            foreach (LayoutEdge layoutEdge in edges)
            {
                GameObject gameEdge = NewGameEdge(layoutEdge);
                result.Add(gameEdge);
            }
            return result;
        }
    }
}