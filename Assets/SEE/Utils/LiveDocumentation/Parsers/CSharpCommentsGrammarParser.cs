//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from CSharpCommentsGrammar.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class CSharpCommentsGrammarParser : Antlr4.Runtime.Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, WS=17, 
		Namespace=18, Using=19, SEMICOLON=20, Dashes=21, SHORT_COMMENT=22, TEXT=23, 
		EQUALS=24, LineComment=25, TEXT_SKIP=26, CURLY_BRACKET_OPEN=27, CURLY_BRACKET_CLOSE=28;
	public const int
		RULE_docs = 0, RULE_paramref = 1, RULE_classLink = 2, RULE_parameters = 3, 
		RULE_parameter = 4, RULE_summary = 5, RULE_exceptionType = 6, RULE_someText = 7, 
		RULE_exceptionTag = 8, RULE_tagContent = 9, RULE_return = 10, RULE_comments = 11;
	public static readonly string[] ruleNames = {
		"docs", "paramref", "classLink", "parameters", "parameter", "summary", 
		"exceptionType", "someText", "exceptionTag", "tagContent", "return", "comments"
	};

	private static readonly string[] _LiteralNames = {
		null, "'<paramref name=\"'", "'\"/>'", "'<see cref=\"'", "'/// <param name=\"'", 
		"'\">'", "'</param>'", "'/// <summary>'", "'/// </summary>'", "'<'", "'>'", 
		"'/// <exception cref=\"'", "'/// </exception>'", "'</exception>'", "'/// <returns>'", 
		"'/// </returns>'", "'</returns>'", null, "'namespace'", "'using'", "';'", 
		"'///'", null, null, "'='", null, null, "'{'", "'}'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, "WS", "Namespace", "Using", "SEMICOLON", 
		"Dashes", "SHORT_COMMENT", "TEXT", "EQUALS", "LineComment", "TEXT_SKIP", 
		"CURLY_BRACKET_OPEN", "CURLY_BRACKET_CLOSE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "CSharpCommentsGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static CSharpCommentsGrammarParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public CSharpCommentsGrammarParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CSharpCommentsGrammarParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class DocsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SummaryContext summary() {
			return GetRuleContext<SummaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Dashes() { return GetTokens(CSharpCommentsGrammarParser.Dashes); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dashes(int i) {
			return GetToken(CSharpCommentsGrammarParser.Dashes, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParametersContext parameters() {
			return GetRuleContext<ParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnContext @return() {
			return GetRuleContext<ReturnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExceptionTagContext exceptionTag() {
			return GetRuleContext<ExceptionTagContext>(0);
		}
		public DocsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_docs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpCommentsGrammarListener typedListener = listener as ICSharpCommentsGrammarListener;
			if (typedListener != null) typedListener.EnterDocs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpCommentsGrammarListener typedListener = listener as ICSharpCommentsGrammarListener;
			if (typedListener != null) typedListener.ExitDocs(this);
		}
	}

	[RuleVersion(0)]
	public DocsContext docs() {
		DocsContext _localctx = new DocsContext(Context, State);
		EnterRule(_localctx, 0, RULE_docs);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 27;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Dashes) {
				{
				{
				State = 24;
				Match(Dashes);
				}
				}
				State = 29;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 30;
			summary();
			State = 32;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				{
				State = 31;
				parameters();
				}
				break;
			}
			State = 35;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__13) {
				{
				State = 34;
				@return();
				}
			}

			State = 38;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__10) {
				{
				State = 37;
				exceptionTag();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamrefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT() { return GetToken(CSharpCommentsGrammarParser.TEXT, 0); }
		public ParamrefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paramref; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpCommentsGrammarListener typedListener = listener as ICSharpCommentsGrammarListener;
			if (typedListener != null) typedListener.EnterParamref(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpCommentsGrammarListener typedListener = listener as ICSharpCommentsGrammarListener;
			if (typedListener != null) typedListener.ExitParamref(this);
		}
	}

	[RuleVersion(0)]
	public ParamrefContext paramref() {
		ParamrefContext _localctx = new ParamrefContext(Context, State);
		EnterRule(_localctx, 2, RULE_paramref);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 40;
			Match(T__0);
			State = 41;
			Match(TEXT);
			State = 42;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassLinkContext : ParserRuleContext {
		public IToken linkID;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TEXT() { return GetTokens(CSharpCommentsGrammarParser.TEXT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT(int i) {
			return GetToken(CSharpCommentsGrammarParser.TEXT, i);
		}
		public ClassLinkContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classLink; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpCommentsGrammarListener typedListener = listener as ICSharpCommentsGrammarListener;
			if (typedListener != null) typedListener.EnterClassLink(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpCommentsGrammarListener typedListener = listener as ICSharpCommentsGrammarListener;
			if (typedListener != null) typedListener.ExitClassLink(this);
		}
	}

	[RuleVersion(0)]
	public ClassLinkContext classLink() {
		ClassLinkContext _localctx = new ClassLinkContext(Context, State);
		EnterRule(_localctx, 4, RULE_classLink);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 44;
			Match(T__2);
			State = 48;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TEXT) {
				{
				{
				State = 45;
				_localctx.linkID = Match(TEXT);
				}
				}
				State = 50;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 51;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		public ParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpCommentsGrammarListener typedListener = listener as ICSharpCommentsGrammarListener;
			if (typedListener != null) typedListener.EnterParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpCommentsGrammarListener typedListener = listener as ICSharpCommentsGrammarListener;
			if (typedListener != null) typedListener.ExitParameters(this);
		}
	}

	[RuleVersion(0)]
	public ParametersContext parameters() {
		ParametersContext _localctx = new ParametersContext(Context, State);
		EnterRule(_localctx, 6, RULE_parameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 56;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__3) {
				{
				{
				State = 53;
				parameter();
				}
				}
				State = 58;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		public IToken paramName;
		public TagContentContext parameterDescription;
		[System.Diagnostics.DebuggerNonUserCode] public TagContentContext tagContent() {
			return GetRuleContext<TagContentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TEXT() { return GetTokens(CSharpCommentsGrammarParser.TEXT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT(int i) {
			return GetToken(CSharpCommentsGrammarParser.TEXT, i);
		}
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpCommentsGrammarListener typedListener = listener as ICSharpCommentsGrammarListener;
			if (typedListener != null) typedListener.EnterParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpCommentsGrammarListener typedListener = listener as ICSharpCommentsGrammarListener;
			if (typedListener != null) typedListener.ExitParameter(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 8, RULE_parameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 59;
			Match(T__3);
			State = 63;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TEXT) {
				{
				{
				State = 60;
				_localctx.paramName = Match(TEXT);
				}
				}
				State = 65;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 66;
			Match(T__4);
			State = 67;
			_localctx.parameterDescription = tagContent();
			State = 68;
			Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SummaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CommentsContext[] comments() {
			return GetRuleContexts<CommentsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommentsContext comments(int i) {
			return GetRuleContext<CommentsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SomeTextContext[] someText() {
			return GetRuleContexts<SomeTextContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SomeTextContext someText(int i) {
			return GetRuleContext<SomeTextContext>(i);
		}
		public SummaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_summary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpCommentsGrammarListener typedListener = listener as ICSharpCommentsGrammarListener;
			if (typedListener != null) typedListener.EnterSummary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpCommentsGrammarListener typedListener = listener as ICSharpCommentsGrammarListener;
			if (typedListener != null) typedListener.ExitSummary(this);
		}
	}

	[RuleVersion(0)]
	public SummaryContext summary() {
		SummaryContext _localctx = new SummaryContext(Context, State);
		EnterRule(_localctx, 10, RULE_summary);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 70;
			Match(T__6);
			State = 75;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__8) | (1L << T__9) | (1L << Dashes) | (1L << TEXT))) != 0)) {
				{
				State = 73;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Dashes:
					{
					State = 71;
					comments();
					}
					break;
				case T__8:
				case T__9:
				case TEXT:
					{
					State = 72;
					someText();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 77;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 78;
			Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExceptionTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TEXT() { return GetTokens(CSharpCommentsGrammarParser.TEXT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT(int i) {
			return GetToken(CSharpCommentsGrammarParser.TEXT, i);
		}
		public ExceptionTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exceptionType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpCommentsGrammarListener typedListener = listener as ICSharpCommentsGrammarListener;
			if (typedListener != null) typedListener.EnterExceptionType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpCommentsGrammarListener typedListener = listener as ICSharpCommentsGrammarListener;
			if (typedListener != null) typedListener.ExitExceptionType(this);
		}
	}

	[RuleVersion(0)]
	public ExceptionTypeContext exceptionType() {
		ExceptionTypeContext _localctx = new ExceptionTypeContext(Context, State);
		EnterRule(_localctx, 12, RULE_exceptionType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 81;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 80;
				Match(TEXT);
				}
				}
				State = 83;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==TEXT );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SomeTextContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TEXT() { return GetTokens(CSharpCommentsGrammarParser.TEXT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT(int i) {
			return GetToken(CSharpCommentsGrammarParser.TEXT, i);
		}
		public SomeTextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_someText; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpCommentsGrammarListener typedListener = listener as ICSharpCommentsGrammarListener;
			if (typedListener != null) typedListener.EnterSomeText(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpCommentsGrammarListener typedListener = listener as ICSharpCommentsGrammarListener;
			if (typedListener != null) typedListener.ExitSomeText(this);
		}
	}

	[RuleVersion(0)]
	public SomeTextContext someText() {
		SomeTextContext _localctx = new SomeTextContext(Context, State);
		EnterRule(_localctx, 14, RULE_someText);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 86;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 85;
					_la = TokenStream.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__8) | (1L << T__9) | (1L << TEXT))) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 88;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExceptionTagContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExceptionTypeContext exceptionType() {
			return GetRuleContext<ExceptionTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SomeTextContext[] someText() {
			return GetRuleContexts<SomeTextContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SomeTextContext someText(int i) {
			return GetRuleContext<SomeTextContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamrefContext[] paramref() {
			return GetRuleContexts<ParamrefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamrefContext paramref(int i) {
			return GetRuleContext<ParamrefContext>(i);
		}
		public ExceptionTagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exceptionTag; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpCommentsGrammarListener typedListener = listener as ICSharpCommentsGrammarListener;
			if (typedListener != null) typedListener.EnterExceptionTag(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpCommentsGrammarListener typedListener = listener as ICSharpCommentsGrammarListener;
			if (typedListener != null) typedListener.ExitExceptionTag(this);
		}
	}

	[RuleVersion(0)]
	public ExceptionTagContext exceptionTag() {
		ExceptionTagContext _localctx = new ExceptionTagContext(Context, State);
		EnterRule(_localctx, 16, RULE_exceptionTag);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 90;
			Match(T__10);
			State = 91;
			exceptionType();
			State = 92;
			Match(T__4);
			State = 97;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__8) | (1L << T__9) | (1L << TEXT))) != 0)) {
				{
				State = 95;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__8:
				case T__9:
				case TEXT:
					{
					State = 93;
					someText();
					}
					break;
				case T__0:
					{
					State = 94;
					paramref();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 99;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 100;
			_la = TokenStream.LA(1);
			if ( !(_la==T__11 || _la==T__12) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TagContentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CommentsContext[] comments() {
			return GetRuleContexts<CommentsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommentsContext comments(int i) {
			return GetRuleContext<CommentsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SomeTextContext[] someText() {
			return GetRuleContexts<SomeTextContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SomeTextContext someText(int i) {
			return GetRuleContext<SomeTextContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassLinkContext[] classLink() {
			return GetRuleContexts<ClassLinkContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassLinkContext classLink(int i) {
			return GetRuleContext<ClassLinkContext>(i);
		}
		public TagContentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tagContent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpCommentsGrammarListener typedListener = listener as ICSharpCommentsGrammarListener;
			if (typedListener != null) typedListener.EnterTagContent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpCommentsGrammarListener typedListener = listener as ICSharpCommentsGrammarListener;
			if (typedListener != null) typedListener.ExitTagContent(this);
		}
	}

	[RuleVersion(0)]
	public TagContentContext tagContent() {
		TagContentContext _localctx = new TagContentContext(Context, State);
		EnterRule(_localctx, 18, RULE_tagContent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 109;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__8) | (1L << T__9) | (1L << Dashes) | (1L << TEXT))) != 0)) {
				{
				State = 107;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Dashes:
					{
					State = 102;
					comments();
					}
					break;
				case T__2:
				case T__8:
				case T__9:
				case TEXT:
					{
					State = 105;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case T__8:
					case T__9:
					case TEXT:
						{
						State = 103;
						someText();
						}
						break;
					case T__2:
						{
						State = 104;
						classLink();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 111;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnContext : ParserRuleContext {
		public TagContentContext returnContent;
		[System.Diagnostics.DebuggerNonUserCode] public TagContentContext tagContent() {
			return GetRuleContext<TagContentContext>(0);
		}
		public ReturnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpCommentsGrammarListener typedListener = listener as ICSharpCommentsGrammarListener;
			if (typedListener != null) typedListener.EnterReturn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpCommentsGrammarListener typedListener = listener as ICSharpCommentsGrammarListener;
			if (typedListener != null) typedListener.ExitReturn(this);
		}
	}

	[RuleVersion(0)]
	public ReturnContext @return() {
		ReturnContext _localctx = new ReturnContext(Context, State);
		EnterRule(_localctx, 20, RULE_return);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 112;
			Match(T__13);
			State = 113;
			_localctx.returnContent = tagContent();
			State = 114;
			_la = TokenStream.LA(1);
			if ( !(_la==T__14 || _la==T__15) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dashes() { return GetToken(CSharpCommentsGrammarParser.Dashes, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SomeTextContext[] someText() {
			return GetRuleContexts<SomeTextContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SomeTextContext someText(int i) {
			return GetRuleContext<SomeTextContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassLinkContext[] classLink() {
			return GetRuleContexts<ClassLinkContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassLinkContext classLink(int i) {
			return GetRuleContext<ClassLinkContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamrefContext[] paramref() {
			return GetRuleContexts<ParamrefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamrefContext paramref(int i) {
			return GetRuleContext<ParamrefContext>(i);
		}
		public CommentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpCommentsGrammarListener typedListener = listener as ICSharpCommentsGrammarListener;
			if (typedListener != null) typedListener.EnterComments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpCommentsGrammarListener typedListener = listener as ICSharpCommentsGrammarListener;
			if (typedListener != null) typedListener.ExitComments(this);
		}
	}

	[RuleVersion(0)]
	public CommentsContext comments() {
		CommentsContext _localctx = new CommentsContext(Context, State);
		EnterRule(_localctx, 22, RULE_comments);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 116;
			Match(Dashes);
			State = 122;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 120;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case T__8:
					case T__9:
					case TEXT:
						{
						State = 117;
						someText();
						}
						break;
					case T__2:
						{
						State = 118;
						classLink();
						}
						break;
					case T__0:
						{
						State = 119;
						paramref();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 124;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x1E', '\x80', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x3', '\x2', '\a', 
		'\x2', '\x1C', '\n', '\x2', '\f', '\x2', '\xE', '\x2', '\x1F', '\v', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\x5', '\x2', '#', '\n', '\x2', '\x3', '\x2', 
		'\x5', '\x2', '&', '\n', '\x2', '\x3', '\x2', '\x5', '\x2', ')', '\n', 
		'\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x4', '\x3', '\x4', '\a', '\x4', '\x31', '\n', '\x4', '\f', '\x4', '\xE', 
		'\x4', '\x34', '\v', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', 
		'\a', '\x5', '\x39', '\n', '\x5', '\f', '\x5', '\xE', '\x5', '<', '\v', 
		'\x5', '\x3', '\x6', '\x3', '\x6', '\a', '\x6', '@', '\n', '\x6', '\f', 
		'\x6', '\xE', '\x6', '\x43', '\v', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\a', 
		'\a', 'L', '\n', '\a', '\f', '\a', '\xE', '\a', 'O', '\v', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\b', '\x6', '\b', 'T', '\n', '\b', '\r', '\b', 
		'\xE', '\b', 'U', '\x3', '\t', '\x6', '\t', 'Y', '\n', '\t', '\r', '\t', 
		'\xE', '\t', 'Z', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\a', '\n', '\x62', '\n', '\n', '\f', '\n', '\xE', '\n', 
		'\x65', '\v', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x5', '\v', 'l', '\n', '\v', '\a', '\v', 'n', '\n', '\v', 
		'\f', '\v', '\xE', '\v', 'q', '\v', '\v', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\a', '\r', '{', '\n', '\r', '\f', '\r', '\xE', '\r', '~', '\v', '\r', 
		'\x3', '\r', '\x2', '\x2', '\xE', '\x2', '\x4', '\x6', '\b', '\n', '\f', 
		'\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x2', '\x5', '\x4', '\x2', 
		'\v', '\f', '\x19', '\x19', '\x3', '\x2', '\xE', '\xF', '\x3', '\x2', 
		'\x11', '\x12', '\x2', '\x86', '\x2', '\x1D', '\x3', '\x2', '\x2', '\x2', 
		'\x4', '*', '\x3', '\x2', '\x2', '\x2', '\x6', '.', '\x3', '\x2', '\x2', 
		'\x2', '\b', ':', '\x3', '\x2', '\x2', '\x2', '\n', '=', '\x3', '\x2', 
		'\x2', '\x2', '\f', 'H', '\x3', '\x2', '\x2', '\x2', '\xE', 'S', '\x3', 
		'\x2', '\x2', '\x2', '\x10', 'X', '\x3', '\x2', '\x2', '\x2', '\x12', 
		'\\', '\x3', '\x2', '\x2', '\x2', '\x14', 'o', '\x3', '\x2', '\x2', '\x2', 
		'\x16', 'r', '\x3', '\x2', '\x2', '\x2', '\x18', 'v', '\x3', '\x2', '\x2', 
		'\x2', '\x1A', '\x1C', '\a', '\x17', '\x2', '\x2', '\x1B', '\x1A', '\x3', 
		'\x2', '\x2', '\x2', '\x1C', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x1D', 
		'\x1B', '\x3', '\x2', '\x2', '\x2', '\x1D', '\x1E', '\x3', '\x2', '\x2', 
		'\x2', '\x1E', ' ', '\x3', '\x2', '\x2', '\x2', '\x1F', '\x1D', '\x3', 
		'\x2', '\x2', '\x2', ' ', '\"', '\x5', '\f', '\a', '\x2', '!', '#', '\x5', 
		'\b', '\x5', '\x2', '\"', '!', '\x3', '\x2', '\x2', '\x2', '\"', '#', 
		'\x3', '\x2', '\x2', '\x2', '#', '%', '\x3', '\x2', '\x2', '\x2', '$', 
		'&', '\x5', '\x16', '\f', '\x2', '%', '$', '\x3', '\x2', '\x2', '\x2', 
		'%', '&', '\x3', '\x2', '\x2', '\x2', '&', '(', '\x3', '\x2', '\x2', '\x2', 
		'\'', ')', '\x5', '\x12', '\n', '\x2', '(', '\'', '\x3', '\x2', '\x2', 
		'\x2', '(', ')', '\x3', '\x2', '\x2', '\x2', ')', '\x3', '\x3', '\x2', 
		'\x2', '\x2', '*', '+', '\a', '\x3', '\x2', '\x2', '+', ',', '\a', '\x19', 
		'\x2', '\x2', ',', '-', '\a', '\x4', '\x2', '\x2', '-', '\x5', '\x3', 
		'\x2', '\x2', '\x2', '.', '\x32', '\a', '\x5', '\x2', '\x2', '/', '\x31', 
		'\a', '\x19', '\x2', '\x2', '\x30', '/', '\x3', '\x2', '\x2', '\x2', '\x31', 
		'\x34', '\x3', '\x2', '\x2', '\x2', '\x32', '\x30', '\x3', '\x2', '\x2', 
		'\x2', '\x32', '\x33', '\x3', '\x2', '\x2', '\x2', '\x33', '\x35', '\x3', 
		'\x2', '\x2', '\x2', '\x34', '\x32', '\x3', '\x2', '\x2', '\x2', '\x35', 
		'\x36', '\a', '\x4', '\x2', '\x2', '\x36', '\a', '\x3', '\x2', '\x2', 
		'\x2', '\x37', '\x39', '\x5', '\n', '\x6', '\x2', '\x38', '\x37', '\x3', 
		'\x2', '\x2', '\x2', '\x39', '<', '\x3', '\x2', '\x2', '\x2', ':', '\x38', 
		'\x3', '\x2', '\x2', '\x2', ':', ';', '\x3', '\x2', '\x2', '\x2', ';', 
		'\t', '\x3', '\x2', '\x2', '\x2', '<', ':', '\x3', '\x2', '\x2', '\x2', 
		'=', '\x41', '\a', '\x6', '\x2', '\x2', '>', '@', '\a', '\x19', '\x2', 
		'\x2', '?', '>', '\x3', '\x2', '\x2', '\x2', '@', '\x43', '\x3', '\x2', 
		'\x2', '\x2', '\x41', '?', '\x3', '\x2', '\x2', '\x2', '\x41', '\x42', 
		'\x3', '\x2', '\x2', '\x2', '\x42', '\x44', '\x3', '\x2', '\x2', '\x2', 
		'\x43', '\x41', '\x3', '\x2', '\x2', '\x2', '\x44', '\x45', '\a', '\a', 
		'\x2', '\x2', '\x45', '\x46', '\x5', '\x14', '\v', '\x2', '\x46', 'G', 
		'\a', '\b', '\x2', '\x2', 'G', '\v', '\x3', '\x2', '\x2', '\x2', 'H', 
		'M', '\a', '\t', '\x2', '\x2', 'I', 'L', '\x5', '\x18', '\r', '\x2', 'J', 
		'L', '\x5', '\x10', '\t', '\x2', 'K', 'I', '\x3', '\x2', '\x2', '\x2', 
		'K', 'J', '\x3', '\x2', '\x2', '\x2', 'L', 'O', '\x3', '\x2', '\x2', '\x2', 
		'M', 'K', '\x3', '\x2', '\x2', '\x2', 'M', 'N', '\x3', '\x2', '\x2', '\x2', 
		'N', 'P', '\x3', '\x2', '\x2', '\x2', 'O', 'M', '\x3', '\x2', '\x2', '\x2', 
		'P', 'Q', '\a', '\n', '\x2', '\x2', 'Q', '\r', '\x3', '\x2', '\x2', '\x2', 
		'R', 'T', '\a', '\x19', '\x2', '\x2', 'S', 'R', '\x3', '\x2', '\x2', '\x2', 
		'T', 'U', '\x3', '\x2', '\x2', '\x2', 'U', 'S', '\x3', '\x2', '\x2', '\x2', 
		'U', 'V', '\x3', '\x2', '\x2', '\x2', 'V', '\xF', '\x3', '\x2', '\x2', 
		'\x2', 'W', 'Y', '\t', '\x2', '\x2', '\x2', 'X', 'W', '\x3', '\x2', '\x2', 
		'\x2', 'Y', 'Z', '\x3', '\x2', '\x2', '\x2', 'Z', 'X', '\x3', '\x2', '\x2', 
		'\x2', 'Z', '[', '\x3', '\x2', '\x2', '\x2', '[', '\x11', '\x3', '\x2', 
		'\x2', '\x2', '\\', ']', '\a', '\r', '\x2', '\x2', ']', '^', '\x5', '\xE', 
		'\b', '\x2', '^', '\x63', '\a', '\a', '\x2', '\x2', '_', '\x62', '\x5', 
		'\x10', '\t', '\x2', '`', '\x62', '\x5', '\x4', '\x3', '\x2', '\x61', 
		'_', '\x3', '\x2', '\x2', '\x2', '\x61', '`', '\x3', '\x2', '\x2', '\x2', 
		'\x62', '\x65', '\x3', '\x2', '\x2', '\x2', '\x63', '\x61', '\x3', '\x2', 
		'\x2', '\x2', '\x63', '\x64', '\x3', '\x2', '\x2', '\x2', '\x64', '\x66', 
		'\x3', '\x2', '\x2', '\x2', '\x65', '\x63', '\x3', '\x2', '\x2', '\x2', 
		'\x66', 'g', '\t', '\x3', '\x2', '\x2', 'g', '\x13', '\x3', '\x2', '\x2', 
		'\x2', 'h', 'n', '\x5', '\x18', '\r', '\x2', 'i', 'l', '\x5', '\x10', 
		'\t', '\x2', 'j', 'l', '\x5', '\x6', '\x4', '\x2', 'k', 'i', '\x3', '\x2', 
		'\x2', '\x2', 'k', 'j', '\x3', '\x2', '\x2', '\x2', 'l', 'n', '\x3', '\x2', 
		'\x2', '\x2', 'm', 'h', '\x3', '\x2', '\x2', '\x2', 'm', 'k', '\x3', '\x2', 
		'\x2', '\x2', 'n', 'q', '\x3', '\x2', '\x2', '\x2', 'o', 'm', '\x3', '\x2', 
		'\x2', '\x2', 'o', 'p', '\x3', '\x2', '\x2', '\x2', 'p', '\x15', '\x3', 
		'\x2', '\x2', '\x2', 'q', 'o', '\x3', '\x2', '\x2', '\x2', 'r', 's', '\a', 
		'\x10', '\x2', '\x2', 's', 't', '\x5', '\x14', '\v', '\x2', 't', 'u', 
		'\t', '\x4', '\x2', '\x2', 'u', '\x17', '\x3', '\x2', '\x2', '\x2', 'v', 
		'|', '\a', '\x17', '\x2', '\x2', 'w', '{', '\x5', '\x10', '\t', '\x2', 
		'x', '{', '\x5', '\x6', '\x4', '\x2', 'y', '{', '\x5', '\x4', '\x3', '\x2', 
		'z', 'w', '\x3', '\x2', '\x2', '\x2', 'z', 'x', '\x3', '\x2', '\x2', '\x2', 
		'z', 'y', '\x3', '\x2', '\x2', '\x2', '{', '~', '\x3', '\x2', '\x2', '\x2', 
		'|', 'z', '\x3', '\x2', '\x2', '\x2', '|', '}', '\x3', '\x2', '\x2', '\x2', 
		'}', '\x19', '\x3', '\x2', '\x2', '\x2', '~', '|', '\x3', '\x2', '\x2', 
		'\x2', '\x14', '\x1D', '\"', '%', '(', '\x32', ':', '\x41', 'K', 'M', 
		'U', 'Z', '\x61', '\x63', 'k', 'm', 'o', 'z', '|',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
