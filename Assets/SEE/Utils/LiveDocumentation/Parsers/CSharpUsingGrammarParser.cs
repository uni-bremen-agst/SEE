//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from CSharpUsingGrammar.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class CSharpUsingGrammarParser : Antlr4.Runtime.Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		WS=1, Using=2, Semicolon=3, TEXT=4;
	public const int
		RULE_usingDirective = 0, RULE_start = 1;
	public static readonly string[] ruleNames = {
		"usingDirective", "start"
	};

	private static readonly string[] _LiteralNames = {
		null, null, "'using'", "';'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "WS", "Using", "Semicolon", "TEXT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "CSharpUsingGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static CSharpUsingGrammarParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public CSharpUsingGrammarParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CSharpUsingGrammarParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class UsingDirectiveContext : ParserRuleContext {
		public IToken @namespace;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Using() { return GetToken(CSharpUsingGrammarParser.Using, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(CSharpUsingGrammarParser.Semicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TEXT() { return GetTokens(CSharpUsingGrammarParser.TEXT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT(int i) {
			return GetToken(CSharpUsingGrammarParser.TEXT, i);
		}
		public UsingDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usingDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpUsingGrammarListener typedListener = listener as ICSharpUsingGrammarListener;
			if (typedListener != null) typedListener.EnterUsingDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpUsingGrammarListener typedListener = listener as ICSharpUsingGrammarListener;
			if (typedListener != null) typedListener.ExitUsingDirective(this);
		}
	}

	[RuleVersion(0)]
	public UsingDirectiveContext usingDirective() {
		UsingDirectiveContext _localctx = new UsingDirectiveContext(Context, State);
		EnterRule(_localctx, 0, RULE_usingDirective);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4;
			Match(Using);
			State = 8;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TEXT) {
				{
				{
				State = 5;
				_localctx.@namespace = Match(TEXT);
				}
				}
				State = 10;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 11;
			Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StartContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UsingDirectiveContext[] usingDirective() {
			return GetRuleContexts<UsingDirectiveContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsingDirectiveContext usingDirective(int i) {
			return GetRuleContext<UsingDirectiveContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TEXT() { return GetTokens(CSharpUsingGrammarParser.TEXT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT(int i) {
			return GetToken(CSharpUsingGrammarParser.TEXT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Semicolon() { return GetTokens(CSharpUsingGrammarParser.Semicolon); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon(int i) {
			return GetToken(CSharpUsingGrammarParser.Semicolon, i);
		}
		public StartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpUsingGrammarListener typedListener = listener as ICSharpUsingGrammarListener;
			if (typedListener != null) typedListener.EnterStart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpUsingGrammarListener typedListener = listener as ICSharpUsingGrammarListener;
			if (typedListener != null) typedListener.ExitStart(this);
		}
	}

	[RuleVersion(0)]
	public StartContext start() {
		StartContext _localctx = new StartContext(Context, State);
		EnterRule(_localctx, 2, RULE_start);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 18;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Using) | (1L << Semicolon) | (1L << TEXT))) != 0)) {
				{
				State = 16;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Using:
					{
					State = 13;
					usingDirective();
					}
					break;
				case TEXT:
					{
					State = 14;
					Match(TEXT);
					}
					break;
				case Semicolon:
					{
					State = 15;
					Match(Semicolon);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 20;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x6', '\x18', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x3', '\x2', '\x3', '\x2', '\a', '\x2', '\t', '\n', '\x2', 
		'\f', '\x2', '\xE', '\x2', '\f', '\v', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\a', '\x3', '\x13', '\n', '\x3', 
		'\f', '\x3', '\xE', '\x3', '\x16', '\v', '\x3', '\x3', '\x3', '\x2', '\x2', 
		'\x4', '\x2', '\x4', '\x2', '\x2', '\x2', '\x19', '\x2', '\x6', '\x3', 
		'\x2', '\x2', '\x2', '\x4', '\x14', '\x3', '\x2', '\x2', '\x2', '\x6', 
		'\n', '\a', '\x4', '\x2', '\x2', '\a', '\t', '\a', '\x6', '\x2', '\x2', 
		'\b', '\a', '\x3', '\x2', '\x2', '\x2', '\t', '\f', '\x3', '\x2', '\x2', 
		'\x2', '\n', '\b', '\x3', '\x2', '\x2', '\x2', '\n', '\v', '\x3', '\x2', 
		'\x2', '\x2', '\v', '\r', '\x3', '\x2', '\x2', '\x2', '\f', '\n', '\x3', 
		'\x2', '\x2', '\x2', '\r', '\xE', '\a', '\x5', '\x2', '\x2', '\xE', '\x3', 
		'\x3', '\x2', '\x2', '\x2', '\xF', '\x13', '\x5', '\x2', '\x2', '\x2', 
		'\x10', '\x13', '\a', '\x6', '\x2', '\x2', '\x11', '\x13', '\a', '\x5', 
		'\x2', '\x2', '\x12', '\xF', '\x3', '\x2', '\x2', '\x2', '\x12', '\x10', 
		'\x3', '\x2', '\x2', '\x2', '\x12', '\x11', '\x3', '\x2', '\x2', '\x2', 
		'\x13', '\x16', '\x3', '\x2', '\x2', '\x2', '\x14', '\x12', '\x3', '\x2', 
		'\x2', '\x2', '\x14', '\x15', '\x3', '\x2', '\x2', '\x2', '\x15', '\x5', 
		'\x3', '\x2', '\x2', '\x2', '\x16', '\x14', '\x3', '\x2', '\x2', '\x2', 
		'\x5', '\n', '\x12', '\x14',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
