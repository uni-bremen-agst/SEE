using System;
using UnityEngine;

namespace SEE.Layout
{
    /// <summary>
    /// A factory for visual representations of graph nodes in the scene.
    /// </summary>
    public abstract class BlockFactory
    {
        /// <summary>
        /// Creates and returns a new block representation of a graph node.
        /// </summary>
        /// <returns>new block representation</returns>
        public abstract GameObject NewBlock();

        /// <summary>
        /// Creates a new visual representation of the graph node and attaches it 
        /// to the parent as one of its immediate children. This function is equivalent
        /// to  AttachBlock(parent, NewBlock()).
        /// </summary>
        /// <param name="parent">parent of the visual representation of a graph node</param>
        public virtual void AddBlock(GameObject parent)
        {
            AttachBlock(parent, NewBlock());
        }

        /// <summary>
        /// Attaches an existing block to the parent as one of its immediate children.
        /// Adds a BlockModifier accordingly. 
        /// Note: This method must be extended by subclasses to attach the appropriate
        /// BlockModifier.
        /// </summary>
        /// <param name="parent"></param>
        /// <param name="block"></param>
        public virtual void AttachBlock(GameObject parent, GameObject block)
        {
            block.transform.parent = parent.transform;
            block.name = "house " + parent.name;
        }

        /// <summary>
        /// The length unit of a block representation in Unity measures.
        /// </summary>
        /// <returns>length unit of a block representation in Unity measure</returns>
        public virtual float Unit()
        {
            return 1.0f;
        }

        /// <summary>
        /// Returns the size of the block generated by this factory.
        /// Precondition: The given block must have been generated by this factory.
        /// </summary>
        /// <param name="block">block whose size is to be returned</param>
        /// <returns>size of the block</returns>
        public abstract Vector3 GetSize(GameObject block);

        /// <summary>
        /// Scales the given block by the given scale. Note: The unit of scaling depends
        /// upon a block factory type. Subclasses may use different units. For instance,
        /// a cube factory measures in terms of Unity units, while a BuildingFactory
        /// uses floors.
        /// Precondition: The given block must have been generated by this factory.
        /// </summary>
        /// <param name="block">block to be scaled</param>
        /// <param name="scale">scaling factor</param>
        public abstract void ScaleBlock(GameObject block, Vector3 scale);
    }
}
