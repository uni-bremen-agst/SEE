//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class VivoxCoreInstance {
  public static bool vx_initialized {
    set {
      VivoxCoreInstancePINVOKE.vx_initialized_set(value);
    } 
    get {
      bool ret = VivoxCoreInstancePINVOKE.vx_initialized_get();
      return ret;
    } 
  }

  public static string vx_get_error_string(int errorCode) {
    string ret = VivoxCoreInstancePINVOKE.vx_get_error_string(errorCode);
    return ret;
  }

  public static string vx_get_request_type_string(vx_request_type t) {
    string ret = VivoxCoreInstancePINVOKE.vx_get_request_type_string((int)t);
    return ret;
  }

  public static string vx_get_response_type_string(vx_response_type t) {
    string ret = VivoxCoreInstancePINVOKE.vx_get_response_type_string((int)t);
    return ret;
  }

  public static string vx_get_event_type_string(vx_event_type t) {
    string ret = VivoxCoreInstancePINVOKE.vx_get_event_type_string((int)t);
    return ret;
  }

  public static string vx_get_login_state_string(vx_login_state_change_state t) {
    string ret = VivoxCoreInstancePINVOKE.vx_get_login_state_string((int)t);
    return ret;
  }

  public static string vx_get_presence_state_string(vx_buddy_presence_state t) {
    string ret = VivoxCoreInstancePINVOKE.vx_get_presence_state_string((int)t);
    return ret;
  }

  public static string vx_get_notification_type_string(vx_notification_type t) {
    string ret = VivoxCoreInstancePINVOKE.vx_get_notification_type_string((int)t);
    return ret;
  }

  public static string vx_get_session_media_state_string(vx_session_media_state t) {
    string ret = VivoxCoreInstancePINVOKE.vx_get_session_media_state_string((int)t);
    return ret;
  }

  public static string vx_get_session_text_state_string(vx_session_text_state t) {
    string ret = VivoxCoreInstancePINVOKE.vx_get_session_text_state_string((int)t);
    return ret;
  }

  public static string vx_get_media_completion_type_string(vx_media_completion_type t) {
    string ret = VivoxCoreInstancePINVOKE.vx_get_media_completion_type_string((int)t);
    return ret;
  }

  public static string vx_get_audio_device_hot_swap_type_string(vx_audio_device_hot_swap_event_type_t t) {
    string ret = VivoxCoreInstancePINVOKE.vx_get_audio_device_hot_swap_type_string((int)t);
    return ret;
  }

  public static string vx_get_participant_removed_reason_string(vx_participant_removed_reason t) {
    string ret = VivoxCoreInstancePINVOKE.vx_get_participant_removed_reason_string((int)t);
    return ret;
  }

  public static string vx_get_tts_dest_string(vx_tts_destination t) {
    string ret = VivoxCoreInstancePINVOKE.vx_get_tts_dest_string((int)t);
    return ret;
  }

  public static string vx_get_log_level_string(vx_log_level level) {
    string ret = VivoxCoreInstancePINVOKE.vx_get_log_level_string((int)level);
    return ret;
  }

  public static int destroy_evt(vx_evt_base_t pCmd) {
    int ret = VivoxCoreInstancePINVOKE.destroy_evt(vx_evt_base_t.getCPtr(pCmd));
    return ret;
  }

  public static int vx_req_connector_create_create(SWIGTYPE_p_p_vx_req_connector_create req) {
    int ret = VivoxCoreInstancePINVOKE.vx_req_connector_create_create(SWIGTYPE_p_p_vx_req_connector_create.getCPtr(req));
    return ret;
  }

  public static int vx_req_connector_initiate_shutdown_create(SWIGTYPE_p_p_vx_req_connector_initiate_shutdown req) {
    int ret = VivoxCoreInstancePINVOKE.vx_req_connector_initiate_shutdown_create(SWIGTYPE_p_p_vx_req_connector_initiate_shutdown.getCPtr(req));
    return ret;
  }

  public static int vx_req_account_login_create(SWIGTYPE_p_p_vx_req_account_login req) {
    int ret = VivoxCoreInstancePINVOKE.vx_req_account_login_create(SWIGTYPE_p_p_vx_req_account_login.getCPtr(req));
    return ret;
  }

  public static int vx_req_account_authtoken_login_create(SWIGTYPE_p_p_vx_req_account_authtoken_login req) {
    int ret = VivoxCoreInstancePINVOKE.vx_req_account_authtoken_login_create(SWIGTYPE_p_p_vx_req_account_authtoken_login.getCPtr(req));
    return ret;
  }

  public static int vx_req_account_anonymous_login_create(SWIGTYPE_p_p_vx_req_account_anonymous_login req) {
    int ret = VivoxCoreInstancePINVOKE.vx_req_account_anonymous_login_create(SWIGTYPE_p_p_vx_req_account_anonymous_login.getCPtr(req));
    return ret;
  }

  public static int vx_req_account_logout_create(SWIGTYPE_p_p_vx_req_account_logout req) {
    int ret = VivoxCoreInstancePINVOKE.vx_req_account_logout_create(SWIGTYPE_p_p_vx_req_account_logout.getCPtr(req));
    return ret;
  }

  public static int vx_req_account_set_login_properties_create(SWIGTYPE_p_p_vx_req_account_set_login_properties req) {
    int ret = VivoxCoreInstancePINVOKE.vx_req_account_set_login_properties_create(SWIGTYPE_p_p_vx_req_account_set_login_properties.getCPtr(req));
    return ret;
  }

  public static int vx_req_sessiongroup_create_create(SWIGTYPE_p_p_vx_req_sessiongroup_create req) {
    int ret = VivoxCoreInstancePINVOKE.vx_req_sessiongroup_create_create(SWIGTYPE_p_p_vx_req_sessiongroup_create.getCPtr(req));
    return ret;
  }

  public static int vx_req_sessiongroup_terminate_create(SWIGTYPE_p_p_vx_req_sessiongroup_terminate req) {
    int ret = VivoxCoreInstancePINVOKE.vx_req_sessiongroup_terminate_create(SWIGTYPE_p_p_vx_req_sessiongroup_terminate.getCPtr(req));
    return ret;
  }

  public static int vx_req_sessiongroup_add_session_create(SWIGTYPE_p_p_vx_req_sessiongroup_add_session req) {
    int ret = VivoxCoreInstancePINVOKE.vx_req_sessiongroup_add_session_create(SWIGTYPE_p_p_vx_req_sessiongroup_add_session.getCPtr(req));
    return ret;
  }

  public static int vx_req_sessiongroup_remove_session_create(SWIGTYPE_p_p_vx_req_sessiongroup_remove_session req) {
    int ret = VivoxCoreInstancePINVOKE.vx_req_sessiongroup_remove_session_create(SWIGTYPE_p_p_vx_req_sessiongroup_remove_session.getCPtr(req));
    return ret;
  }

  public static int vx_req_sessiongroup_set_focus_create(SWIGTYPE_p_p_vx_req_sessiongroup_set_focus req) {
    int ret = VivoxCoreInstancePINVOKE.vx_req_sessiongroup_set_focus_create(SWIGTYPE_p_p_vx_req_sessiongroup_set_focus.getCPtr(req));
    return ret;
  }

  public static int vx_req_sessiongroup_unset_focus_create(SWIGTYPE_p_p_vx_req_sessiongroup_unset_focus req) {
    int ret = VivoxCoreInstancePINVOKE.vx_req_sessiongroup_unset_focus_create(SWIGTYPE_p_p_vx_req_sessiongroup_unset_focus.getCPtr(req));
    return ret;
  }

  public static int vx_req_sessiongroup_reset_focus_create(SWIGTYPE_p_p_vx_req_sessiongroup_reset_focus req) {
    int ret = VivoxCoreInstancePINVOKE.vx_req_sessiongroup_reset_focus_create(SWIGTYPE_p_p_vx_req_sessiongroup_reset_focus.getCPtr(req));
    return ret;
  }

  public static int vx_req_sessiongroup_set_tx_session_create(SWIGTYPE_p_p_vx_req_sessiongroup_set_tx_session req) {
    int ret = VivoxCoreInstancePINVOKE.vx_req_sessiongroup_set_tx_session_create(SWIGTYPE_p_p_vx_req_sessiongroup_set_tx_session.getCPtr(req));
    return ret;
  }

  public static int vx_req_sessiongroup_set_tx_all_sessions_create(SWIGTYPE_p_p_vx_req_sessiongroup_set_tx_all_sessions req) {
    int ret = VivoxCoreInstancePINVOKE.vx_req_sessiongroup_set_tx_all_sessions_create(SWIGTYPE_p_p_vx_req_sessiongroup_set_tx_all_sessions.getCPtr(req));
    return ret;
  }

  public static int vx_req_sessiongroup_set_tx_no_session_create(SWIGTYPE_p_p_vx_req_sessiongroup_set_tx_no_session req) {
    int ret = VivoxCoreInstancePINVOKE.vx_req_sessiongroup_set_tx_no_session_create(SWIGTYPE_p_p_vx_req_sessiongroup_set_tx_no_session.getCPtr(req));
    return ret;
  }

  public static int vx_req_sessiongroup_set_session_3d_position_create(SWIGTYPE_p_p_vx_req_sessiongroup_set_session_3d_position req) {
    int ret = VivoxCoreInstancePINVOKE.vx_req_sessiongroup_set_session_3d_position_create(SWIGTYPE_p_p_vx_req_sessiongroup_set_session_3d_position.getCPtr(req));
    return ret;
  }

  public static int vx_req_sessiongroup_control_audio_injection_create(SWIGTYPE_p_p_vx_req_sessiongroup_control_audio_injection req) {
    int ret = VivoxCoreInstancePINVOKE.vx_req_sessiongroup_control_audio_injection_create(SWIGTYPE_p_p_vx_req_sessiongroup_control_audio_injection.getCPtr(req));
    return ret;
  }

  public static int vx_req_session_create_create(SWIGTYPE_p_p_vx_req_session_create req) {
    int ret = VivoxCoreInstancePINVOKE.vx_req_session_create_create(SWIGTYPE_p_p_vx_req_session_create.getCPtr(req));
    return ret;
  }

  public static int vx_req_session_media_connect_create(SWIGTYPE_p_p_vx_req_session_media_connect req) {
    int ret = VivoxCoreInstancePINVOKE.vx_req_session_media_connect_create(SWIGTYPE_p_p_vx_req_session_media_connect.getCPtr(req));
    return ret;
  }

  public static int vx_req_session_media_disconnect_create(SWIGTYPE_p_p_vx_req_session_media_disconnect req) {
    int ret = VivoxCoreInstancePINVOKE.vx_req_session_media_disconnect_create(SWIGTYPE_p_p_vx_req_session_media_disconnect.getCPtr(req));
    return ret;
  }

  public static int vx_req_session_text_connect_create(SWIGTYPE_p_p_vx_req_session_text_connect req) {
    int ret = VivoxCoreInstancePINVOKE.vx_req_session_text_connect_create(SWIGTYPE_p_p_vx_req_session_text_connect.getCPtr(req));
    return ret;
  }

  public static int vx_req_session_text_disconnect_create(SWIGTYPE_p_p_vx_req_session_text_disconnect req) {
    int ret = VivoxCoreInstancePINVOKE.vx_req_session_text_disconnect_create(SWIGTYPE_p_p_vx_req_session_text_disconnect.getCPtr(req));
    return ret;
  }

  public static int vx_req_session_terminate_create(SWIGTYPE_p_p_vx_req_session_terminate req) {
    int ret = VivoxCoreInstancePINVOKE.vx_req_session_terminate_create(SWIGTYPE_p_p_vx_req_session_terminate.getCPtr(req));
    return ret;
  }

  public static int vx_req_session_mute_local_speaker_create(SWIGTYPE_p_p_vx_req_session_mute_local_speaker req) {
    int ret = VivoxCoreInstancePINVOKE.vx_req_session_mute_local_speaker_create(SWIGTYPE_p_p_vx_req_session_mute_local_speaker.getCPtr(req));
    return ret;
  }

  public static int vx_req_session_set_local_speaker_volume_create(SWIGTYPE_p_p_vx_req_session_set_local_speaker_volume req) {
    int ret = VivoxCoreInstancePINVOKE.vx_req_session_set_local_speaker_volume_create(SWIGTYPE_p_p_vx_req_session_set_local_speaker_volume.getCPtr(req));
    return ret;
  }

  public static int vx_req_session_channel_invite_user_create(SWIGTYPE_p_p_vx_req_session_channel_invite_user req) {
    int ret = VivoxCoreInstancePINVOKE.vx_req_session_channel_invite_user_create(SWIGTYPE_p_p_vx_req_session_channel_invite_user.getCPtr(req));
    return ret;
  }

  public static int vx_req_session_set_participant_volume_for_me_create(SWIGTYPE_p_p_vx_req_session_set_participant_volume_for_me req) {
    int ret = VivoxCoreInstancePINVOKE.vx_req_session_set_participant_volume_for_me_create(SWIGTYPE_p_p_vx_req_session_set_participant_volume_for_me.getCPtr(req));
    return ret;
  }

  public static int vx_req_session_set_participant_mute_for_me_create(SWIGTYPE_p_p_vx_req_session_set_participant_mute_for_me req) {
    int ret = VivoxCoreInstancePINVOKE.vx_req_session_set_participant_mute_for_me_create(SWIGTYPE_p_p_vx_req_session_set_participant_mute_for_me.getCPtr(req));
    return ret;
  }

  public static int vx_req_session_set_3d_position_create(SWIGTYPE_p_p_vx_req_session_set_3d_position req) {
    int ret = VivoxCoreInstancePINVOKE.vx_req_session_set_3d_position_create(SWIGTYPE_p_p_vx_req_session_set_3d_position.getCPtr(req));
    return ret;
  }

  public static int vx_req_session_set_voice_font_create(SWIGTYPE_p_p_vx_req_session_set_voice_font req) {
    int ret = VivoxCoreInstancePINVOKE.vx_req_session_set_voice_font_create(SWIGTYPE_p_p_vx_req_session_set_voice_font.getCPtr(req));
    return ret;
  }

  public static int vx_req_account_channel_get_participants_create(SWIGTYPE_p_p_vx_req_account_channel_get_participants req) {
    int ret = VivoxCoreInstancePINVOKE.vx_req_account_channel_get_participants_create(SWIGTYPE_p_p_vx_req_account_channel_get_participants.getCPtr(req));
    return ret;
  }

  public static int vx_req_account_channel_change_owner_create(SWIGTYPE_p_p_vx_req_account_channel_change_owner req) {
    int ret = VivoxCoreInstancePINVOKE.vx_req_account_channel_change_owner_create(SWIGTYPE_p_p_vx_req_account_channel_change_owner.getCPtr(req));
    return ret;
  }

  public static int vx_req_account_send_user_app_data_create(SWIGTYPE_p_p_vx_req_account_send_user_app_data req) {
    int ret = VivoxCoreInstancePINVOKE.vx_req_account_send_user_app_data_create(SWIGTYPE_p_p_vx_req_account_send_user_app_data.getCPtr(req));
    return ret;
  }

  public static int vx_req_account_channel_create_create(SWIGTYPE_p_p_vx_req_account_channel_create req) {
    int ret = VivoxCoreInstancePINVOKE.vx_req_account_channel_create_create(SWIGTYPE_p_p_vx_req_account_channel_create.getCPtr(req));
    return ret;
  }

  public static int vx_req_account_channel_update_create(SWIGTYPE_p_p_vx_req_account_channel_update req) {
    int ret = VivoxCoreInstancePINVOKE.vx_req_account_channel_update_create(SWIGTYPE_p_p_vx_req_account_channel_update.getCPtr(req));
    return ret;
  }

  public static int vx_req_account_channel_delete_create(SWIGTYPE_p_p_vx_req_account_channel_delete req) {
    int ret = VivoxCoreInstancePINVOKE.vx_req_account_channel_delete_create(SWIGTYPE_p_p_vx_req_account_channel_delete.getCPtr(req));
    return ret;
  }

  public static int vx_req_account_channel_favorites_get_list_create(SWIGTYPE_p_p_vx_req_account_channel_favorites_get_list req) {
    int ret = VivoxCoreInstancePINVOKE.vx_req_account_channel_favorites_get_list_create(SWIGTYPE_p_p_vx_req_account_channel_favorites_get_list.getCPtr(req));
    return ret;
  }

  public static int vx_req_account_channel_favorite_set_create(SWIGTYPE_p_p_vx_req_account_channel_favorite_set req) {
    int ret = VivoxCoreInstancePINVOKE.vx_req_account_channel_favorite_set_create(SWIGTYPE_p_p_vx_req_account_channel_favorite_set.getCPtr(req));
    return ret;
  }

  public static int vx_req_account_channel_favorite_delete_create(SWIGTYPE_p_p_vx_req_account_channel_favorite_delete req) {
    int ret = VivoxCoreInstancePINVOKE.vx_req_account_channel_favorite_delete_create(SWIGTYPE_p_p_vx_req_account_channel_favorite_delete.getCPtr(req));
    return ret;
  }

  public static int vx_req_account_channel_favorite_group_set_create(SWIGTYPE_p_p_vx_req_account_channel_favorite_group_set req) {
    int ret = VivoxCoreInstancePINVOKE.vx_req_account_channel_favorite_group_set_create(SWIGTYPE_p_p_vx_req_account_channel_favorite_group_set.getCPtr(req));
    return ret;
  }

  public static int vx_req_account_channel_favorite_group_delete_create(SWIGTYPE_p_p_vx_req_account_channel_favorite_group_delete req) {
    int ret = VivoxCoreInstancePINVOKE.vx_req_account_channel_favorite_group_delete_create(SWIGTYPE_p_p_vx_req_account_channel_favorite_group_delete.getCPtr(req));
    return ret;
  }

  public static int vx_req_account_channel_get_info_create(SWIGTYPE_p_p_vx_req_account_channel_get_info req) {
    int ret = VivoxCoreInstancePINVOKE.vx_req_account_channel_get_info_create(SWIGTYPE_p_p_vx_req_account_channel_get_info.getCPtr(req));
    return ret;
  }

  public static int vx_req_account_channel_search_create(SWIGTYPE_p_p_vx_req_account_channel_search req) {
    int ret = VivoxCoreInstancePINVOKE.vx_req_account_channel_search_create(SWIGTYPE_p_p_vx_req_account_channel_search.getCPtr(req));
    return ret;
  }

  public static int vx_req_account_buddy_search_create(SWIGTYPE_p_p_vx_req_account_buddy_search req) {
    int ret = VivoxCoreInstancePINVOKE.vx_req_account_buddy_search_create(SWIGTYPE_p_p_vx_req_account_buddy_search.getCPtr(req));
    return ret;
  }

  public static int vx_req_account_channel_add_moderator_create(SWIGTYPE_p_p_vx_req_account_channel_add_moderator req) {
    int ret = VivoxCoreInstancePINVOKE.vx_req_account_channel_add_moderator_create(SWIGTYPE_p_p_vx_req_account_channel_add_moderator.getCPtr(req));
    return ret;
  }

  public static int vx_req_account_channel_remove_moderator_create(SWIGTYPE_p_p_vx_req_account_channel_remove_moderator req) {
    int ret = VivoxCoreInstancePINVOKE.vx_req_account_channel_remove_moderator_create(SWIGTYPE_p_p_vx_req_account_channel_remove_moderator.getCPtr(req));
    return ret;
  }

  public static int vx_req_account_channel_get_moderators_create(SWIGTYPE_p_p_vx_req_account_channel_get_moderators req) {
    int ret = VivoxCoreInstancePINVOKE.vx_req_account_channel_get_moderators_create(SWIGTYPE_p_p_vx_req_account_channel_get_moderators.getCPtr(req));
    return ret;
  }

  public static int vx_req_account_channel_add_acl_create(SWIGTYPE_p_p_vx_req_account_channel_add_acl req) {
    int ret = VivoxCoreInstancePINVOKE.vx_req_account_channel_add_acl_create(SWIGTYPE_p_p_vx_req_account_channel_add_acl.getCPtr(req));
    return ret;
  }

  public static int vx_req_account_channel_remove_acl_create(SWIGTYPE_p_p_vx_req_account_channel_remove_acl req) {
    int ret = VivoxCoreInstancePINVOKE.vx_req_account_channel_remove_acl_create(SWIGTYPE_p_p_vx_req_account_channel_remove_acl.getCPtr(req));
    return ret;
  }

  public static int vx_req_account_channel_get_acl_create(SWIGTYPE_p_p_vx_req_account_channel_get_acl req) {
    int ret = VivoxCoreInstancePINVOKE.vx_req_account_channel_get_acl_create(SWIGTYPE_p_p_vx_req_account_channel_get_acl.getCPtr(req));
    return ret;
  }

  public static int vx_req_channel_mute_user_create(SWIGTYPE_p_p_vx_req_channel_mute_user req) {
    int ret = VivoxCoreInstancePINVOKE.vx_req_channel_mute_user_create(SWIGTYPE_p_p_vx_req_channel_mute_user.getCPtr(req));
    return ret;
  }

  public static int vx_req_channel_ban_user_create(SWIGTYPE_p_p_vx_req_channel_ban_user req) {
    int ret = VivoxCoreInstancePINVOKE.vx_req_channel_ban_user_create(SWIGTYPE_p_p_vx_req_channel_ban_user.getCPtr(req));
    return ret;
  }

  public static int vx_req_channel_get_banned_users_create(SWIGTYPE_p_p_vx_req_channel_get_banned_users req) {
    int ret = VivoxCoreInstancePINVOKE.vx_req_channel_get_banned_users_create(SWIGTYPE_p_p_vx_req_channel_get_banned_users.getCPtr(req));
    return ret;
  }

  public static int vx_req_channel_kick_user_create(SWIGTYPE_p_p_vx_req_channel_kick_user req) {
    int ret = VivoxCoreInstancePINVOKE.vx_req_channel_kick_user_create(SWIGTYPE_p_p_vx_req_channel_kick_user.getCPtr(req));
    return ret;
  }

  public static int vx_req_channel_mute_all_users_create(SWIGTYPE_p_p_vx_req_channel_mute_all_users req) {
    int ret = VivoxCoreInstancePINVOKE.vx_req_channel_mute_all_users_create(SWIGTYPE_p_p_vx_req_channel_mute_all_users.getCPtr(req));
    return ret;
  }

  public static int vx_req_channel_set_lock_mode_create(SWIGTYPE_p_p_vx_req_channel_set_lock_mode req) {
    int ret = VivoxCoreInstancePINVOKE.vx_req_channel_set_lock_mode_create(SWIGTYPE_p_p_vx_req_channel_set_lock_mode.getCPtr(req));
    return ret;
  }

  public static int vx_req_connector_mute_local_mic_create(SWIGTYPE_p_p_vx_req_connector_mute_local_mic req) {
    int ret = VivoxCoreInstancePINVOKE.vx_req_connector_mute_local_mic_create(SWIGTYPE_p_p_vx_req_connector_mute_local_mic.getCPtr(req));
    return ret;
  }

  public static int vx_req_connector_mute_local_speaker_create(SWIGTYPE_p_p_vx_req_connector_mute_local_speaker req) {
    int ret = VivoxCoreInstancePINVOKE.vx_req_connector_mute_local_speaker_create(SWIGTYPE_p_p_vx_req_connector_mute_local_speaker.getCPtr(req));
    return ret;
  }

  public static int vx_req_connector_set_local_mic_volume_create(SWIGTYPE_p_p_vx_req_connector_set_local_mic_volume req) {
    int ret = VivoxCoreInstancePINVOKE.vx_req_connector_set_local_mic_volume_create(SWIGTYPE_p_p_vx_req_connector_set_local_mic_volume.getCPtr(req));
    return ret;
  }

  public static int vx_req_connector_set_local_speaker_volume_create(SWIGTYPE_p_p_vx_req_connector_set_local_speaker_volume req) {
    int ret = VivoxCoreInstancePINVOKE.vx_req_connector_set_local_speaker_volume_create(SWIGTYPE_p_p_vx_req_connector_set_local_speaker_volume.getCPtr(req));
    return ret;
  }

  public static int vx_req_connector_get_local_audio_info_create(SWIGTYPE_p_p_vx_req_connector_get_local_audio_info req) {
    int ret = VivoxCoreInstancePINVOKE.vx_req_connector_get_local_audio_info_create(SWIGTYPE_p_p_vx_req_connector_get_local_audio_info.getCPtr(req));
    return ret;
  }

  public static int vx_req_account_buddy_set_create(SWIGTYPE_p_p_vx_req_account_buddy_set req) {
    int ret = VivoxCoreInstancePINVOKE.vx_req_account_buddy_set_create(SWIGTYPE_p_p_vx_req_account_buddy_set.getCPtr(req));
    return ret;
  }

  public static int vx_req_account_buddy_delete_create(SWIGTYPE_p_p_vx_req_account_buddy_delete req) {
    int ret = VivoxCoreInstancePINVOKE.vx_req_account_buddy_delete_create(SWIGTYPE_p_p_vx_req_account_buddy_delete.getCPtr(req));
    return ret;
  }

  public static int vx_req_account_buddygroup_set_create(SWIGTYPE_p_p_vx_req_account_buddygroup_set req) {
    int ret = VivoxCoreInstancePINVOKE.vx_req_account_buddygroup_set_create(SWIGTYPE_p_p_vx_req_account_buddygroup_set.getCPtr(req));
    return ret;
  }

  public static int vx_req_account_buddygroup_delete_create(SWIGTYPE_p_p_vx_req_account_buddygroup_delete req) {
    int ret = VivoxCoreInstancePINVOKE.vx_req_account_buddygroup_delete_create(SWIGTYPE_p_p_vx_req_account_buddygroup_delete.getCPtr(req));
    return ret;
  }

  public static int vx_req_account_list_buddies_and_groups_create(SWIGTYPE_p_p_vx_req_account_list_buddies_and_groups req) {
    int ret = VivoxCoreInstancePINVOKE.vx_req_account_list_buddies_and_groups_create(SWIGTYPE_p_p_vx_req_account_list_buddies_and_groups.getCPtr(req));
    return ret;
  }

  public static int vx_req_session_send_message_create(SWIGTYPE_p_p_vx_req_session_send_message req) {
    int ret = VivoxCoreInstancePINVOKE.vx_req_session_send_message_create(SWIGTYPE_p_p_vx_req_session_send_message.getCPtr(req));
    return ret;
  }

  public static int vx_req_session_archive_query_create(SWIGTYPE_p_p_vx_req_session_archive_query req) {
    int ret = VivoxCoreInstancePINVOKE.vx_req_session_archive_query_create(SWIGTYPE_p_p_vx_req_session_archive_query.getCPtr(req));
    return ret;
  }

  public static int vx_req_account_set_presence_create(SWIGTYPE_p_p_vx_req_account_set_presence req) {
    int ret = VivoxCoreInstancePINVOKE.vx_req_account_set_presence_create(SWIGTYPE_p_p_vx_req_account_set_presence.getCPtr(req));
    return ret;
  }

  public static int vx_req_account_send_subscription_reply_create(SWIGTYPE_p_p_vx_req_account_send_subscription_reply req) {
    int ret = VivoxCoreInstancePINVOKE.vx_req_account_send_subscription_reply_create(SWIGTYPE_p_p_vx_req_account_send_subscription_reply.getCPtr(req));
    return ret;
  }

  public static int vx_req_session_send_notification_create(SWIGTYPE_p_p_vx_req_session_send_notification req) {
    int ret = VivoxCoreInstancePINVOKE.vx_req_session_send_notification_create(SWIGTYPE_p_p_vx_req_session_send_notification.getCPtr(req));
    return ret;
  }

  public static int vx_req_session_send_dtmf_create(SWIGTYPE_p_p_vx_req_session_send_dtmf req) {
    int ret = VivoxCoreInstancePINVOKE.vx_req_session_send_dtmf_create(SWIGTYPE_p_p_vx_req_session_send_dtmf.getCPtr(req));
    return ret;
  }

  public static int vx_req_account_create_block_rule_create(SWIGTYPE_p_p_vx_req_account_create_block_rule req) {
    int ret = VivoxCoreInstancePINVOKE.vx_req_account_create_block_rule_create(SWIGTYPE_p_p_vx_req_account_create_block_rule.getCPtr(req));
    return ret;
  }

  public static int vx_req_account_delete_block_rule_create(SWIGTYPE_p_p_vx_req_account_delete_block_rule req) {
    int ret = VivoxCoreInstancePINVOKE.vx_req_account_delete_block_rule_create(SWIGTYPE_p_p_vx_req_account_delete_block_rule.getCPtr(req));
    return ret;
  }

  public static int vx_req_account_list_block_rules_create(SWIGTYPE_p_p_vx_req_account_list_block_rules req) {
    int ret = VivoxCoreInstancePINVOKE.vx_req_account_list_block_rules_create(SWIGTYPE_p_p_vx_req_account_list_block_rules.getCPtr(req));
    return ret;
  }

  public static int vx_req_account_create_auto_accept_rule_create(SWIGTYPE_p_p_vx_req_account_create_auto_accept_rule req) {
    int ret = VivoxCoreInstancePINVOKE.vx_req_account_create_auto_accept_rule_create(SWIGTYPE_p_p_vx_req_account_create_auto_accept_rule.getCPtr(req));
    return ret;
  }

  public static int vx_req_account_delete_auto_accept_rule_create(SWIGTYPE_p_p_vx_req_account_delete_auto_accept_rule req) {
    int ret = VivoxCoreInstancePINVOKE.vx_req_account_delete_auto_accept_rule_create(SWIGTYPE_p_p_vx_req_account_delete_auto_accept_rule.getCPtr(req));
    return ret;
  }

  public static int vx_req_account_list_auto_accept_rules_create(SWIGTYPE_p_p_vx_req_account_list_auto_accept_rules req) {
    int ret = VivoxCoreInstancePINVOKE.vx_req_account_list_auto_accept_rules_create(SWIGTYPE_p_p_vx_req_account_list_auto_accept_rules.getCPtr(req));
    return ret;
  }

  public static int vx_req_account_update_account_create(SWIGTYPE_p_p_vx_req_account_update_account req) {
    int ret = VivoxCoreInstancePINVOKE.vx_req_account_update_account_create(SWIGTYPE_p_p_vx_req_account_update_account.getCPtr(req));
    return ret;
  }

  public static int vx_req_account_get_account_create(SWIGTYPE_p_p_vx_req_account_get_account req) {
    int ret = VivoxCoreInstancePINVOKE.vx_req_account_get_account_create(SWIGTYPE_p_p_vx_req_account_get_account.getCPtr(req));
    return ret;
  }

  public static int vx_req_account_send_sms_create(SWIGTYPE_p_p_vx_req_account_send_sms req) {
    int ret = VivoxCoreInstancePINVOKE.vx_req_account_send_sms_create(SWIGTYPE_p_p_vx_req_account_send_sms.getCPtr(req));
    return ret;
  }

  public static int vx_req_aux_connectivity_info_create(SWIGTYPE_p_p_vx_req_aux_connectivity_info req) {
    int ret = VivoxCoreInstancePINVOKE.vx_req_aux_connectivity_info_create(SWIGTYPE_p_p_vx_req_aux_connectivity_info.getCPtr(req));
    return ret;
  }

  public static int vx_req_aux_get_render_devices_create(SWIGTYPE_p_p_vx_req_aux_get_render_devices req) {
    int ret = VivoxCoreInstancePINVOKE.vx_req_aux_get_render_devices_create(SWIGTYPE_p_p_vx_req_aux_get_render_devices.getCPtr(req));
    return ret;
  }

  public static int vx_req_aux_get_capture_devices_create(SWIGTYPE_p_p_vx_req_aux_get_capture_devices req) {
    int ret = VivoxCoreInstancePINVOKE.vx_req_aux_get_capture_devices_create(SWIGTYPE_p_p_vx_req_aux_get_capture_devices.getCPtr(req));
    return ret;
  }

  public static int vx_req_aux_set_render_device_create(SWIGTYPE_p_p_vx_req_aux_set_render_device req) {
    int ret = VivoxCoreInstancePINVOKE.vx_req_aux_set_render_device_create(SWIGTYPE_p_p_vx_req_aux_set_render_device.getCPtr(req));
    return ret;
  }

  public static int vx_req_aux_set_capture_device_create(SWIGTYPE_p_p_vx_req_aux_set_capture_device req) {
    int ret = VivoxCoreInstancePINVOKE.vx_req_aux_set_capture_device_create(SWIGTYPE_p_p_vx_req_aux_set_capture_device.getCPtr(req));
    return ret;
  }

  public static int vx_req_aux_get_mic_level_create(SWIGTYPE_p_p_vx_req_aux_get_mic_level req) {
    int ret = VivoxCoreInstancePINVOKE.vx_req_aux_get_mic_level_create(SWIGTYPE_p_p_vx_req_aux_get_mic_level.getCPtr(req));
    return ret;
  }

  public static int vx_req_aux_get_speaker_level_create(SWIGTYPE_p_p_vx_req_aux_get_speaker_level req) {
    int ret = VivoxCoreInstancePINVOKE.vx_req_aux_get_speaker_level_create(SWIGTYPE_p_p_vx_req_aux_get_speaker_level.getCPtr(req));
    return ret;
  }

  public static int vx_req_aux_set_mic_level_create(SWIGTYPE_p_p_vx_req_aux_set_mic_level req) {
    int ret = VivoxCoreInstancePINVOKE.vx_req_aux_set_mic_level_create(SWIGTYPE_p_p_vx_req_aux_set_mic_level.getCPtr(req));
    return ret;
  }

  public static int vx_req_aux_set_speaker_level_create(SWIGTYPE_p_p_vx_req_aux_set_speaker_level req) {
    int ret = VivoxCoreInstancePINVOKE.vx_req_aux_set_speaker_level_create(SWIGTYPE_p_p_vx_req_aux_set_speaker_level.getCPtr(req));
    return ret;
  }

  public static int vx_req_aux_render_audio_start_create(SWIGTYPE_p_p_vx_req_aux_render_audio_start req) {
    int ret = VivoxCoreInstancePINVOKE.vx_req_aux_render_audio_start_create(SWIGTYPE_p_p_vx_req_aux_render_audio_start.getCPtr(req));
    return ret;
  }

  public static int vx_req_aux_render_audio_modify_create(SWIGTYPE_p_p_vx_req_aux_render_audio_modify req) {
    int ret = VivoxCoreInstancePINVOKE.vx_req_aux_render_audio_modify_create(SWIGTYPE_p_p_vx_req_aux_render_audio_modify.getCPtr(req));
    return ret;
  }

  public static int vx_req_aux_get_vad_properties_create(SWIGTYPE_p_p_vx_req_aux_get_vad_properties req) {
    int ret = VivoxCoreInstancePINVOKE.vx_req_aux_get_vad_properties_create(SWIGTYPE_p_p_vx_req_aux_get_vad_properties.getCPtr(req));
    return ret;
  }

  public static int vx_req_aux_set_vad_properties_create(SWIGTYPE_p_p_vx_req_aux_set_vad_properties req) {
    int ret = VivoxCoreInstancePINVOKE.vx_req_aux_set_vad_properties_create(SWIGTYPE_p_p_vx_req_aux_set_vad_properties.getCPtr(req));
    return ret;
  }

  public static int vx_req_aux_render_audio_stop_create(SWIGTYPE_p_p_vx_req_aux_render_audio_stop req) {
    int ret = VivoxCoreInstancePINVOKE.vx_req_aux_render_audio_stop_create(SWIGTYPE_p_p_vx_req_aux_render_audio_stop.getCPtr(req));
    return ret;
  }

  public static int vx_req_aux_capture_audio_start_create(SWIGTYPE_p_p_vx_req_aux_capture_audio_start req) {
    int ret = VivoxCoreInstancePINVOKE.vx_req_aux_capture_audio_start_create(SWIGTYPE_p_p_vx_req_aux_capture_audio_start.getCPtr(req));
    return ret;
  }

  public static int vx_req_aux_capture_audio_stop_create(SWIGTYPE_p_p_vx_req_aux_capture_audio_stop req) {
    int ret = VivoxCoreInstancePINVOKE.vx_req_aux_capture_audio_stop_create(SWIGTYPE_p_p_vx_req_aux_capture_audio_stop.getCPtr(req));
    return ret;
  }

  public static int vx_req_account_get_session_fonts_create(SWIGTYPE_p_p_vx_req_account_get_session_fonts req) {
    int ret = VivoxCoreInstancePINVOKE.vx_req_account_get_session_fonts_create(SWIGTYPE_p_p_vx_req_account_get_session_fonts.getCPtr(req));
    return ret;
  }

  public static int vx_req_account_get_template_fonts_create(SWIGTYPE_p_p_vx_req_account_get_template_fonts req) {
    int ret = VivoxCoreInstancePINVOKE.vx_req_account_get_template_fonts_create(SWIGTYPE_p_p_vx_req_account_get_template_fonts.getCPtr(req));
    return ret;
  }

  public static int vx_req_aux_start_buffer_capture_create(SWIGTYPE_p_p_vx_req_aux_start_buffer_capture req) {
    int ret = VivoxCoreInstancePINVOKE.vx_req_aux_start_buffer_capture_create(SWIGTYPE_p_p_vx_req_aux_start_buffer_capture.getCPtr(req));
    return ret;
  }

  public static int vx_req_aux_play_audio_buffer_create(SWIGTYPE_p_p_vx_req_aux_play_audio_buffer req) {
    int ret = VivoxCoreInstancePINVOKE.vx_req_aux_play_audio_buffer_create(SWIGTYPE_p_p_vx_req_aux_play_audio_buffer.getCPtr(req));
    return ret;
  }

  public static int vx_req_aux_global_monitor_keyboard_mouse_create(SWIGTYPE_p_p_vx_req_aux_global_monitor_keyboard_mouse req) {
    int ret = VivoxCoreInstancePINVOKE.vx_req_aux_global_monitor_keyboard_mouse_create(SWIGTYPE_p_p_vx_req_aux_global_monitor_keyboard_mouse.getCPtr(req));
    return ret;
  }

  public static int vx_req_aux_set_idle_timeout_create(SWIGTYPE_p_p_vx_req_aux_set_idle_timeout req) {
    int ret = VivoxCoreInstancePINVOKE.vx_req_aux_set_idle_timeout_create(SWIGTYPE_p_p_vx_req_aux_set_idle_timeout.getCPtr(req));
    return ret;
  }

  public static int vx_req_aux_create_account_create(SWIGTYPE_p_p_vx_req_aux_create_account req) {
    int ret = VivoxCoreInstancePINVOKE.vx_req_aux_create_account_create(SWIGTYPE_p_p_vx_req_aux_create_account.getCPtr(req));
    return ret;
  }

  public static int vx_req_aux_reactivate_account_create(SWIGTYPE_p_p_vx_req_aux_reactivate_account req) {
    int ret = VivoxCoreInstancePINVOKE.vx_req_aux_reactivate_account_create(SWIGTYPE_p_p_vx_req_aux_reactivate_account.getCPtr(req));
    return ret;
  }

  public static int vx_req_aux_deactivate_account_create(SWIGTYPE_p_p_vx_req_aux_deactivate_account req) {
    int ret = VivoxCoreInstancePINVOKE.vx_req_aux_deactivate_account_create(SWIGTYPE_p_p_vx_req_aux_deactivate_account.getCPtr(req));
    return ret;
  }

  public static int vx_req_account_post_crash_dump_create(SWIGTYPE_p_p_vx_req_account_post_crash_dump req) {
    int ret = VivoxCoreInstancePINVOKE.vx_req_account_post_crash_dump_create(SWIGTYPE_p_p_vx_req_account_post_crash_dump.getCPtr(req));
    return ret;
  }

  public static int vx_req_aux_reset_password_create(SWIGTYPE_p_p_vx_req_aux_reset_password req) {
    int ret = VivoxCoreInstancePINVOKE.vx_req_aux_reset_password_create(SWIGTYPE_p_p_vx_req_aux_reset_password.getCPtr(req));
    return ret;
  }

  public static int vx_req_aux_diagnostic_state_dump_create(SWIGTYPE_p_p_vx_req_aux_diagnostic_state_dump req) {
    int ret = VivoxCoreInstancePINVOKE.vx_req_aux_diagnostic_state_dump_create(SWIGTYPE_p_p_vx_req_aux_diagnostic_state_dump.getCPtr(req));
    return ret;
  }

  public static int vx_req_account_web_call_create(SWIGTYPE_p_p_vx_req_account_web_call req) {
    int ret = VivoxCoreInstancePINVOKE.vx_req_account_web_call_create(SWIGTYPE_p_p_vx_req_account_web_call.getCPtr(req));
    return ret;
  }

  public static int vx_req_sessiongroup_get_stats_create(SWIGTYPE_p_p_vx_req_sessiongroup_get_stats req) {
    int ret = VivoxCoreInstancePINVOKE.vx_req_sessiongroup_get_stats_create(SWIGTYPE_p_p_vx_req_sessiongroup_get_stats.getCPtr(req));
    return ret;
  }

  public static int vx_req_account_send_message_create(SWIGTYPE_p_p_vx_req_account_send_message req) {
    int ret = VivoxCoreInstancePINVOKE.vx_req_account_send_message_create(SWIGTYPE_p_p_vx_req_account_send_message.getCPtr(req));
    return ret;
  }

  public static int vx_req_account_archive_query_create(SWIGTYPE_p_p_vx_req_account_archive_query req) {
    int ret = VivoxCoreInstancePINVOKE.vx_req_account_archive_query_create(SWIGTYPE_p_p_vx_req_account_archive_query.getCPtr(req));
    return ret;
  }

  public static int vx_req_aux_notify_application_state_change_create(SWIGTYPE_p_p_vx_req_aux_notify_application_state_change req) {
    int ret = VivoxCoreInstancePINVOKE.vx_req_aux_notify_application_state_change_create(SWIGTYPE_p_p_vx_req_aux_notify_application_state_change.getCPtr(req));
    return ret;
  }

  public static int vx_req_account_control_communications_create(SWIGTYPE_p_p_vx_req_account_control_communications req) {
    int ret = VivoxCoreInstancePINVOKE.vx_req_account_control_communications_create(SWIGTYPE_p_p_vx_req_account_control_communications.getCPtr(req));
    return ret;
  }

  public static int vx_req_session_transcription_control_create(SWIGTYPE_p_p_vx_req_session_transcription_control req) {
    int ret = VivoxCoreInstancePINVOKE.vx_req_session_transcription_control_create(SWIGTYPE_p_p_vx_req_session_transcription_control.getCPtr(req));
    return ret;
  }

  public static int destroy_req(vx_req_base_t pCmd) {
    int ret = VivoxCoreInstancePINVOKE.destroy_req(vx_req_base_t.getCPtr(pCmd));
    return ret;
  }

  public static int destroy_resp(vx_resp_base_t pCmd) {
    int ret = VivoxCoreInstancePINVOKE.destroy_resp(vx_resp_base_t.getCPtr(pCmd));
    return ret;
  }

  public static void send_log(vx_log_level level, string source, string tmsg) {
    VivoxCoreInstancePINVOKE.send_log((int)level, source, tmsg);
  }

  public static string vx_debug_generate_token(string issuer, int duration, string vxa, ulong serial, string subject, string from_uri, string to_uri, string key) {
    string ret = VivoxCoreInstancePINVOKE.vx_debug_generate_token(issuer, duration, vxa, serial, subject, from_uri, to_uri, key);
    return ret;
  }

  public static vx_message_base_t vx_get_message() {
    global::System.IntPtr cPtr = VivoxCoreInstancePINVOKE.vx_get_message__SWIG_0();
    vx_message_base_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new vx_message_base_t(cPtr, true);
    return ret;
  }

  public static int GetDefaultConfig(vx_sdk_config_t config) {
    int ret = VivoxCoreInstancePINVOKE.GetDefaultConfig(vx_sdk_config_t.getCPtr(config));
    return ret;
  }

  public static bool IsAudioEchoCancellationEnabled() {
    bool ret = VivoxCoreInstancePINVOKE.IsAudioEchoCancellationEnabled();
    return ret;
  }

  public static int IssueRequest(vx_req_base_t request) {
    int ret = VivoxCoreInstancePINVOKE.IssueRequest(vx_req_base_t.getCPtr(request));
    return ret;
  }

  public static int Initialize(vx_sdk_config_t config) {
    int ret = VivoxCoreInstancePINVOKE.Initialize(vx_sdk_config_t.getCPtr(config));
    return ret;
  }

  public static int Uninitialize() {
    int ret = VivoxCoreInstancePINVOKE.Uninitialize();
    return ret;
  }

  public static vx_device_t get_device(int idx, SWIGTYPE_p_p_vx_device devices) {
    global::System.IntPtr cPtr = VivoxCoreInstancePINVOKE.get_device(idx, SWIGTYPE_p_p_vx_device.getCPtr(devices));
    vx_device_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new vx_device_t(cPtr, false);
    return ret;
  }

  public static int vx_cookie_create(string value, SWIGTYPE_p_p_char cookie) {
    int ret = VivoxCoreInstancePINVOKE.vx_cookie_create(value, SWIGTYPE_p_p_char.getCPtr(cookie));
    return ret;
  }

  public static int vx_cookie_free(SWIGTYPE_p_p_char cookie) {
    int ret = VivoxCoreInstancePINVOKE.vx_cookie_free(SWIGTYPE_p_p_char.getCPtr(cookie));
    return ret;
  }

  public static int vx_state_buddy_contact_create(SWIGTYPE_p_p_vx_state_buddy_contact contact) {
    int ret = VivoxCoreInstancePINVOKE.vx_state_buddy_contact_create(SWIGTYPE_p_p_vx_state_buddy_contact.getCPtr(contact));
    return ret;
  }

  public static int vx_state_buddy_contact_free(vx_state_buddy_contact_t contact) {
    int ret = VivoxCoreInstancePINVOKE.vx_state_buddy_contact_free(vx_state_buddy_contact_t.getCPtr(contact));
    return ret;
  }

  public static int vx_state_buddy_contact_list_create(int size, SWIGTYPE_p_p_p_vx_state_buddy_contact list_out) {
    int ret = VivoxCoreInstancePINVOKE.vx_state_buddy_contact_list_create(size, SWIGTYPE_p_p_p_vx_state_buddy_contact.getCPtr(list_out));
    return ret;
  }

  public static int vx_state_buddy_contact_list_free(SWIGTYPE_p_p_vx_state_buddy_contact list, int size) {
    int ret = VivoxCoreInstancePINVOKE.vx_state_buddy_contact_list_free(SWIGTYPE_p_p_vx_state_buddy_contact.getCPtr(list), size);
    return ret;
  }

  public static int vx_state_buddy_create(SWIGTYPE_p_p_vx_state_buddy buddy) {
    int ret = VivoxCoreInstancePINVOKE.vx_state_buddy_create(SWIGTYPE_p_p_vx_state_buddy.getCPtr(buddy));
    return ret;
  }

  public static int vx_state_buddy_free(vx_state_buddy_t buddy) {
    int ret = VivoxCoreInstancePINVOKE.vx_state_buddy_free(vx_state_buddy_t.getCPtr(buddy));
    return ret;
  }

  public static int vx_state_buddy_list_create(int size, SWIGTYPE_p_p_p_vx_state_buddy list_out) {
    int ret = VivoxCoreInstancePINVOKE.vx_state_buddy_list_create(size, SWIGTYPE_p_p_p_vx_state_buddy.getCPtr(list_out));
    return ret;
  }

  public static int vx_state_buddy_list_free(SWIGTYPE_p_p_vx_state_buddy list, int size) {
    int ret = VivoxCoreInstancePINVOKE.vx_state_buddy_list_free(SWIGTYPE_p_p_vx_state_buddy.getCPtr(list), size);
    return ret;
  }

  public static int vx_state_buddy_group_create(SWIGTYPE_p_p_vx_state_buddy_group group) {
    int ret = VivoxCoreInstancePINVOKE.vx_state_buddy_group_create(SWIGTYPE_p_p_vx_state_buddy_group.getCPtr(group));
    return ret;
  }

  public static int vx_state_buddy_group_free(vx_state_buddy_group_t group) {
    int ret = VivoxCoreInstancePINVOKE.vx_state_buddy_group_free(vx_state_buddy_group_t.getCPtr(group));
    return ret;
  }

  public static int vx_state_buddy_group_list_create(int size, SWIGTYPE_p_p_p_vx_state_buddy_group list_out) {
    int ret = VivoxCoreInstancePINVOKE.vx_state_buddy_group_list_create(size, SWIGTYPE_p_p_p_vx_state_buddy_group.getCPtr(list_out));
    return ret;
  }

  public static int vx_state_buddy_group_list_free(SWIGTYPE_p_p_vx_state_buddy_group list, int size) {
    int ret = VivoxCoreInstancePINVOKE.vx_state_buddy_group_list_free(SWIGTYPE_p_p_vx_state_buddy_group.getCPtr(list), size);
    return ret;
  }

  public static int vx_participant_create(SWIGTYPE_p_p_vx_participant participant) {
    int ret = VivoxCoreInstancePINVOKE.vx_participant_create(SWIGTYPE_p_p_vx_participant.getCPtr(participant));
    return ret;
  }

  public static int vx_participant_free(vx_participant_t participant) {
    int ret = VivoxCoreInstancePINVOKE.vx_participant_free(vx_participant_t.getCPtr(participant));
    return ret;
  }

  public static int vx_participant_list_create(int size, SWIGTYPE_p_p_p_vx_participant list_out) {
    int ret = VivoxCoreInstancePINVOKE.vx_participant_list_create(size, SWIGTYPE_p_p_p_vx_participant.getCPtr(list_out));
    return ret;
  }

  public static int vx_participant_list_free(SWIGTYPE_p_p_vx_participant list, int size) {
    int ret = VivoxCoreInstancePINVOKE.vx_participant_list_free(SWIGTYPE_p_p_vx_participant.getCPtr(list), size);
    return ret;
  }

  public static int vx_state_participant_create(SWIGTYPE_p_p_vx_state_participant state_participant) {
    int ret = VivoxCoreInstancePINVOKE.vx_state_participant_create(SWIGTYPE_p_p_vx_state_participant.getCPtr(state_participant));
    return ret;
  }

  public static int vx_state_participant_free(vx_state_participant_t state_participant) {
    int ret = VivoxCoreInstancePINVOKE.vx_state_participant_free(vx_state_participant_t.getCPtr(state_participant));
    return ret;
  }

  public static int vx_state_participant_list_create(int size, SWIGTYPE_p_p_p_vx_state_participant list_out) {
    int ret = VivoxCoreInstancePINVOKE.vx_state_participant_list_create(size, SWIGTYPE_p_p_p_vx_state_participant.getCPtr(list_out));
    return ret;
  }

  public static int vx_state_participant_list_free(SWIGTYPE_p_p_vx_state_participant list, int size) {
    int ret = VivoxCoreInstancePINVOKE.vx_state_participant_list_free(SWIGTYPE_p_p_vx_state_participant.getCPtr(list), size);
    return ret;
  }

  public static int vx_state_session_create(SWIGTYPE_p_p_vx_state_session state_session) {
    int ret = VivoxCoreInstancePINVOKE.vx_state_session_create(SWIGTYPE_p_p_vx_state_session.getCPtr(state_session));
    return ret;
  }

  public static int vx_state_session_free(vx_state_session_t state_session) {
    int ret = VivoxCoreInstancePINVOKE.vx_state_session_free(vx_state_session_t.getCPtr(state_session));
    return ret;
  }

  public static int vx_state_session_list_create(int size, SWIGTYPE_p_p_p_vx_state_session list_out) {
    int ret = VivoxCoreInstancePINVOKE.vx_state_session_list_create(size, SWIGTYPE_p_p_p_vx_state_session.getCPtr(list_out));
    return ret;
  }

  public static int vx_state_session_list_free(SWIGTYPE_p_p_vx_state_session list, int size) {
    int ret = VivoxCoreInstancePINVOKE.vx_state_session_list_free(SWIGTYPE_p_p_vx_state_session.getCPtr(list), size);
    return ret;
  }

  public static int vx_state_sessiongroup_create(SWIGTYPE_p_p_vx_state_sessiongroup state_sessiongroup) {
    int ret = VivoxCoreInstancePINVOKE.vx_state_sessiongroup_create(SWIGTYPE_p_p_vx_state_sessiongroup.getCPtr(state_sessiongroup));
    return ret;
  }

  public static int vx_state_sessiongroup_free(vx_state_sessiongroup_t state_sessiongroup) {
    int ret = VivoxCoreInstancePINVOKE.vx_state_sessiongroup_free(vx_state_sessiongroup_t.getCPtr(state_sessiongroup));
    return ret;
  }

  public static int vx_state_sessiongroup_list_create(int size, SWIGTYPE_p_p_p_vx_state_sessiongroup list_out) {
    int ret = VivoxCoreInstancePINVOKE.vx_state_sessiongroup_list_create(size, SWIGTYPE_p_p_p_vx_state_sessiongroup.getCPtr(list_out));
    return ret;
  }

  public static int vx_state_sessiongroup_list_free(SWIGTYPE_p_p_vx_state_sessiongroup list, int size) {
    int ret = VivoxCoreInstancePINVOKE.vx_state_sessiongroup_list_free(SWIGTYPE_p_p_vx_state_sessiongroup.getCPtr(list), size);
    return ret;
  }

  public static int vx_state_account_create(SWIGTYPE_p_p_vx_state_account state_account) {
    int ret = VivoxCoreInstancePINVOKE.vx_state_account_create(SWIGTYPE_p_p_vx_state_account.getCPtr(state_account));
    return ret;
  }

  public static int vx_state_account_free(vx_state_account_t state_account) {
    int ret = VivoxCoreInstancePINVOKE.vx_state_account_free(vx_state_account_t.getCPtr(state_account));
    return ret;
  }

  public static int vx_state_account_list_create(int size, SWIGTYPE_p_p_p_vx_state_account list_out) {
    int ret = VivoxCoreInstancePINVOKE.vx_state_account_list_create(size, SWIGTYPE_p_p_p_vx_state_account.getCPtr(list_out));
    return ret;
  }

  public static int vx_state_account_list_free(SWIGTYPE_p_p_vx_state_account list, int size) {
    int ret = VivoxCoreInstancePINVOKE.vx_state_account_list_free(SWIGTYPE_p_p_vx_state_account.getCPtr(list), size);
    return ret;
  }

  public static int vx_state_connector_create(SWIGTYPE_p_p_vx_state_connector state_connector) {
    int ret = VivoxCoreInstancePINVOKE.vx_state_connector_create(SWIGTYPE_p_p_vx_state_connector.getCPtr(state_connector));
    return ret;
  }

  public static int vx_state_connector_free(vx_state_connector_t state_connector) {
    int ret = VivoxCoreInstancePINVOKE.vx_state_connector_free(vx_state_connector_t.getCPtr(state_connector));
    return ret;
  }

  public static int vx_state_connector_list_create(int size, SWIGTYPE_p_p_p_vx_state_connector list_out) {
    int ret = VivoxCoreInstancePINVOKE.vx_state_connector_list_create(size, SWIGTYPE_p_p_p_vx_state_connector.getCPtr(list_out));
    return ret;
  }

  public static int vx_state_connector_list_free(SWIGTYPE_p_p_vx_state_connector list, int size) {
    int ret = VivoxCoreInstancePINVOKE.vx_state_connector_list_free(SWIGTYPE_p_p_vx_state_connector.getCPtr(list), size);
    return ret;
  }

  public static int vx_channel_create(SWIGTYPE_p_p_vx_channel channel) {
    int ret = VivoxCoreInstancePINVOKE.vx_channel_create(SWIGTYPE_p_p_vx_channel.getCPtr(channel));
    return ret;
  }

  public static int vx_channel_free(vx_channel_t channel) {
    int ret = VivoxCoreInstancePINVOKE.vx_channel_free(vx_channel_t.getCPtr(channel));
    return ret;
  }

  public static int vx_channel_list_create(int size, SWIGTYPE_p_p_p_vx_channel list_out) {
    int ret = VivoxCoreInstancePINVOKE.vx_channel_list_create(size, SWIGTYPE_p_p_p_vx_channel.getCPtr(list_out));
    return ret;
  }

  public static int vx_channel_list_free(SWIGTYPE_p_p_vx_channel list, int size) {
    int ret = VivoxCoreInstancePINVOKE.vx_channel_list_free(SWIGTYPE_p_p_vx_channel.getCPtr(list), size);
    return ret;
  }

  public static int vx_channel_favorite_create(SWIGTYPE_p_p_vx_channel_favorite channel) {
    int ret = VivoxCoreInstancePINVOKE.vx_channel_favorite_create(SWIGTYPE_p_p_vx_channel_favorite.getCPtr(channel));
    return ret;
  }

  public static int vx_channel_favorite_free(vx_channel_favorite_t channel) {
    int ret = VivoxCoreInstancePINVOKE.vx_channel_favorite_free(vx_channel_favorite_t.getCPtr(channel));
    return ret;
  }

  public static int vx_channel_favorite_list_create(int size, SWIGTYPE_p_p_p_vx_channel_favorite list_out) {
    int ret = VivoxCoreInstancePINVOKE.vx_channel_favorite_list_create(size, SWIGTYPE_p_p_p_vx_channel_favorite.getCPtr(list_out));
    return ret;
  }

  public static int vx_channel_favorite_list_free(SWIGTYPE_p_p_vx_channel_favorite list, int size) {
    int ret = VivoxCoreInstancePINVOKE.vx_channel_favorite_list_free(SWIGTYPE_p_p_vx_channel_favorite.getCPtr(list), size);
    return ret;
  }

  public static int vx_channel_favorite_group_create(SWIGTYPE_p_p_vx_channel_favorite_group channel) {
    int ret = VivoxCoreInstancePINVOKE.vx_channel_favorite_group_create(SWIGTYPE_p_p_vx_channel_favorite_group.getCPtr(channel));
    return ret;
  }

  public static int vx_channel_favorite_group_free(vx_channel_favorite_group_t channel) {
    int ret = VivoxCoreInstancePINVOKE.vx_channel_favorite_group_free(vx_channel_favorite_group_t.getCPtr(channel));
    return ret;
  }

  public static int vx_channel_favorite_group_list_create(int size, SWIGTYPE_p_p_p_vx_channel_favorite_group list_out) {
    int ret = VivoxCoreInstancePINVOKE.vx_channel_favorite_group_list_create(size, SWIGTYPE_p_p_p_vx_channel_favorite_group.getCPtr(list_out));
    return ret;
  }

  public static int vx_channel_favorite_group_list_free(SWIGTYPE_p_p_vx_channel_favorite_group list, int size) {
    int ret = VivoxCoreInstancePINVOKE.vx_channel_favorite_group_list_free(SWIGTYPE_p_p_vx_channel_favorite_group.getCPtr(list), size);
    return ret;
  }

  public static int vx_voice_font_create(SWIGTYPE_p_p_vx_voice_font channel) {
    int ret = VivoxCoreInstancePINVOKE.vx_voice_font_create(SWIGTYPE_p_p_vx_voice_font.getCPtr(channel));
    return ret;
  }

  public static int vx_voice_font_free(vx_voice_font_t channel) {
    int ret = VivoxCoreInstancePINVOKE.vx_voice_font_free(vx_voice_font_t.getCPtr(channel));
    return ret;
  }

  public static int vx_voice_font_list_create(int size, SWIGTYPE_p_p_p_vx_voice_font list_out) {
    int ret = VivoxCoreInstancePINVOKE.vx_voice_font_list_create(size, SWIGTYPE_p_p_p_vx_voice_font.getCPtr(list_out));
    return ret;
  }

  public static int vx_voice_font_list_free(SWIGTYPE_p_p_vx_voice_font list, int size) {
    int ret = VivoxCoreInstancePINVOKE.vx_voice_font_list_free(SWIGTYPE_p_p_vx_voice_font.getCPtr(list), size);
    return ret;
  }

  public static int vx_string_list_create(int size, SWIGTYPE_p_p_p_char list_out) {
    int ret = VivoxCoreInstancePINVOKE.vx_string_list_create(size, SWIGTYPE_p_p_p_char.getCPtr(list_out));
    return ret;
  }

  public static int vx_string_list_free(SWIGTYPE_p_p_char list) {
    int ret = VivoxCoreInstancePINVOKE.vx_string_list_free(SWIGTYPE_p_p_char.getCPtr(list));
    return ret;
  }

  public static int vx_block_rule_create(SWIGTYPE_p_p_vx_block_rule block_rule) {
    int ret = VivoxCoreInstancePINVOKE.vx_block_rule_create(SWIGTYPE_p_p_vx_block_rule.getCPtr(block_rule));
    return ret;
  }

  public static int vx_block_rule_free(vx_block_rule_t block_rule) {
    int ret = VivoxCoreInstancePINVOKE.vx_block_rule_free(vx_block_rule_t.getCPtr(block_rule));
    return ret;
  }

  public static int vx_block_rules_create(int size, SWIGTYPE_p_p_p_vx_block_rule list_out) {
    int ret = VivoxCoreInstancePINVOKE.vx_block_rules_create(size, SWIGTYPE_p_p_p_vx_block_rule.getCPtr(list_out));
    return ret;
  }

  public static int vx_block_rules_free(SWIGTYPE_p_p_vx_block_rule list, int size) {
    int ret = VivoxCoreInstancePINVOKE.vx_block_rules_free(SWIGTYPE_p_p_vx_block_rule.getCPtr(list), size);
    return ret;
  }

  public static int vx_auto_accept_rule_create(SWIGTYPE_p_p_vx_auto_accept_rule auto_accept_rule) {
    int ret = VivoxCoreInstancePINVOKE.vx_auto_accept_rule_create(SWIGTYPE_p_p_vx_auto_accept_rule.getCPtr(auto_accept_rule));
    return ret;
  }

  public static int vx_auto_accept_rule_free(vx_auto_accept_rule_t auto_accept_rule) {
    int ret = VivoxCoreInstancePINVOKE.vx_auto_accept_rule_free(vx_auto_accept_rule_t.getCPtr(auto_accept_rule));
    return ret;
  }

  public static int vx_auto_accept_rules_create(int size, SWIGTYPE_p_p_p_vx_auto_accept_rule list_out) {
    int ret = VivoxCoreInstancePINVOKE.vx_auto_accept_rules_create(size, SWIGTYPE_p_p_p_vx_auto_accept_rule.getCPtr(list_out));
    return ret;
  }

  public static int vx_auto_accept_rules_free(SWIGTYPE_p_p_vx_auto_accept_rule list, int size) {
    int ret = VivoxCoreInstancePINVOKE.vx_auto_accept_rules_free(SWIGTYPE_p_p_vx_auto_accept_rule.getCPtr(list), size);
    return ret;
  }

  public static int vx_user_channel_create(SWIGTYPE_p_p_vx_user_channel user_channel) {
    int ret = VivoxCoreInstancePINVOKE.vx_user_channel_create(SWIGTYPE_p_p_vx_user_channel.getCPtr(user_channel));
    return ret;
  }

  public static int vx_user_channel_free(vx_user_channel_t user_channel) {
    int ret = VivoxCoreInstancePINVOKE.vx_user_channel_free(vx_user_channel_t.getCPtr(user_channel));
    return ret;
  }

  public static int vx_user_channels_create(int size, SWIGTYPE_p_p_p_vx_user_channel list_out) {
    int ret = VivoxCoreInstancePINVOKE.vx_user_channels_create(size, SWIGTYPE_p_p_p_vx_user_channel.getCPtr(list_out));
    return ret;
  }

  public static int vx_user_channels_free(SWIGTYPE_p_p_vx_user_channel list, int size) {
    int ret = VivoxCoreInstancePINVOKE.vx_user_channels_free(SWIGTYPE_p_p_vx_user_channel.getCPtr(list), size);
    return ret;
  }

  public static int vx_connectivity_test_result_create(SWIGTYPE_p_p_vx_connectivity_test_result connectivity_test_result, ND_TEST_TYPE tt) {
    int ret = VivoxCoreInstancePINVOKE.vx_connectivity_test_result_create(SWIGTYPE_p_p_vx_connectivity_test_result.getCPtr(connectivity_test_result), (int)tt);
    return ret;
  }

  public static int vx_connectivity_test_result_free(vx_connectivity_test_result_t connectivity_test_result) {
    int ret = VivoxCoreInstancePINVOKE.vx_connectivity_test_result_free(vx_connectivity_test_result_t.getCPtr(connectivity_test_result));
    return ret;
  }

  public static int vx_connectivity_test_results_create(int size, SWIGTYPE_p_p_p_vx_connectivity_test_result list_out) {
    int ret = VivoxCoreInstancePINVOKE.vx_connectivity_test_results_create(size, SWIGTYPE_p_p_p_vx_connectivity_test_result.getCPtr(list_out));
    return ret;
  }

  public static int vx_connectivity_test_results_free(SWIGTYPE_p_p_vx_connectivity_test_result list, int size) {
    int ret = VivoxCoreInstancePINVOKE.vx_connectivity_test_results_free(SWIGTYPE_p_p_vx_connectivity_test_result.getCPtr(list), size);
    return ret;
  }

  public static int vx_account_create(SWIGTYPE_p_p_vx_account account) {
    int ret = VivoxCoreInstancePINVOKE.vx_account_create(SWIGTYPE_p_p_vx_account.getCPtr(account));
    return ret;
  }

  public static int vx_account_free(vx_account_t account) {
    int ret = VivoxCoreInstancePINVOKE.vx_account_free(vx_account_t.getCPtr(account));
    return ret;
  }

  public static int vx_device_create(SWIGTYPE_p_p_vx_device device) {
    int ret = VivoxCoreInstancePINVOKE.vx_device_create(SWIGTYPE_p_p_vx_device.getCPtr(device));
    return ret;
  }

  public static int vx_device_free(vx_device_t device) {
    int ret = VivoxCoreInstancePINVOKE.vx_device_free(vx_device_t.getCPtr(device));
    return ret;
  }

  public static int vx_devices_create(int size, SWIGTYPE_p_p_p_vx_device list_out) {
    int ret = VivoxCoreInstancePINVOKE.vx_devices_create(size, SWIGTYPE_p_p_p_vx_device.getCPtr(list_out));
    return ret;
  }

  public static int vx_devices_free(SWIGTYPE_p_p_vx_device list, int size) {
    int ret = VivoxCoreInstancePINVOKE.vx_devices_free(SWIGTYPE_p_p_vx_device.getCPtr(list), size);
    return ret;
  }

  public static int vx_buddy_create(SWIGTYPE_p_p_vx_buddy buddy) {
    int ret = VivoxCoreInstancePINVOKE.vx_buddy_create(SWIGTYPE_p_p_vx_buddy.getCPtr(buddy));
    return ret;
  }

  public static int vx_buddy_free(vx_buddy_t buddy) {
    int ret = VivoxCoreInstancePINVOKE.vx_buddy_free(vx_buddy_t.getCPtr(buddy));
    return ret;
  }

  public static int vx_buddy_list_create(int size, SWIGTYPE_p_p_p_vx_buddy list_out) {
    int ret = VivoxCoreInstancePINVOKE.vx_buddy_list_create(size, SWIGTYPE_p_p_p_vx_buddy.getCPtr(list_out));
    return ret;
  }

  public static int vx_buddy_list_free(SWIGTYPE_p_p_vx_buddy list, int size) {
    int ret = VivoxCoreInstancePINVOKE.vx_buddy_list_free(SWIGTYPE_p_p_vx_buddy.getCPtr(list), size);
    return ret;
  }

  public static int vx_group_create(SWIGTYPE_p_p_vx_group group) {
    int ret = VivoxCoreInstancePINVOKE.vx_group_create(SWIGTYPE_p_p_vx_group.getCPtr(group));
    return ret;
  }

  public static int vx_group_free(vx_group_t group) {
    int ret = VivoxCoreInstancePINVOKE.vx_group_free(vx_group_t.getCPtr(group));
    return ret;
  }

  public static int vx_group_list_create(int size, SWIGTYPE_p_p_p_vx_group list_out) {
    int ret = VivoxCoreInstancePINVOKE.vx_group_list_create(size, SWIGTYPE_p_p_p_vx_group.getCPtr(list_out));
    return ret;
  }

  public static int vx_group_list_free(SWIGTYPE_p_p_vx_group list, int size) {
    int ret = VivoxCoreInstancePINVOKE.vx_group_list_free(SWIGTYPE_p_p_vx_group.getCPtr(list), size);
    return ret;
  }

  public static int vx_name_value_pair_create(SWIGTYPE_p_p_vx_name_value_pair nvpair) {
    int ret = VivoxCoreInstancePINVOKE.vx_name_value_pair_create(SWIGTYPE_p_p_vx_name_value_pair.getCPtr(nvpair));
    return ret;
  }

  public static int vx_name_value_pair_free(vx_name_value_pair_t nvpair) {
    int ret = VivoxCoreInstancePINVOKE.vx_name_value_pair_free(vx_name_value_pair_t.getCPtr(nvpair));
    return ret;
  }

  public static int vx_name_value_pairs_create(int size, SWIGTYPE_p_p_p_vx_name_value_pair list_out) {
    int ret = VivoxCoreInstancePINVOKE.vx_name_value_pairs_create(size, SWIGTYPE_p_p_p_vx_name_value_pair.getCPtr(list_out));
    return ret;
  }

  public static int vx_name_value_pairs_free(SWIGTYPE_p_p_vx_name_value_pair list, int size) {
    int ret = VivoxCoreInstancePINVOKE.vx_name_value_pairs_free(SWIGTYPE_p_p_vx_name_value_pair.getCPtr(list), size);
    return ret;
  }

  public static string vx_strdup(string arg0) {
    string ret = VivoxCoreInstancePINVOKE.vx_strdup(arg0);
    return ret;
  }

  public static int vx_free(string arg0) {
    int ret = VivoxCoreInstancePINVOKE.vx_free(arg0);
    return ret;
  }

  public static int vx_unallocate(SWIGTYPE_p_void p) {
    int ret = VivoxCoreInstancePINVOKE.vx_unallocate(SWIGTYPE_p_void.getCPtr(p));
    return ret;
  }

  public static SWIGTYPE_p_void vx_allocate(uint nBytes) {
    global::System.IntPtr cPtr = VivoxCoreInstancePINVOKE.vx_allocate(nBytes);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_void vx_reallocate(SWIGTYPE_p_void p, uint nBytes) {
    global::System.IntPtr cPtr = VivoxCoreInstancePINVOKE.vx_reallocate(SWIGTYPE_p_void.getCPtr(p), nBytes);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_void vx_calloc(uint num, uint bytesPerElement) {
    global::System.IntPtr cPtr = VivoxCoreInstancePINVOKE.vx_calloc(num, bytesPerElement);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_void vx_allocate_aligned(uint alignment, uint size) {
    global::System.IntPtr cPtr = VivoxCoreInstancePINVOKE.vx_allocate_aligned(alignment, size);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    return ret;
  }

  public static int vx_unallocate_aligned(SWIGTYPE_p_void p) {
    int ret = VivoxCoreInstancePINVOKE.vx_unallocate_aligned(SWIGTYPE_p_void.getCPtr(p));
    return ret;
  }

  public static int vx_get_message(SWIGTYPE_p_p_vx_message_base message) {
    int ret = VivoxCoreInstancePINVOKE.vx_get_message__SWIG_1(SWIGTYPE_p_p_vx_message_base.getCPtr(message));
    return ret;
  }

  public static int vx_issue_request2(vx_req_base_t request) {
    int ret = VivoxCoreInstancePINVOKE.vx_issue_request2(vx_req_base_t.getCPtr(request));
    return ret;
  }

  public static int vx_issue_request3(vx_req_base_t request, SWIGTYPE_p_int request_count) {
    int ret = VivoxCoreInstancePINVOKE.vx_issue_request3(vx_req_base_t.getCPtr(request), SWIGTYPE_p_int.getCPtr(request_count));
    return ret;
  }

  public static int vx_request_to_xml(SWIGTYPE_p_void request, SWIGTYPE_p_p_char xml) {
    int ret = VivoxCoreInstancePINVOKE.vx_request_to_xml(SWIGTYPE_p_void.getCPtr(request), SWIGTYPE_p_p_char.getCPtr(xml));
    return ret;
  }

  public static vx_request_type vx_xml_to_request(string xml, SWIGTYPE_p_p_void request, SWIGTYPE_p_p_char error) {
    vx_request_type ret = (vx_request_type)VivoxCoreInstancePINVOKE.vx_xml_to_request(xml, SWIGTYPE_p_p_void.getCPtr(request), SWIGTYPE_p_p_char.getCPtr(error));
    return ret;
  }

  public static int vx_response_to_xml(SWIGTYPE_p_void response, SWIGTYPE_p_p_char xml) {
    int ret = VivoxCoreInstancePINVOKE.vx_response_to_xml(SWIGTYPE_p_void.getCPtr(response), SWIGTYPE_p_p_char.getCPtr(xml));
    return ret;
  }

  public static vx_response_type vx_xml_to_response(string xml, SWIGTYPE_p_p_void response, SWIGTYPE_p_p_char error) {
    vx_response_type ret = (vx_response_type)VivoxCoreInstancePINVOKE.vx_xml_to_response(xml, SWIGTYPE_p_p_void.getCPtr(response), SWIGTYPE_p_p_char.getCPtr(error));
    return ret;
  }

  public static int vx_event_to_xml(SWIGTYPE_p_void arg0, SWIGTYPE_p_p_char xml) {
    int ret = VivoxCoreInstancePINVOKE.vx_event_to_xml(SWIGTYPE_p_void.getCPtr(arg0), SWIGTYPE_p_p_char.getCPtr(xml));
    return ret;
  }

  public static vx_event_type vx_xml_to_event(string xml, SWIGTYPE_p_p_void arg1, SWIGTYPE_p_p_char error) {
    vx_event_type ret = (vx_event_type)VivoxCoreInstancePINVOKE.vx_xml_to_event(xml, SWIGTYPE_p_p_void.getCPtr(arg1), SWIGTYPE_p_p_char.getCPtr(error));
    return ret;
  }

  public static vx_message_type vx_get_message_type(string xml) {
    vx_message_type ret = (vx_message_type)VivoxCoreInstancePINVOKE.vx_get_message_type(xml);
    return ret;
  }

  public static ulong vx_get_time_ms() {
    ulong ret = VivoxCoreInstancePINVOKE.vx_get_time_ms();
    return ret;
  }

  public static ulong vx_get_time_milli_seconds() {
    ulong ret = VivoxCoreInstancePINVOKE.vx_get_time_milli_seconds();
    return ret;
  }

  public static ulong vx_get_time_micro_seconds() {
    ulong ret = VivoxCoreInstancePINVOKE.vx_get_time_micro_seconds();
    return ret;
  }

  public static long vx_sleep_milli_seconds(ulong milli_seconds) {
    long ret = VivoxCoreInstancePINVOKE.vx_sleep_milli_seconds(milli_seconds);
    return ret;
  }

  public static int vx_register_message_notification_handler(SWIGTYPE_p_f_p_void__void pf_handler, SWIGTYPE_p_void cookie) {
    int ret = VivoxCoreInstancePINVOKE.vx_register_message_notification_handler(SWIGTYPE_p_f_p_void__void.getCPtr(pf_handler), SWIGTYPE_p_void.getCPtr(cookie));
    return ret;
  }

  public static int vx_unregister_message_notification_handler(SWIGTYPE_p_f_p_void__void pf_handler, SWIGTYPE_p_void cookie) {
    int ret = VivoxCoreInstancePINVOKE.vx_unregister_message_notification_handler(SWIGTYPE_p_f_p_void__void.getCPtr(pf_handler), SWIGTYPE_p_void.getCPtr(cookie));
    return ret;
  }

  public static vx_message_base_t vx_wait_for_message(int msTimeout) {
    global::System.IntPtr cPtr = VivoxCoreInstancePINVOKE.vx_wait_for_message(msTimeout);
    vx_message_base_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new vx_message_base_t(cPtr, false);
    return ret;
  }

  public static int vx_register_logging_initialization(vx_log_type log_type, string log_folder, string log_filename_prefix, string log_filename_suffix, int log_level, SWIGTYPE_p_f_p_q_const__char_p_q_const__char_p_q_const__char__void pf_handler) {
    int ret = VivoxCoreInstancePINVOKE.vx_register_logging_initialization((int)log_type, log_folder, log_filename_prefix, log_filename_suffix, log_level, SWIGTYPE_p_f_p_q_const__char_p_q_const__char_p_q_const__char__void.getCPtr(pf_handler));
    return ret;
  }

  public static string vx_get_log_file_path() {
    string ret = VivoxCoreInstancePINVOKE.vx_get_log_file_path();
    return ret;
  }

  public static int vx_unregister_logging_handler(SWIGTYPE_p_f_p_void__void pf_handler, SWIGTYPE_p_void cookie) {
    int ret = VivoxCoreInstancePINVOKE.vx_unregister_logging_handler(SWIGTYPE_p_f_p_void__void.getCPtr(pf_handler), SWIGTYPE_p_void.getCPtr(cookie));
    return ret;
  }

  public static int vx_create_account(string acct_mgmt_server, string admin_name, string admin_pw, string uname, string pw) {
    int ret = VivoxCoreInstancePINVOKE.vx_create_account(acct_mgmt_server, admin_name, admin_pw, uname, pw);
    return ret;
  }

  public static int vx_get_crash_dump_count() {
    int ret = VivoxCoreInstancePINVOKE.vx_get_crash_dump_count();
    return ret;
  }

  public static int vx_set_crash_dump_generation_enabled(int value) {
    int ret = VivoxCoreInstancePINVOKE.vx_set_crash_dump_generation_enabled(value);
    return ret;
  }

  public static int vx_get_crash_dump_generation() {
    int ret = VivoxCoreInstancePINVOKE.vx_get_crash_dump_generation();
    return ret;
  }

  public static string vx_read_crash_dump(int index) {
    string ret = VivoxCoreInstancePINVOKE.vx_read_crash_dump(index);
    return ret;
  }

  public static SWIGTYPE_p_time_t vx_get_crash_dump_timestamp(int index) {
    SWIGTYPE_p_time_t ret = new SWIGTYPE_p_time_t(VivoxCoreInstancePINVOKE.vx_get_crash_dump_timestamp(index), true);
    return ret;
  }

  public static int vx_delete_crash_dump(int index) {
    int ret = VivoxCoreInstancePINVOKE.vx_delete_crash_dump(index);
    return ret;
  }

  public static int vx_on_application_exit() {
    int ret = VivoxCoreInstancePINVOKE.vx_on_application_exit();
    return ret;
  }

  public static string vx_get_sdk_version_info() {
    string ret = VivoxCoreInstancePINVOKE.vx_get_sdk_version_info();
    return ret;
  }

  public static string vx_get_sdk_version_info_ex() {
    string ret = VivoxCoreInstancePINVOKE.vx_get_sdk_version_info_ex();
    return ret;
  }

  public static int vx_apply_font_to_file(string fontDefinition, string inputFile, string outputFile) {
    int ret = VivoxCoreInstancePINVOKE.vx_apply_font_to_file(fontDefinition, inputFile, outputFile);
    return ret;
  }

  public static int vx_apply_font_to_file_return_energy_ratio(string fontDefinition, string inputFile, string outputFile, SWIGTYPE_p_double energyRatio) {
    int ret = VivoxCoreInstancePINVOKE.vx_apply_font_to_file_return_energy_ratio(fontDefinition, inputFile, outputFile, SWIGTYPE_p_double.getCPtr(energyRatio));
    return ret;
  }

  public static int vx_apply_font_to_vxz_file_return_energy_ratio(string fontDefinition, string inputFile, string outputFile, SWIGTYPE_p_double energyRatio) {
    int ret = VivoxCoreInstancePINVOKE.vx_apply_font_to_vxz_file_return_energy_ratio(fontDefinition, inputFile, outputFile, SWIGTYPE_p_double.getCPtr(energyRatio));
    return ret;
  }

  public static SWIGTYPE_p_void vx_copy_audioBuffer(SWIGTYPE_p_void audioBufferPtr) {
    global::System.IntPtr cPtr = VivoxCoreInstancePINVOKE.vx_copy_audioBuffer(SWIGTYPE_p_void.getCPtr(audioBufferPtr));
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    return ret;
  }

  public static double vx_get_audioBuffer_duration(SWIGTYPE_p_void audioBufferPtr) {
    double ret = VivoxCoreInstancePINVOKE.vx_get_audioBuffer_duration(SWIGTYPE_p_void.getCPtr(audioBufferPtr));
    return ret;
  }

  public static int vx_get_audioBuffer_sample_rate(SWIGTYPE_p_void audioBufferPtr) {
    int ret = VivoxCoreInstancePINVOKE.vx_get_audioBuffer_sample_rate(SWIGTYPE_p_void.getCPtr(audioBufferPtr));
    return ret;
  }

  public static int vx_free_audioBuffer(SWIGTYPE_p_p_void audioBufferPtr) {
    int ret = VivoxCoreInstancePINVOKE.vx_free_audioBuffer(SWIGTYPE_p_p_void.getCPtr(audioBufferPtr));
    return ret;
  }

  public static int vx_export_audioBuffer_to_pcm(SWIGTYPE_p_void audioBufferPtr, SWIGTYPE_p_short pcmBuffer, int maxSamples) {
    int ret = VivoxCoreInstancePINVOKE.vx_export_audioBuffer_to_pcm(SWIGTYPE_p_void.getCPtr(audioBufferPtr), SWIGTYPE_p_short.getCPtr(pcmBuffer), maxSamples);
    return ret;
  }

  public static int vx_export_audioBuffer_to_wav_file(SWIGTYPE_p_void audioBufferPtr, string outputFile) {
    int ret = VivoxCoreInstancePINVOKE.vx_export_audioBuffer_to_wav_file(SWIGTYPE_p_void.getCPtr(audioBufferPtr), outputFile);
    return ret;
  }

  public static int vx_export_audioBuffer_to_memory(SWIGTYPE_p_void audioBufferPtr, SWIGTYPE_p_p_short audioBufferOut, SWIGTYPE_p_int nSamplesOut, SWIGTYPE_p_int sampleRateOut, SWIGTYPE_p_int nChannelsOut) {
    int ret = VivoxCoreInstancePINVOKE.vx_export_audioBuffer_to_memory(SWIGTYPE_p_void.getCPtr(audioBufferPtr), SWIGTYPE_p_p_short.getCPtr(audioBufferOut), SWIGTYPE_p_int.getCPtr(nSamplesOut), SWIGTYPE_p_int.getCPtr(sampleRateOut), SWIGTYPE_p_int.getCPtr(nChannelsOut));
    return ret;
  }

  public static int vx_set_out_of_process_server_address(string address, ushort port) {
    int ret = VivoxCoreInstancePINVOKE.vx_set_out_of_process_server_address(address, port);
    return ret;
  }

  public static int vx_alloc_sdk_handle(string address, ushort port, SWIGTYPE_p_unsigned_int handle) {
    int ret = VivoxCoreInstancePINVOKE.vx_alloc_sdk_handle(address, port, SWIGTYPE_p_unsigned_int.getCPtr(handle));
    return ret;
  }

  public static int vx_free_sdk_handle(uint sdkHandle) {
    int ret = VivoxCoreInstancePINVOKE.vx_free_sdk_handle(sdkHandle);
    return ret;
  }

  public static int vx_initialize2(vx_sdk_config_t config) {
    int ret = VivoxCoreInstancePINVOKE.vx_initialize2(vx_sdk_config_t.getCPtr(config));
    return ret;
  }

  public static int vx_initialize3(vx_sdk_config_t config, uint config_size) {
    int ret = VivoxCoreInstancePINVOKE.vx_initialize3(vx_sdk_config_t.getCPtr(config), config_size);
    return ret;
  }

  public static int vx_is_initialized() {
    int ret = VivoxCoreInstancePINVOKE.vx_is_initialized();
    return ret;
  }

  public static int vx_get_default_config3(vx_sdk_config_t config, uint config_size) {
    int ret = VivoxCoreInstancePINVOKE.vx_get_default_config3(vx_sdk_config_t.getCPtr(config), config_size);
    return ret;
  }

  public static int vx_debug_call(SWIGTYPE_p_void arg0) {
    int ret = VivoxCoreInstancePINVOKE.vx_debug_call(SWIGTYPE_p_void.getCPtr(arg0));
    return ret;
  }

  public static int vx_get_system_stats(vx_system_stats_t system_stats) {
    int ret = VivoxCoreInstancePINVOKE.vx_get_system_stats(vx_system_stats_t.getCPtr(system_stats));
    return ret;
  }

  public static int vx_get_int_var(string var_name, SWIGTYPE_p_int p_value) {
    int ret = VivoxCoreInstancePINVOKE.vx_get_int_var(var_name, SWIGTYPE_p_int.getCPtr(p_value));
    return ret;
  }

  public static int vx_set_int_var(string var_name, int value) {
    int ret = VivoxCoreInstancePINVOKE.vx_set_int_var(var_name, value);
    return ret;
  }

  public static int vx_destroy_message(vx_message_base_t message) {
    int ret = VivoxCoreInstancePINVOKE.vx_destroy_message(vx_message_base_t.getCPtr(message));
    return ret;
  }

  public static int vxa_apcd_create(vxa_apcd_t capture_device, SWIGTYPE_p_int apcd_id) {
    int ret = VivoxCoreInstancePINVOKE.vxa_apcd_create(vxa_apcd_t.getCPtr(capture_device), SWIGTYPE_p_int.getCPtr(apcd_id));
    return ret;
  }

  public static int vxa_apcd_destroy(int apcd_id) {
    int ret = VivoxCoreInstancePINVOKE.vxa_apcd_destroy(apcd_id);
    return ret;
  }

  public static int vxa_aprd_create(vxa_aprd_t render_device, SWIGTYPE_p_int aprd_id) {
    int ret = VivoxCoreInstancePINVOKE.vxa_aprd_create(vxa_aprd_t.getCPtr(render_device), SWIGTYPE_p_int.getCPtr(aprd_id));
    return ret;
  }

  public static int vxa_aprd_destroy(int aprd_id) {
    int ret = VivoxCoreInstancePINVOKE.vxa_aprd_destroy(aprd_id);
    return ret;
  }

  public static uint vx_get_http(string url, SWIGTYPE_p_unsigned_int response_code, SWIGTYPE_p_p_char content, SWIGTYPE_p_size_t content_len, SWIGTYPE_p_p_char content_type, SWIGTYPE_p_size_t content_type_len) {
    uint ret = VivoxCoreInstancePINVOKE.vx_get_http(url, SWIGTYPE_p_unsigned_int.getCPtr(response_code), SWIGTYPE_p_p_char.getCPtr(content), SWIGTYPE_p_size_t.getCPtr(content_len), SWIGTYPE_p_p_char.getCPtr(content_type), SWIGTYPE_p_size_t.getCPtr(content_type_len));
    return ret;
  }

  public static int vx_free_http(SWIGTYPE_p_p_char content, SWIGTYPE_p_p_char content_type) {
    int ret = VivoxCoreInstancePINVOKE.vx_free_http(SWIGTYPE_p_p_char.getCPtr(content), SWIGTYPE_p_p_char.getCPtr(content_type));
    return ret;
  }

  public static string vx_get_random_user_id(string prefix) {
    string ret = VivoxCoreInstancePINVOKE.vx_get_random_user_id(prefix);
    return ret;
  }

  public static string vx_get_random_user_id_ex(string prefix, string issuer) {
    string ret = VivoxCoreInstancePINVOKE.vx_get_random_user_id_ex(prefix, issuer);
    return ret;
  }

  public static string vx_get_random_channel_uri(string prefix, string realm) {
    string ret = VivoxCoreInstancePINVOKE.vx_get_random_channel_uri(prefix, realm);
    return ret;
  }

  public static string vx_get_random_channel_uri_ex(string prefix, string realm, string issuer) {
    string ret = VivoxCoreInstancePINVOKE.vx_get_random_channel_uri_ex(prefix, realm, issuer);
    return ret;
  }

  public static int vx_opus_set_bit_rate(int bits_per_second) {
    int ret = VivoxCoreInstancePINVOKE.vx_opus_set_bit_rate(bits_per_second);
    return ret;
  }

  public static int vx_opus_get_bit_rate(SWIGTYPE_p_int p_bits_per_second) {
    int ret = VivoxCoreInstancePINVOKE.vx_opus_get_bit_rate(SWIGTYPE_p_int.getCPtr(p_bits_per_second));
    return ret;
  }

  public static int vx_opus_set_complexity(int complexity) {
    int ret = VivoxCoreInstancePINVOKE.vx_opus_set_complexity(complexity);
    return ret;
  }

  public static int vx_opus_get_complexity(SWIGTYPE_p_int p_complexity) {
    int ret = VivoxCoreInstancePINVOKE.vx_opus_get_complexity(SWIGTYPE_p_int.getCPtr(p_complexity));
    return ret;
  }

  public static int vx_opus_set_vbr_mode(int vbr_mode) {
    int ret = VivoxCoreInstancePINVOKE.vx_opus_set_vbr_mode(vbr_mode);
    return ret;
  }

  public static int vx_opus_get_vbr_mode(SWIGTYPE_p_int p_vbr_mode) {
    int ret = VivoxCoreInstancePINVOKE.vx_opus_get_vbr_mode(SWIGTYPE_p_int.getCPtr(p_vbr_mode));
    return ret;
  }

  public static int vx_opus_set_bandwidth(int bandwidth) {
    int ret = VivoxCoreInstancePINVOKE.vx_opus_set_bandwidth(bandwidth);
    return ret;
  }

  public static int vx_opus_get_bandwidth(SWIGTYPE_p_int p_bandwidth) {
    int ret = VivoxCoreInstancePINVOKE.vx_opus_get_bandwidth(SWIGTYPE_p_int.getCPtr(p_bandwidth));
    return ret;
  }

  public static uint vx_get_available_codecs_mask() {
    uint ret = VivoxCoreInstancePINVOKE.vx_get_available_codecs_mask();
    return ret;
  }

  public static uint vx_get_default_codecs_mask() {
    uint ret = VivoxCoreInstancePINVOKE.vx_get_default_codecs_mask();
    return ret;
  }

  public static int vx_crash_test(vx_crash_test_type_t crash_type) {
    int ret = VivoxCoreInstancePINVOKE.vx_crash_test((int)crash_type);
    return ret;
  }

  public static int vx_set_message_rate_params(uint bucketSize, float messageSpeed, int fillBucket) {
    int ret = VivoxCoreInstancePINVOKE.vx_set_message_rate_params(bucketSize, messageSpeed, fillBucket);
    return ret;
  }

  public static int vx_set_default_message_rate_params() {
    int ret = VivoxCoreInstancePINVOKE.vx_set_default_message_rate_params();
    return ret;
  }

  public static int vx_internal_enable_debug_mode_disable_strict_checks() {
    int ret = VivoxCoreInstancePINVOKE.vx_internal_enable_debug_mode_disable_strict_checks();
    return ret;
  }

  public static int vx_internal_disable_debug_mode_enable_strict_checks() {
    int ret = VivoxCoreInstancePINVOKE.vx_internal_disable_debug_mode_enable_strict_checks();
    return ret;
  }

  public static int vx_is_access_token_well_formed(string access_token, SWIGTYPE_p_p_char error) {
    int ret = VivoxCoreInstancePINVOKE.vx_is_access_token_well_formed(access_token, SWIGTYPE_p_p_char.getCPtr(error));
    return ret;
  }

  public static int vx_vxd_send(string session_handle, string data, uint size) {
    int ret = VivoxCoreInstancePINVOKE.vx_vxd_send(session_handle, data, size);
    return ret;
  }

  public static int vx_vxd_recv(string session_handle, SWIGTYPE_p_p_vx_vxd vxd_ptr) {
    int ret = VivoxCoreInstancePINVOKE.vx_vxd_recv(session_handle, SWIGTYPE_p_p_vx_vxd.getCPtr(vxd_ptr));
    return ret;
  }

  public static int vx_vxd_destroy(vx_vxd_t vxd) {
    int ret = VivoxCoreInstancePINVOKE.vx_vxd_destroy(vx_vxd_t.getCPtr(vxd));
    return ret;
  }

  public static string vx_get_path(uint path_id) {
    string ret = VivoxCoreInstancePINVOKE.vx_get_path(path_id);
    return ret;
  }

  public static int vx_get_dynamic_voice_processing_switching_enabled(SWIGTYPE_p_int enabled) {
    int ret = VivoxCoreInstancePINVOKE.vx_get_dynamic_voice_processing_switching_enabled(SWIGTYPE_p_int.getCPtr(enabled));
    return ret;
  }

  public static int vx_set_dynamic_voice_processing_switching_enabled(int enabled) {
    int ret = VivoxCoreInstancePINVOKE.vx_set_dynamic_voice_processing_switching_enabled(enabled);
    return ret;
  }

  public static int vx_get_platform_aec_enabled(SWIGTYPE_p_int enabled) {
    int ret = VivoxCoreInstancePINVOKE.vx_get_platform_aec_enabled(SWIGTYPE_p_int.getCPtr(enabled));
    return ret;
  }

  public static int vx_set_platform_aec_enabled(int enabled) {
    int ret = VivoxCoreInstancePINVOKE.vx_set_platform_aec_enabled(enabled);
    return ret;
  }

  public static int vx_set_vivox_aec_enabled(int enabled) {
    int ret = VivoxCoreInstancePINVOKE.vx_set_vivox_aec_enabled(enabled);
    return ret;
  }

  public static int vx_get_vivox_aec_enabled(SWIGTYPE_p_int enabled) {
    int ret = VivoxCoreInstancePINVOKE.vx_get_vivox_aec_enabled(SWIGTYPE_p_int.getCPtr(enabled));
    return ret;
  }

  public static int vx_set_agc_enabled(int enabled) {
    int ret = VivoxCoreInstancePINVOKE.vx_set_agc_enabled(enabled);
    return ret;
  }

  public static int vx_get_agc_enabled(SWIGTYPE_p_int enabled) {
    int ret = VivoxCoreInstancePINVOKE.vx_get_agc_enabled(SWIGTYPE_p_int.getCPtr(enabled));
    return ret;
  }

  public static vx_tts_status vx_tts_initialize(vx_tts_engine_type engine_type, SWIGTYPE_p_unsigned_int tts_manager_id) {
    vx_tts_status ret = (vx_tts_status)VivoxCoreInstancePINVOKE.vx_tts_initialize((int)engine_type, SWIGTYPE_p_unsigned_int.getCPtr(tts_manager_id));
    return ret;
  }

  public static vx_tts_status vx_tts_get_voices(uint tts_manager_id, SWIGTYPE_p_int num_voices, SWIGTYPE_p_p_vx_tts_voice voices) {
    vx_tts_status ret = (vx_tts_status)VivoxCoreInstancePINVOKE.vx_tts_get_voices(tts_manager_id, SWIGTYPE_p_int.getCPtr(num_voices), SWIGTYPE_p_p_vx_tts_voice.getCPtr(voices));
    return ret;
  }

  public static vx_tts_status vx_tts_shutdown(SWIGTYPE_p_unsigned_int tts_manager_id) {
    vx_tts_status ret = (vx_tts_status)VivoxCoreInstancePINVOKE.vx_tts_shutdown(SWIGTYPE_p_unsigned_int.getCPtr(tts_manager_id));
    return ret;
  }

  public static string vx_get_tts_status_string(vx_tts_status status_code) {
    string ret = VivoxCoreInstancePINVOKE.vx_get_tts_status_string((int)status_code);
    return ret;
  }

  public static vx_tts_status vx_tts_speak(uint tts_manager_id, uint voice_id, string input_text, vx_tts_destination tts_dest, SWIGTYPE_p_unsigned_int utterance_id) {
    vx_tts_status ret = (vx_tts_status)VivoxCoreInstancePINVOKE.vx_tts_speak(tts_manager_id, voice_id, input_text, (int)tts_dest, SWIGTYPE_p_unsigned_int.getCPtr(utterance_id));
    return ret;
  }

  public static vx_tts_status vx_tts_speak_to_buffer(uint tts_manager_id, uint voice_id, string input_text, SWIGTYPE_p_p_vx_tts_utterance utterance) {
    vx_tts_status ret = (vx_tts_status)VivoxCoreInstancePINVOKE.vx_tts_speak_to_buffer(tts_manager_id, voice_id, input_text, SWIGTYPE_p_p_vx_tts_utterance.getCPtr(utterance));
    return ret;
  }

  public static vx_tts_status vx_tts_destroy_utterance(uint tts_manager_id, vx_tts_utterance_t utterance) {
    vx_tts_status ret = (vx_tts_status)VivoxCoreInstancePINVOKE.vx_tts_destroy_utterance(tts_manager_id, vx_tts_utterance_t.getCPtr(utterance));
    return ret;
  }

  public static vx_tts_status vx_tts_cancel_utterance(uint tts_manager_id, uint utterance_id) {
    vx_tts_status ret = (vx_tts_status)VivoxCoreInstancePINVOKE.vx_tts_cancel_utterance(tts_manager_id, utterance_id);
    return ret;
  }

  public static vx_tts_status vx_tts_cancel_all_in_dest(uint tts_manager_id, vx_tts_destination tts_dest) {
    vx_tts_status ret = (vx_tts_status)VivoxCoreInstancePINVOKE.vx_tts_cancel_all_in_dest(tts_manager_id, (int)tts_dest);
    return ret;
  }

  public static vx_tts_status vx_tts_cancel_all(uint tts_manager_id) {
    vx_tts_status ret = (vx_tts_status)VivoxCoreInstancePINVOKE.vx_tts_cancel_all(tts_manager_id);
    return ret;
  }

  public static readonly string APP_UNIQUE_3_LETTERS_USER_AGENT_ID_STRING = VivoxCoreInstancePINVOKE.APP_UNIQUE_3_LETTERS_USER_AGENT_ID_STRING_get();
  public static readonly int SWIG = VivoxCoreInstancePINVOKE.SWIG_get();
  public static readonly int VX_E_NO_MESSAGE_AVAILABLE = VivoxCoreInstancePINVOKE.VX_E_NO_MESSAGE_AVAILABLE_get();
  public static readonly int VX_E_SUCCESS = VivoxCoreInstancePINVOKE.VX_E_SUCCESS_get();
  public static readonly int VX_E_INVALID_XML = VivoxCoreInstancePINVOKE.VX_E_INVALID_XML_get();
  public static readonly int VX_E_NO_EXIST = VivoxCoreInstancePINVOKE.VX_E_NO_EXIST_get();
  public static readonly int VX_E_MAX_CONNECTOR_LIMIT_EXCEEDED = VivoxCoreInstancePINVOKE.VX_E_MAX_CONNECTOR_LIMIT_EXCEEDED_get();
  public static readonly int VX_E_MAX_SESSION_LIMIT_EXCEEDED = VivoxCoreInstancePINVOKE.VX_E_MAX_SESSION_LIMIT_EXCEEDED_get();
  public static readonly int VX_E_FAILED = VivoxCoreInstancePINVOKE.VX_E_FAILED_get();
  public static readonly int VX_E_ALREADY_LOGGED_IN = VivoxCoreInstancePINVOKE.VX_E_ALREADY_LOGGED_IN_get();
  public static readonly int VX_E_ALREADY_LOGGED_OUT = VivoxCoreInstancePINVOKE.VX_E_ALREADY_LOGGED_OUT_get();
  public static readonly int VX_E_NOT_LOGGED_IN = VivoxCoreInstancePINVOKE.VX_E_NOT_LOGGED_IN_get();
  public static readonly int VX_E_INVALID_ARGUMENT = VivoxCoreInstancePINVOKE.VX_E_INVALID_ARGUMENT_get();
  public static readonly int VX_E_INVALID_USERNAME_OR_PASSWORD = VivoxCoreInstancePINVOKE.VX_E_INVALID_USERNAME_OR_PASSWORD_get();
  public static readonly int VX_E_INSUFFICIENT_PRIVILEGE = VivoxCoreInstancePINVOKE.VX_E_INSUFFICIENT_PRIVILEGE_get();
  public static readonly int VX_E_NO_SUCH_SESSION = VivoxCoreInstancePINVOKE.VX_E_NO_SUCH_SESSION_get();
  public static readonly int VX_E_NOT_INITIALIZED = VivoxCoreInstancePINVOKE.VX_E_NOT_INITIALIZED_get();
  public static readonly int VX_E_REQUESTCONTEXT_NOT_FOUND = VivoxCoreInstancePINVOKE.VX_E_REQUESTCONTEXT_NOT_FOUND_get();
  public static readonly int VX_E_LOGIN_FAILED = VivoxCoreInstancePINVOKE.VX_E_LOGIN_FAILED_get();
  public static readonly int VX_E_SESSION_MAX = VivoxCoreInstancePINVOKE.VX_E_SESSION_MAX_get();
  public static readonly int VX_E_WRONG_CONNECTOR = VivoxCoreInstancePINVOKE.VX_E_WRONG_CONNECTOR_get();
  public static readonly int VX_E_NOT_IMPL = VivoxCoreInstancePINVOKE.VX_E_NOT_IMPL_get();
  public static readonly int VX_E_REQUEST_CANCELLED = VivoxCoreInstancePINVOKE.VX_E_REQUEST_CANCELLED_get();
  public static readonly int VX_E_INVALID_SESSION_STATE = VivoxCoreInstancePINVOKE.VX_E_INVALID_SESSION_STATE_get();
  public static readonly int VX_E_SESSION_CREATE_PENDING = VivoxCoreInstancePINVOKE.VX_E_SESSION_CREATE_PENDING_get();
  public static readonly int VX_E_SESSION_TERMINATE_PENDING = VivoxCoreInstancePINVOKE.VX_E_SESSION_TERMINATE_PENDING_get();
  public static readonly int VX_E_SESSION_CHANNEL_TEXT_DENIED = VivoxCoreInstancePINVOKE.VX_E_SESSION_CHANNEL_TEXT_DENIED_get();
  public static readonly int VX_E_SESSION_TEXT_DENIED = VivoxCoreInstancePINVOKE.VX_E_SESSION_TEXT_DENIED_get();
  public static readonly int VX_E_SESSION_MESSAGE_BUILD_FAILED = VivoxCoreInstancePINVOKE.VX_E_SESSION_MESSAGE_BUILD_FAILED_get();
  public static readonly int VX_E_SESSION_MSG_CONTENT_TYPE_FAILED = VivoxCoreInstancePINVOKE.VX_E_SESSION_MSG_CONTENT_TYPE_FAILED_get();
  public static readonly int VX_E_SESSION_MEDIA_CONNECT_FAILED = VivoxCoreInstancePINVOKE.VX_E_SESSION_MEDIA_CONNECT_FAILED_get();
  public static readonly int VX_E_SESSION_MEDIA_DISCONNECT_FAILED = VivoxCoreInstancePINVOKE.VX_E_SESSION_MEDIA_DISCONNECT_FAILED_get();
  public static readonly int VX_E_SESSION_DOES_NOT_HAVE_TEXT = VivoxCoreInstancePINVOKE.VX_E_SESSION_DOES_NOT_HAVE_TEXT_get();
  public static readonly int VX_E_SESSION_DOES_NOT_HAVE_AUDIO = VivoxCoreInstancePINVOKE.VX_E_SESSION_DOES_NOT_HAVE_AUDIO_get();
  public static readonly int VX_E_SESSION_MUST_HAVE_MEDIA = VivoxCoreInstancePINVOKE.VX_E_SESSION_MUST_HAVE_MEDIA_get();
  public static readonly int VX_E_SESSION_IS_NOT_3D = VivoxCoreInstancePINVOKE.VX_E_SESSION_IS_NOT_3D_get();
  public static readonly int VX_E_SESSIONGROUP_NOT_FOUND = VivoxCoreInstancePINVOKE.VX_E_SESSIONGROUP_NOT_FOUND_get();
  public static readonly int VX_E_REQUEST_TYPE_NOT_SUPPORTED = VivoxCoreInstancePINVOKE.VX_E_REQUEST_TYPE_NOT_SUPPORTED_get();
  public static readonly int VX_E_REQUEST_NOT_SUPPORTED = VivoxCoreInstancePINVOKE.VX_E_REQUEST_NOT_SUPPORTED_get();
  public static readonly int VX_E_MULTI_CHANNEL_DENIED = VivoxCoreInstancePINVOKE.VX_E_MULTI_CHANNEL_DENIED_get();
  public static readonly int VX_E_MEDIA_DISCONNECT_NOT_ALLOWED = VivoxCoreInstancePINVOKE.VX_E_MEDIA_DISCONNECT_NOT_ALLOWED_get();
  public static readonly int VX_E_PRELOGIN_INFO_NOT_RETURNED = VivoxCoreInstancePINVOKE.VX_E_PRELOGIN_INFO_NOT_RETURNED_get();
  public static readonly int VX_E_SUBSCRIPTION_NOT_FOUND = VivoxCoreInstancePINVOKE.VX_E_SUBSCRIPTION_NOT_FOUND_get();
  public static readonly int VX_E_INVALID_SUBSCRIPTION_RULE_TYPE = VivoxCoreInstancePINVOKE.VX_E_INVALID_SUBSCRIPTION_RULE_TYPE_get();
  public static readonly int VX_E_INVALID_MASK = VivoxCoreInstancePINVOKE.VX_E_INVALID_MASK_get();
  public static readonly int VX_E_INVALID_CONNECTOR_STATE = VivoxCoreInstancePINVOKE.VX_E_INVALID_CONNECTOR_STATE_get();
  public static readonly int VX_E_BUFSIZE = VivoxCoreInstancePINVOKE.VX_E_BUFSIZE_get();
  public static readonly int VX_E_FILE_OPEN_FAILED = VivoxCoreInstancePINVOKE.VX_E_FILE_OPEN_FAILED_get();
  public static readonly int VX_E_FILE_CORRUPT = VivoxCoreInstancePINVOKE.VX_E_FILE_CORRUPT_get();
  public static readonly int VX_E_FILE_WRITE_FAILED = VivoxCoreInstancePINVOKE.VX_E_FILE_WRITE_FAILED_get();
  public static readonly int VX_E_INVALID_FILE_OPERATION = VivoxCoreInstancePINVOKE.VX_E_INVALID_FILE_OPERATION_get();
  public static readonly int VX_E_NO_MORE_FRAMES = VivoxCoreInstancePINVOKE.VX_E_NO_MORE_FRAMES_get();
  public static readonly int VX_E_UNEXPECTED_END_OF_FILE = VivoxCoreInstancePINVOKE.VX_E_UNEXPECTED_END_OF_FILE_get();
  public static readonly int VX_E_FILE_WRITE_FAILED_REACHED_MAX_FILESIZE = VivoxCoreInstancePINVOKE.VX_E_FILE_WRITE_FAILED_REACHED_MAX_FILESIZE_get();
  public static readonly int VX_E_TERMINATESESSION_NOT_VALID = VivoxCoreInstancePINVOKE.VX_E_TERMINATESESSION_NOT_VALID_get();
  public static readonly int VX_E_MAX_PLAYBACK_SESSIONGROUPS_EXCEEDED = VivoxCoreInstancePINVOKE.VX_E_MAX_PLAYBACK_SESSIONGROUPS_EXCEEDED_get();
  public static readonly int VX_E_TEXT_DISCONNECT_NOT_ALLOWED = VivoxCoreInstancePINVOKE.VX_E_TEXT_DISCONNECT_NOT_ALLOWED_get();
  public static readonly int VX_E_TEXT_CONNECT_NOT_ALLOWED = VivoxCoreInstancePINVOKE.VX_E_TEXT_CONNECT_NOT_ALLOWED_get();
  public static readonly int VX_E_SESSION_TEXT_DISABLED = VivoxCoreInstancePINVOKE.VX_E_SESSION_TEXT_DISABLED_get();
  public static readonly int VX_E_SESSIONGROUP_TRANSMIT_NOT_ALLOWED = VivoxCoreInstancePINVOKE.VX_E_SESSIONGROUP_TRANSMIT_NOT_ALLOWED_get();
  public static readonly int VX_E_CALL_CREATION_FAILED = VivoxCoreInstancePINVOKE.VX_E_CALL_CREATION_FAILED_get();
  public static readonly int VX_E_RTP_TIMEOUT = VivoxCoreInstancePINVOKE.VX_E_RTP_TIMEOUT_get();
  public static readonly int VX_E_ACCOUNT_MISCONFIGURED = VivoxCoreInstancePINVOKE.VX_E_ACCOUNT_MISCONFIGURED_get();
  public static readonly int VX_E_MAXIMUM_NUMBER_OF_CALLS_EXCEEEDED = VivoxCoreInstancePINVOKE.VX_E_MAXIMUM_NUMBER_OF_CALLS_EXCEEEDED_get();
  public static readonly int VX_E_NO_SESSION_PORTS_AVAILABLE = VivoxCoreInstancePINVOKE.VX_E_NO_SESSION_PORTS_AVAILABLE_get();
  public static readonly int VX_E_INVALID_MEDIA_FORMAT = VivoxCoreInstancePINVOKE.VX_E_INVALID_MEDIA_FORMAT_get();
  public static readonly int VX_E_INVALID_CODEC_TYPE = VivoxCoreInstancePINVOKE.VX_E_INVALID_CODEC_TYPE_get();
  public static readonly int VX_E_RENDER_DEVICE_DOES_NOT_EXIST = VivoxCoreInstancePINVOKE.VX_E_RENDER_DEVICE_DOES_NOT_EXIST_get();
  public static readonly int VX_E_RENDER_CONTEXT_DOES_NOT_EXIST = VivoxCoreInstancePINVOKE.VX_E_RENDER_CONTEXT_DOES_NOT_EXIST_get();
  public static readonly int VX_E_RENDER_SOURCE_DOES_NOT_EXIST = VivoxCoreInstancePINVOKE.VX_E_RENDER_SOURCE_DOES_NOT_EXIST_get();
  public static readonly int VX_E_RECORDING_ALREADY_ACTIVE = VivoxCoreInstancePINVOKE.VX_E_RECORDING_ALREADY_ACTIVE_get();
  public static readonly int VX_E_RECORDING_LOOP_BUFFER_EMPTY = VivoxCoreInstancePINVOKE.VX_E_RECORDING_LOOP_BUFFER_EMPTY_get();
  public static readonly int VX_E_STREAM_READ_FAILED = VivoxCoreInstancePINVOKE.VX_E_STREAM_READ_FAILED_get();
  public static readonly int VX_E_INVALID_SDK_HANDLE = VivoxCoreInstancePINVOKE.VX_E_INVALID_SDK_HANDLE_get();
  public static readonly int VX_E_FAILED_TO_CONNECT_TO_VOICE_SERVICE = VivoxCoreInstancePINVOKE.VX_E_FAILED_TO_CONNECT_TO_VOICE_SERVICE_get();
  public static readonly int VX_E_FAILED_TO_SEND_REQUEST_TO_VOICE_SERVICE = VivoxCoreInstancePINVOKE.VX_E_FAILED_TO_SEND_REQUEST_TO_VOICE_SERVICE_get();
  public static readonly int VX_E_MAX_LOGINS_PER_USER_EXCEEDED = VivoxCoreInstancePINVOKE.VX_E_MAX_LOGINS_PER_USER_EXCEEDED_get();
  public static readonly int VX_E_MAX_HTTP_DATA_RESPONSE_SIZE_EXCEEDED = VivoxCoreInstancePINVOKE.VX_E_MAX_HTTP_DATA_RESPONSE_SIZE_EXCEEDED_get();
  public static readonly int VX_E_CHANNEL_URI_REQUIRED = VivoxCoreInstancePINVOKE.VX_E_CHANNEL_URI_REQUIRED_get();
  public static readonly int VX_E_INVALID_CAPTURE_DEVICE_FOR_REQUESTED_OPERATION = VivoxCoreInstancePINVOKE.VX_E_INVALID_CAPTURE_DEVICE_FOR_REQUESTED_OPERATION_get();
  public static readonly int VX_E_LOOP_MODE_RECORDING_NOT_ENABLED = VivoxCoreInstancePINVOKE.VX_E_LOOP_MODE_RECORDING_NOT_ENABLED_get();
  public static readonly int VX_E_TEXT_DISABLED = VivoxCoreInstancePINVOKE.VX_E_TEXT_DISABLED_get();
  public static readonly int VX_E_VOICE_FONT_NOT_FOUND = VivoxCoreInstancePINVOKE.VX_E_VOICE_FONT_NOT_FOUND_get();
  public static readonly int VX_E_CROSS_DOMAIN_LOGINS_DISABLED = VivoxCoreInstancePINVOKE.VX_E_CROSS_DOMAIN_LOGINS_DISABLED_get();
  public static readonly int VX_E_INVALID_AUTH_TOKEN = VivoxCoreInstancePINVOKE.VX_E_INVALID_AUTH_TOKEN_get();
  public static readonly int VX_E_INVALID_APP_TOKEN = VivoxCoreInstancePINVOKE.VX_E_INVALID_APP_TOKEN_get();
  public static readonly int VX_E_CAPACITY_EXCEEDED = VivoxCoreInstancePINVOKE.VX_E_CAPACITY_EXCEEDED_get();
  public static readonly int VX_E_ALREADY_INITIALIZED = VivoxCoreInstancePINVOKE.VX_E_ALREADY_INITIALIZED_get();
  public static readonly int VX_E_NOT_UNINITIALIZED_YET = VivoxCoreInstancePINVOKE.VX_E_NOT_UNINITIALIZED_YET_get();
  public static readonly int VX_E_NETWORK_ADDRESS_CHANGE = VivoxCoreInstancePINVOKE.VX_E_NETWORK_ADDRESS_CHANGE_get();
  public static readonly int VX_E_NETWORK_DOWN = VivoxCoreInstancePINVOKE.VX_E_NETWORK_DOWN_get();
  public static readonly int VX_E_POWER_STATE_CHANGE = VivoxCoreInstancePINVOKE.VX_E_POWER_STATE_CHANGE_get();
  public static readonly int VX_E_HANDLE_ALREADY_TAKEN = VivoxCoreInstancePINVOKE.VX_E_HANDLE_ALREADY_TAKEN_get();
  public static readonly int VX_E_HANDLE_IS_RESERVED = VivoxCoreInstancePINVOKE.VX_E_HANDLE_IS_RESERVED_get();
  public static readonly int VX_E_NO_XLSP_CONFIGURED = VivoxCoreInstancePINVOKE.VX_E_NO_XLSP_CONFIGURED_get();
  public static readonly int VX_E_XNETCONNECT_FAILED = VivoxCoreInstancePINVOKE.VX_E_XNETCONNECT_FAILED_get();
  public static readonly int VX_E_REQUEST_CANCELED = VivoxCoreInstancePINVOKE.VX_E_REQUEST_CANCELED_get();
  public static readonly int VX_E_CALL_TERMINATED_NO_RTP_RXED = VivoxCoreInstancePINVOKE.VX_E_CALL_TERMINATED_NO_RTP_RXED_get();
  public static readonly int VX_E_CALL_TERMINATED_NO_ANSWER_LOCAL = VivoxCoreInstancePINVOKE.VX_E_CALL_TERMINATED_NO_ANSWER_LOCAL_get();
  public static readonly int VX_E_CHANNEL_URI_TOO_LONG = VivoxCoreInstancePINVOKE.VX_E_CHANNEL_URI_TOO_LONG_get();
  public static readonly int VX_E_CALL_TERMINATED_BAN = VivoxCoreInstancePINVOKE.VX_E_CALL_TERMINATED_BAN_get();
  public static readonly int VX_E_CALL_TERMINATED_KICK = VivoxCoreInstancePINVOKE.VX_E_CALL_TERMINATED_KICK_get();
  public static readonly int VX_E_CALL_TERMINATED_BY_SERVER = VivoxCoreInstancePINVOKE.VX_E_CALL_TERMINATED_BY_SERVER_get();
  public static readonly int VX_E_ALREADY_EXIST = VivoxCoreInstancePINVOKE.VX_E_ALREADY_EXIST_get();
  public static readonly int VX_E_FEATURE_DISABLED = VivoxCoreInstancePINVOKE.VX_E_FEATURE_DISABLED_get();
  public static readonly int VX_E_SIZE_LIMIT_EXCEEDED = VivoxCoreInstancePINVOKE.VX_E_SIZE_LIMIT_EXCEEDED_get();
  public static readonly int VX_E_RTP_SESSION_SOCKET_ERROR = VivoxCoreInstancePINVOKE.VX_E_RTP_SESSION_SOCKET_ERROR_get();
  public static readonly int VX_E_SIP_BACKEND_REQUIRED = VivoxCoreInstancePINVOKE.VX_E_SIP_BACKEND_REQUIRED_get();
  public static readonly int VX_E_DEPRECATED = VivoxCoreInstancePINVOKE.VX_E_DEPRECATED_get();
  public static readonly int VX_E_NO_RENDER_DEVICES_FOUND = VivoxCoreInstancePINVOKE.VX_E_NO_RENDER_DEVICES_FOUND_get();
  public static readonly int VX_E_NO_CAPTURE_DEVICES_FOUND = VivoxCoreInstancePINVOKE.VX_E_NO_CAPTURE_DEVICES_FOUND_get();
  public static readonly int VX_E_INVALID_RENDER_DEVICE_SPECIFIER = VivoxCoreInstancePINVOKE.VX_E_INVALID_RENDER_DEVICE_SPECIFIER_get();
  public static readonly int VX_E_RENDER_DEVICE_IN_USE = VivoxCoreInstancePINVOKE.VX_E_RENDER_DEVICE_IN_USE_get();
  public static readonly int VX_E_INVALID_CAPTURE_DEVICE_SPECIFIER = VivoxCoreInstancePINVOKE.VX_E_INVALID_CAPTURE_DEVICE_SPECIFIER_get();
  public static readonly int VX_E_CAPTURE_DEVICE_IN_USE = VivoxCoreInstancePINVOKE.VX_E_CAPTURE_DEVICE_IN_USE_get();
  public static readonly int VX_E_UNABLE_TO_OPEN_CAPTURE_DEVICE = VivoxCoreInstancePINVOKE.VX_E_UNABLE_TO_OPEN_CAPTURE_DEVICE_get();
  public static readonly int VX_E_FAILED_TO_CONNECT_TO_SERVER = VivoxCoreInstancePINVOKE.VX_E_FAILED_TO_CONNECT_TO_SERVER_get();
  public static readonly int VX_E_ACCESSTOKEN_ALREADY_USED = VivoxCoreInstancePINVOKE.VX_E_ACCESSTOKEN_ALREADY_USED_get();
  public static readonly int VX_E_ACCESSTOKEN_EXPIRED = VivoxCoreInstancePINVOKE.VX_E_ACCESSTOKEN_EXPIRED_get();
  public static readonly int VX_E_ACCESSTOKEN_INVALID_SIGNATURE = VivoxCoreInstancePINVOKE.VX_E_ACCESSTOKEN_INVALID_SIGNATURE_get();
  public static readonly int VX_E_ACCESSTOKEN_CLAIMS_MISMATCH = VivoxCoreInstancePINVOKE.VX_E_ACCESSTOKEN_CLAIMS_MISMATCH_get();
  public static readonly int VX_E_ACCESSTOKEN_MALFORMED = VivoxCoreInstancePINVOKE.VX_E_ACCESSTOKEN_MALFORMED_get();
  public static readonly int VX_E_ACCESSTOKEN_INTERNAL_ERROR = VivoxCoreInstancePINVOKE.VX_E_ACCESSTOKEN_INTERNAL_ERROR_get();
  public static readonly int VX_E_ACCESSTOKEN_SERVICE_UNAVAILABLE = VivoxCoreInstancePINVOKE.VX_E_ACCESSTOKEN_SERVICE_UNAVAILABLE_get();
  public static readonly int VX_E_ACCESSTOKEN_ISSUER_MISMATCH = VivoxCoreInstancePINVOKE.VX_E_ACCESSTOKEN_ISSUER_MISMATCH_get();
  public static readonly int VxErrorNoMessageAvailable = VivoxCoreInstancePINVOKE.VxErrorNoMessageAvailable_get();
  public static readonly int VxErrorSuccess = VivoxCoreInstancePINVOKE.VxErrorSuccess_get();
  public static readonly int VxErrorAsyncOperationCanceled = VivoxCoreInstancePINVOKE.VxErrorAsyncOperationCanceled_get();
  public static readonly int VxErrorCaptureDeviceInUse = VivoxCoreInstancePINVOKE.VxErrorCaptureDeviceInUse_get();
  public static readonly int VxErrorConnectionTerminated = VivoxCoreInstancePINVOKE.VxErrorConnectionTerminated_get();
  public static readonly int VxErrorFileOpenFailed = VivoxCoreInstancePINVOKE.VxErrorFileOpenFailed_get();
  public static readonly int VxErrorHandleReserved = VivoxCoreInstancePINVOKE.VxErrorHandleReserved_get();
  public static readonly int VxErrorHandleTaken = VivoxCoreInstancePINVOKE.VxErrorHandleTaken_get();
  public static readonly int VxErrorInternalError = VivoxCoreInstancePINVOKE.VxErrorInternalError_get();
  public static readonly int VxErrorInvalidArgument = VivoxCoreInstancePINVOKE.VxErrorInvalidArgument_get();
  public static readonly int VxErrorInvalidFormat = VivoxCoreInstancePINVOKE.VxErrorInvalidFormat_get();
  public static readonly int VxErrorInvalidOperation = VivoxCoreInstancePINVOKE.VxErrorInvalidOperation_get();
  public static readonly int VxErrorInvalidState = VivoxCoreInstancePINVOKE.VxErrorInvalidState_get();
  public static readonly int VxErrorInvalidValueTypeXmlQuery = VivoxCoreInstancePINVOKE.VxErrorInvalidValueTypeXmlQuery_get();
  public static readonly int VxErrorNoMatchingXmlAttributeFound = VivoxCoreInstancePINVOKE.VxErrorNoMatchingXmlAttributeFound_get();
  public static readonly int VxErrorNoMatchingXmlNodeFound = VivoxCoreInstancePINVOKE.VxErrorNoMatchingXmlNodeFound_get();
  public static readonly int VxErrorNoMemory = VivoxCoreInstancePINVOKE.VxErrorNoMemory_get();
  public static readonly int VxErrorNoMoreData = VivoxCoreInstancePINVOKE.VxErrorNoMoreData_get();
  public static readonly int VxErrorNoXLSPConfigured = VivoxCoreInstancePINVOKE.VxErrorNoXLSPConfigured_get();
  public static readonly int VxErrorNotSupported = VivoxCoreInstancePINVOKE.VxErrorNotSupported_get();
  public static readonly int VxErrorPortNotAvailable = VivoxCoreInstancePINVOKE.VxErrorPortNotAvailable_get();
  public static readonly int VxErrorRtpTimeout = VivoxCoreInstancePINVOKE.VxErrorRtpTimeout_get();
  public static readonly int VxErrorUnableToOpenCaptureDevice = VivoxCoreInstancePINVOKE.VxErrorUnableToOpenCaptureDevice_get();
  public static readonly int VxErrorXLSPConnectFailed = VivoxCoreInstancePINVOKE.VxErrorXLSPConnectFailed_get();
  public static readonly int VxErrorXmppBackEndRequired = VivoxCoreInstancePINVOKE.VxErrorXmppBackEndRequired_get();
  public static readonly int VxErrorPreloginDownloadFailed = VivoxCoreInstancePINVOKE.VxErrorPreloginDownloadFailed_get();
  public static readonly int VxErrorNotLoggedIn = VivoxCoreInstancePINVOKE.VxErrorNotLoggedIn_get();
  public static readonly int VxErrorPresenceMustBeEnabled = VivoxCoreInstancePINVOKE.VxErrorPresenceMustBeEnabled_get();
  public static readonly int VxErrorConnectorLimitExceeded = VivoxCoreInstancePINVOKE.VxErrorConnectorLimitExceeded_get();
  public static readonly int VxErrorTargetObjectNotRelated = VivoxCoreInstancePINVOKE.VxErrorTargetObjectNotRelated_get();
  public static readonly int VxErrorTargetObjectDoesNotExist = VivoxCoreInstancePINVOKE.VxErrorTargetObjectDoesNotExist_get();
  public static readonly int VxErrorMaxLoginsPerUserExceeded = VivoxCoreInstancePINVOKE.VxErrorMaxLoginsPerUserExceeded_get();
  public static readonly int VxErrorRequestCanceled = VivoxCoreInstancePINVOKE.VxErrorRequestCanceled_get();
  public static readonly int VxErrorBuddyDoesNotExist = VivoxCoreInstancePINVOKE.VxErrorBuddyDoesNotExist_get();
  public static readonly int VxErrorChannelUriRequired = VivoxCoreInstancePINVOKE.VxErrorChannelUriRequired_get();
  public static readonly int VxErrorTargetObjectAlreadyExists = VivoxCoreInstancePINVOKE.VxErrorTargetObjectAlreadyExists_get();
  public static readonly int VxErrorInvalidCaptureDeviceForRequestedOperation = VivoxCoreInstancePINVOKE.VxErrorInvalidCaptureDeviceForRequestedOperation_get();
  public static readonly int VxErrorInvalidCaptureDeviceSpecifier = VivoxCoreInstancePINVOKE.VxErrorInvalidCaptureDeviceSpecifier_get();
  public static readonly int VxErrorInvalidRenderDeviceSpecifier = VivoxCoreInstancePINVOKE.VxErrorInvalidRenderDeviceSpecifier_get();
  public static readonly int VxErrorDeviceLimitReached = VivoxCoreInstancePINVOKE.VxErrorDeviceLimitReached_get();
  public static readonly int VxErrorInvalidEventType = VivoxCoreInstancePINVOKE.VxErrorInvalidEventType_get();
  public static readonly int VxErrorNotInitialized = VivoxCoreInstancePINVOKE.VxErrorNotInitialized_get();
  public static readonly int VxErrorAlreadyInitialized = VivoxCoreInstancePINVOKE.VxErrorAlreadyInitialized_get();
  public static readonly int VxErrorNotImplemented = VivoxCoreInstancePINVOKE.VxErrorNotImplemented_get();
  public static readonly int VxErrorTimeout = VivoxCoreInstancePINVOKE.VxErrorTimeout_get();
  public static readonly int VxNoAuthenticationStanzaReceived = VivoxCoreInstancePINVOKE.VxNoAuthenticationStanzaReceived_get();
  public static readonly int VxFailedToConnectToXmppServer = VivoxCoreInstancePINVOKE.VxFailedToConnectToXmppServer_get();
  public static readonly int VxSSLNegotiationToXmppServerFailed = VivoxCoreInstancePINVOKE.VxSSLNegotiationToXmppServerFailed_get();
  public static readonly int VxErrorUserOffLineOrDoesNotExist = VivoxCoreInstancePINVOKE.VxErrorUserOffLineOrDoesNotExist_get();
  public static readonly int VxErrorCaptureDeviceInvalidated = VivoxCoreInstancePINVOKE.VxErrorCaptureDeviceInvalidated_get();
  public static readonly int VxErrorMaxEtherChannelLimitReached = VivoxCoreInstancePINVOKE.VxErrorMaxEtherChannelLimitReached_get();
  public static readonly int VxErrorHostUnknown = VivoxCoreInstancePINVOKE.VxErrorHostUnknown_get();
  public static readonly int VxErrorChannelUriTooLong = VivoxCoreInstancePINVOKE.VxErrorChannelUriTooLong_get();
  public static readonly int VxErrorUserUriTooLong = VivoxCoreInstancePINVOKE.VxErrorUserUriTooLong_get();
  public static readonly int VxErrorInvalidChannelUri = VivoxCoreInstancePINVOKE.VxErrorInvalidChannelUri_get();
  public static readonly int VxErrorCrossDomainLoginDisabled = VivoxCoreInstancePINVOKE.VxErrorCrossDomainLoginDisabled_get();
  public static readonly int VxErrorSipRegistrationAuthorizationFailure = VivoxCoreInstancePINVOKE.VxErrorSipRegistrationAuthorizationFailure_get();
  public static readonly int VxErrorUserAlreadyLoggingOut = VivoxCoreInstancePINVOKE.VxErrorUserAlreadyLoggingOut_get();
  public static readonly int VxErrorBuddyGroupDoesNotExist = VivoxCoreInstancePINVOKE.VxErrorBuddyGroupDoesNotExist_get();
  public static readonly int VxErrorPowerEvent = VivoxCoreInstancePINVOKE.VxErrorPowerEvent_get();
  public static readonly int VxErrorNetworkAddressChanged = VivoxCoreInstancePINVOKE.VxErrorNetworkAddressChanged_get();
  public static readonly int VxErrorNetworkDown = VivoxCoreInstancePINVOKE.VxErrorNetworkDown_get();
  public static readonly int VxErrorNotUninitializedYet = VivoxCoreInstancePINVOKE.VxErrorNotUninitializedYet_get();
  public static readonly int VxErrorCallTerminatedBanned = VivoxCoreInstancePINVOKE.VxErrorCallTerminatedBanned_get();
  public static readonly int VxErrorCallTerminatedKick = VivoxCoreInstancePINVOKE.VxErrorCallTerminatedKick_get();
  public static readonly int VxErrorCallTerminatedByServer = VivoxCoreInstancePINVOKE.VxErrorCallTerminatedByServer_get();
  public static readonly int VxErrorServerRtpTimeout = VivoxCoreInstancePINVOKE.VxErrorServerRtpTimeout_get();
  public static readonly int VxErrorDeprecated = VivoxCoreInstancePINVOKE.VxErrorDeprecated_get();
  public static readonly int VxErrorUserBlocked = VivoxCoreInstancePINVOKE.VxErrorUserBlocked_get();
  public static readonly int VxXmppErrorCodesRangeStart = VivoxCoreInstancePINVOKE.VxXmppErrorCodesRangeStart_get();
  public static readonly int VxUnknownXmppError = VivoxCoreInstancePINVOKE.VxUnknownXmppError_get();
  public static readonly int VxAccessTokenAlreadyUsed = VivoxCoreInstancePINVOKE.VxAccessTokenAlreadyUsed_get();
  public static readonly int VxAccessTokenExpired = VivoxCoreInstancePINVOKE.VxAccessTokenExpired_get();
  public static readonly int VxAccessTokenInvalidSignature = VivoxCoreInstancePINVOKE.VxAccessTokenInvalidSignature_get();
  public static readonly int VxAccessTokenClaimsMismatch = VivoxCoreInstancePINVOKE.VxAccessTokenClaimsMismatch_get();
  public static readonly int VxAccessTokenMalformed = VivoxCoreInstancePINVOKE.VxAccessTokenMalformed_get();
  public static readonly int VxAccessTokenInternalError = VivoxCoreInstancePINVOKE.VxAccessTokenInternalError_get();
  public static readonly int VxAccessTokenServiceUnavailable = VivoxCoreInstancePINVOKE.VxAccessTokenServiceUnavailable_get();
  public static readonly int VxAccessTokenIssuerMismatch = VivoxCoreInstancePINVOKE.VxAccessTokenIssuerMismatch_get();
  public static readonly int VxXmppErrorBadRequest = VivoxCoreInstancePINVOKE.VxXmppErrorBadRequest_get();
  public static readonly int VxXmppInternalServerError = VivoxCoreInstancePINVOKE.VxXmppInternalServerError_get();
  public static readonly int VxXmppServerErrorServiceUnavailable = VivoxCoreInstancePINVOKE.VxXmppServerErrorServiceUnavailable_get();
  public static readonly int VxXmppErrorServiceUnavailable = VivoxCoreInstancePINVOKE.VxXmppErrorServiceUnavailable_get();
  public static readonly int VxXmppErrorCodesRangeEnd = VivoxCoreInstancePINVOKE.VxXmppErrorCodesRangeEnd_get();
  public static readonly int VxErrorXmppServerResponseMalformed = VivoxCoreInstancePINVOKE.VxErrorXmppServerResponseMalformed_get();
  public static readonly int VxErrorXmppServerResponseBadSdp = VivoxCoreInstancePINVOKE.VxErrorXmppServerResponseBadSdp_get();
  public static readonly int VxErrorXmppServerResponseInviteMissing = VivoxCoreInstancePINVOKE.VxErrorXmppServerResponseInviteMissing_get();
  public static readonly int VxErrorXmppServerResponseChanAddMissing = VivoxCoreInstancePINVOKE.VxErrorXmppServerResponseChanAddMissing_get();
  public static readonly int VxNetworkNameResolutionFailed = VivoxCoreInstancePINVOKE.VxNetworkNameResolutionFailed_get();
  public static readonly int VxNetworkUnableToConnectToServer = VivoxCoreInstancePINVOKE.VxNetworkUnableToConnectToServer_get();
  public static readonly int VxNetworkHttpTimeout = VivoxCoreInstancePINVOKE.VxNetworkHttpTimeout_get();
  public static readonly int VxNetworkHttpInvalidUrl = VivoxCoreInstancePINVOKE.VxNetworkHttpInvalidUrl_get();
  public static readonly int VxNetworkHttpInvalidCertificate = VivoxCoreInstancePINVOKE.VxNetworkHttpInvalidCertificate_get();
  public static readonly int VxNetworkHttpConnectionReset = VivoxCoreInstancePINVOKE.VxNetworkHttpConnectionReset_get();
  public static readonly int VxNetworkHttpInvalidServerResponse = VivoxCoreInstancePINVOKE.VxNetworkHttpInvalidServerResponse_get();
  public static readonly int VxNetworkHttpGeneralConnectionFailure = VivoxCoreInstancePINVOKE.VxNetworkHttpGeneralConnectionFailure_get();
  public static readonly int VX_E_XMPP_BACKEND_REQUIRED = VivoxCoreInstancePINVOKE.VX_E_XMPP_BACKEND_REQUIRED_get();
  public static readonly int VxErrorSipBackEndRequired = VivoxCoreInstancePINVOKE.VxErrorSipBackEndRequired_get();
  public static readonly int VX_USE_PLATFORM_SPECIFIC_PORT_RANGE = VivoxCoreInstancePINVOKE.VX_USE_PLATFORM_SPECIFIC_PORT_RANGE_get();
  public static readonly int MAX_CHANNEL_URI_LENGTH = VivoxCoreInstancePINVOKE.MAX_CHANNEL_URI_LENGTH_get();
  public static readonly int VIVOX_SDK_HAS_CRASH_REPORTING = VivoxCoreInstancePINVOKE.VIVOX_SDK_HAS_CRASH_REPORTING_get();
  public static readonly int VIVOX_SDK_HAS_VOICE_FONTS = VivoxCoreInstancePINVOKE.VIVOX_SDK_HAS_VOICE_FONTS_get();
  public static readonly int VIVOX_SDK_HAS_GROUP_IM = VivoxCoreInstancePINVOKE.VIVOX_SDK_HAS_GROUP_IM_get();
  public static readonly int VIVOX_SDK_HAS_MUTE_SCOPE = VivoxCoreInstancePINVOKE.VIVOX_SDK_HAS_MUTE_SCOPE_get();
  public static readonly int VIVOX_SDK_HAS_PARTICIPANT_TYPE = VivoxCoreInstancePINVOKE.VIVOX_SDK_HAS_PARTICIPANT_TYPE_get();
  public static readonly int VIVOX_SDK_HAS_NETWORK_MESSAGE = VivoxCoreInstancePINVOKE.VIVOX_SDK_HAS_NETWORK_MESSAGE_get();
  public static readonly int VIVOX_SDK_HAS_AUX_DIAGNOSTIC_STATE = VivoxCoreInstancePINVOKE.VIVOX_SDK_HAS_AUX_DIAGNOSTIC_STATE_get();
  public static readonly int VIVOX_SDK_SESSION_RENDER_AUDIO_OBSOLETE = VivoxCoreInstancePINVOKE.VIVOX_SDK_SESSION_RENDER_AUDIO_OBSOLETE_get();
  public static readonly int VIVOX_SDK_SESSION_GET_LOCAL_AUDIO_INFO_OBSOLETE = VivoxCoreInstancePINVOKE.VIVOX_SDK_SESSION_GET_LOCAL_AUDIO_INFO_OBSOLETE_get();
  public static readonly int VIVOX_SDK_SESSION_MEDIA_RINGBACK_OBSOLETE = VivoxCoreInstancePINVOKE.VIVOX_SDK_SESSION_MEDIA_RINGBACK_OBSOLETE_get();
  public static readonly int VIVOX_SDK_SESSION_CONNECT_OBSOLETE = VivoxCoreInstancePINVOKE.VIVOX_SDK_SESSION_CONNECT_OBSOLETE_get();
  public static readonly int VIVOX_SDK_SESSION_CHANNEL_GET_PARTICIPANTS_OBSOLETE = VivoxCoreInstancePINVOKE.VIVOX_SDK_SESSION_CHANNEL_GET_PARTICIPANTS_OBSOLETE_get();
  public static readonly int VIVOX_SDK_ACCOUNT_CHANNEL_CREATE_AND_INVITE_OBSOLETE = VivoxCoreInstancePINVOKE.VIVOX_SDK_ACCOUNT_CHANNEL_CREATE_AND_INVITE_OBSOLETE_get();
  public static readonly int VIVOX_SDK_EVT_SESSION_PARTICIPANT_LIST_OBSOLETE = VivoxCoreInstancePINVOKE.VIVOX_SDK_EVT_SESSION_PARTICIPANT_LIST_OBSOLETE_get();
  public static readonly int VIVOX_SDK_HAS_INTEGRATED_PROXY = VivoxCoreInstancePINVOKE.VIVOX_SDK_HAS_INTEGRATED_PROXY_get();
  public static readonly int VIVOX_SDK_HAS_NO_CHANNEL_FOLDERS = VivoxCoreInstancePINVOKE.VIVOX_SDK_HAS_NO_CHANNEL_FOLDERS_get();
  public static readonly int VIVOX_SDK_HAS_NO_SCORE = VivoxCoreInstancePINVOKE.VIVOX_SDK_HAS_NO_SCORE_get();
  public static readonly int VIVOX_SDK_HAS_GENERIC_APP_NOTIFICATIONS_ONLY = VivoxCoreInstancePINVOKE.VIVOX_SDK_HAS_GENERIC_APP_NOTIFICATIONS_ONLY_get();
  public static readonly int VIVOX_SDK_HAS_FRAME_TOTALS = VivoxCoreInstancePINVOKE.VIVOX_SDK_HAS_FRAME_TOTALS_get();
  public static readonly int VIVOX_SDK_NO_LEGACY_RECORDING = VivoxCoreInstancePINVOKE.VIVOX_SDK_NO_LEGACY_RECORDING_get();
  public static readonly int VIVOX_SDK_NO_IS_AD_PLAYING = VivoxCoreInstancePINVOKE.VIVOX_SDK_NO_IS_AD_PLAYING_get();
  public static readonly int VIVOX_SDK_HAS_ACCOUNT_SEND_MSG = VivoxCoreInstancePINVOKE.VIVOX_SDK_HAS_ACCOUNT_SEND_MSG_get();
  public static readonly int VIVOX_SDK_HAS_PLC_STATS = VivoxCoreInstancePINVOKE.VIVOX_SDK_HAS_PLC_STATS_get();
  public static readonly int VIVOX_SDK_HAS_DEVICE_ADDED_REMOVED = VivoxCoreInstancePINVOKE.VIVOX_SDK_HAS_DEVICE_ADDED_REMOVED_get();
  public static readonly int VIVOX_SDK_HAS_ADVANCED_AUDIO_LEVELS = VivoxCoreInstancePINVOKE.VIVOX_SDK_HAS_ADVANCED_AUDIO_LEVELS_get();
  public static readonly int VIVOX_SDK_HAS_AUDIO_UNIT_CALLBACKS = VivoxCoreInstancePINVOKE.VIVOX_SDK_HAS_AUDIO_UNIT_CALLBACKS_get();
  public static readonly int VX_MEDIA_FLAGS_AUDIO = VivoxCoreInstancePINVOKE.VX_MEDIA_FLAGS_AUDIO_get();
  public static readonly int VX_MEDIA_FLAGS_TEXT = VivoxCoreInstancePINVOKE.VX_MEDIA_FLAGS_TEXT_get();
  public static readonly int VX_GET_MESSAGE_NO_MESSAGE = VivoxCoreInstancePINVOKE.VX_GET_MESSAGE_NO_MESSAGE_get();
  public static readonly int VX_GET_MESSAGE_AVAILABLE = VivoxCoreInstancePINVOKE.VX_GET_MESSAGE_AVAILABLE_get();
  public static readonly int VX_GET_MESSAGE_FAILURE = VivoxCoreInstancePINVOKE.VX_GET_MESSAGE_FAILURE_get();
  public static readonly int VIVOX_V_V2_AUDIO_DATA_MONO_SIREN14_32000_EXPANDED = VivoxCoreInstancePINVOKE.VIVOX_V_V2_AUDIO_DATA_MONO_SIREN14_32000_EXPANDED_get();
  public static readonly int VIVOX_V_V2_AUDIO_DATA_MONO_SIREN14_32000 = VivoxCoreInstancePINVOKE.VIVOX_V_V2_AUDIO_DATA_MONO_SIREN14_32000_get();
  public static readonly int VIVOX_V_V2_AUDIO_DATA_MONO_SIREN7_16000_EXPANDED = VivoxCoreInstancePINVOKE.VIVOX_V_V2_AUDIO_DATA_MONO_SIREN7_16000_EXPANDED_get();
  public static readonly int VIVOX_V_V2_AUDIO_DATA_MONO_OPUS_48000_EXPANDED = VivoxCoreInstancePINVOKE.VIVOX_V_V2_AUDIO_DATA_MONO_OPUS_48000_EXPANDED_get();
  public static readonly int VIVOX_V_V2_AUDIO_DATA_MONO_PCMU_8000_COLLAPSED = VivoxCoreInstancePINVOKE.VIVOX_V_V2_AUDIO_DATA_MONO_PCMU_8000_COLLAPSED_get();
  public static readonly int VIVOX_V_V2_AUDIO_DATA_MONO_PCMU = VivoxCoreInstancePINVOKE.VIVOX_V_V2_AUDIO_DATA_MONO_PCMU_get();
  public static readonly int VIVOX_V_V2_AUDIO_DATA_MONO_PCMU_8000_EXPANDED = VivoxCoreInstancePINVOKE.VIVOX_V_V2_AUDIO_DATA_MONO_PCMU_8000_EXPANDED_get();
  public static readonly int VIVOX_VANI_PCMU = VivoxCoreInstancePINVOKE.VIVOX_VANI_PCMU_get();
  public static readonly int VIVOX_VANI_SIREN7 = VivoxCoreInstancePINVOKE.VIVOX_VANI_SIREN7_get();
  public static readonly int VIVOX_VANI_SIREN14 = VivoxCoreInstancePINVOKE.VIVOX_VANI_SIREN14_get();
  public static readonly int VIVOX_VANI_LEGACY_MASK = VivoxCoreInstancePINVOKE.VIVOX_VANI_LEGACY_MASK_get();
  public static readonly int VIVOX_VANI_OPUS8 = VivoxCoreInstancePINVOKE.VIVOX_VANI_OPUS8_get();
  public static readonly int VIVOX_VANI_OPUS40 = VivoxCoreInstancePINVOKE.VIVOX_VANI_OPUS40_get();
  public static readonly int VIVOX_VANI_OPUS57 = VivoxCoreInstancePINVOKE.VIVOX_VANI_OPUS57_get();
  public static readonly int VIVOX_VANI_OPUS72 = VivoxCoreInstancePINVOKE.VIVOX_VANI_OPUS72_get();
  public static readonly int VIVOX_VANI_OPUS = VivoxCoreInstancePINVOKE.VIVOX_VANI_OPUS_get();
  public static readonly int VIVOX_VANI_OPUS_MASK = VivoxCoreInstancePINVOKE.VIVOX_VANI_OPUS_MASK_get();
  public static readonly string VX_VAR_DECODER_COUNT_LIMIT = VivoxCoreInstancePINVOKE.VX_VAR_DECODER_COUNT_LIMIT_get();
  public static readonly string VX_VAR_DECODER_HANGOVER_LIMIT = VivoxCoreInstancePINVOKE.VX_VAR_DECODER_HANGOVER_LIMIT_get();
  public static readonly string VX_VAR_RTP_ENCRYPTION = VivoxCoreInstancePINVOKE.VX_VAR_RTP_ENCRYPTION_get();
  public static readonly int MAX_VXA_DEVICE_COUNT = VivoxCoreInstancePINVOKE.MAX_VXA_DEVICE_COUNT_get();
  public static readonly int VX_TTS_CHARACTER_COUNT_LIMIT = VivoxCoreInstancePINVOKE.VX_TTS_CHARACTER_COUNT_LIMIT_get();
  public static readonly int VX_TTS_MAX_DESTINATION_QUEUE_SIZE = VivoxCoreInstancePINVOKE.VX_TTS_MAX_DESTINATION_QUEUE_SIZE_get();
}
