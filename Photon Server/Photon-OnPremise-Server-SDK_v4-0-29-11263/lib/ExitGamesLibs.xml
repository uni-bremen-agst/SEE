<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ExitGamesLibs</name>
    </assembly>
    <members>
        <member name="T:ExitGames.Concurrency.Channels.BaseSubscription`1">
            <summary>
            Base implementation for subscription
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:ExitGames.Concurrency.Channels.ISubscribable`1">
            <summary>
            Callback method and parameters for a channel subscription
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:ExitGames.Concurrency.Channels.IProducerThreadSubscriber`1">
            <summary>
            Action subscriber that receives actions on producer thread.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ExitGames.Concurrency.Channels.IProducerThreadSubscriber`1.ReceiveOnProducerThread(`0)">
            <summary>
            Method called from producer threads
            </summary>
            <param name="msg"></param>
        </member>
        <member name="P:ExitGames.Concurrency.Channels.IProducerThreadSubscriber`1.Subscriptions">
            <summary>
             Allows for the registration and deregistration of subscriptions
            </summary>
        </member>
        <member name="P:ExitGames.Concurrency.Channels.ISubscribable`1.FilterOnProducerThread">
            <summary>
            Filter called from producer threads. Should be thread safe as it may be called from
            multiple threads.
            </summary>
        </member>
        <member name="M:ExitGames.Concurrency.Channels.BaseSubscription`1.ReceiveOnProducerThread(`0)">
            <summary>
            <see cref="M:ExitGames.Concurrency.Channels.IProducerThreadSubscriber`1.ReceiveOnProducerThread(`0)"/>
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:ExitGames.Concurrency.Channels.BaseSubscription`1.OnMessageOnProducerThread(`0)">
            <summary>
            Called after message has been filtered.
            </summary>
            <param name="msg"></param>
        </member>
        <member name="P:ExitGames.Concurrency.Channels.BaseSubscription`1.FilterOnProducerThread">
            <summary>
            <see cref="P:ExitGames.Concurrency.Channels.ISubscribable`1.FilterOnProducerThread"/>
            </summary>
        </member>
        <member name="P:ExitGames.Concurrency.Channels.BaseSubscription`1.Subscriptions">
            <summary>
             Allows for the registration and deregistration of subscriptions
            </summary>
        </member>
        <member name="T:ExitGames.Concurrency.Channels.BatchSubscriber`1">
            <summary>
            Batches actions for the consuming thread.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ExitGames.Concurrency.Channels.BatchSubscriber`1.#ctor(ExitGames.Concurrency.Fibers.IFiber,System.Action{System.Collections.Generic.IList{`0}},System.Int32)">
            <summary>
            Construct new instance.
            </summary>
            <param name="fiber"></param>
            <param name="receive"></param>
            <param name="interval"></param>
        </member>
        <member name="M:ExitGames.Concurrency.Channels.BatchSubscriber`1.OnMessageOnProducerThread(`0)">
            <summary>
            Receives message and batches as needed.
            </summary>
            <param name="msg"></param>
        </member>
        <member name="P:ExitGames.Concurrency.Channels.BatchSubscriber`1.Subscriptions">
            <summary>
             Allows for the registration and deregistration of subscriptions
            </summary>
        </member>
        <member name="T:ExitGames.Concurrency.Channels.Channel`1">
            <summary>
             Default Channel Implementation. Methods are thread safe.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:ExitGames.Concurrency.Channels.IChannel`1">
            <summary>
            A channel provides a conduit for messages. It provides methods for publishing and subscribing to messages. 
            The class is thread safe.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:ExitGames.Concurrency.Channels.ISubscriber`1">
            <summary>
            Channel subscription methods.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ExitGames.Concurrency.Channels.ISubscriber`1.Subscribe(ExitGames.Concurrency.Fibers.IFiber,System.Action{`0})">
            <summary>
             Subscribe to messages on this channel. The provided action will be invoked via a Action on the provided executor.
            </summary>
            <param name="fiber">the target executor to receive the message</param>
            <param name="receive"></param>
            <returns>Unsubscriber object</returns>
        </member>
        <member name="M:ExitGames.Concurrency.Channels.ISubscriber`1.SubscribeToBatch(ExitGames.Concurrency.Fibers.IFiber,System.Action{System.Collections.Generic.IList{`0}},System.Int32)">
            <summary>
            Subscribes to actions on the channel in batch form. The events will be batched if the consumer is unable to process the events 
            faster than the arrival rate.
            </summary>
            <param name="fiber">The target context to execute the action</param>
            <param name="receive"></param>
            <param name="intervalInMs">Time in Ms to batch actions. If 0 events will be delivered as fast as consumer can process</param>
            <returns></returns>
        </member>
        <member name="M:ExitGames.Concurrency.Channels.ISubscriber`1.SubscribeToKeyedBatch``1(ExitGames.Concurrency.Fibers.IFiber,System.Converter{`0,``0},System.Action{System.Collections.Generic.IDictionary{``0,`0}},System.Int32)">
            <summary>
             Batches actions based upon keyed values allowing for duplicates to be dropped. 
            </summary>
            <param name="fiber"></param>
            <param name="keyResolver"></param>
            <param name="receive"></param>
            <param name="intervalInMs"></param>
            <typeparam name="K"></typeparam>
            <returns></returns>
        </member>
        <member name="M:ExitGames.Concurrency.Channels.ISubscriber`1.SubscribeToLast(ExitGames.Concurrency.Fibers.IFiber,System.Action{`0},System.Int32)">
            <summary>
            Subscription that delivers the latest message to the consuming thread.  If a newer message arrives before the consuming thread
            has a chance to process the message, the pending message is replaced by the newer message. The old message is discarded.
            </summary>
            <param name="fiber"></param>
            <param name="receive"></param>
            <param name="intervalInMs"></param>
            <returns></returns>
        </member>
        <member name="M:ExitGames.Concurrency.Channels.ISubscriber`1.ClearSubscribers">
            <summary>
            Removes all subscribers.
            </summary>
        </member>
        <member name="T:ExitGames.Concurrency.Channels.IPublisher`1">
            <summary>
            Channel publishing interface.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ExitGames.Concurrency.Channels.IPublisher`1.Publish(`0)">
            <summary>
            Publish a message to all subscribers. Returns true if any subscribers are registered.
            </summary>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="M:ExitGames.Concurrency.Channels.IChannel`1.SubscribeOnProducerThreads(ExitGames.Concurrency.Channels.IProducerThreadSubscriber{`0})">
            <summary>
            Subscribes to actions on producer threads. Subscriber could be called from multiple threads.
            </summary>
            <param name="subscriber"></param>
            <returns></returns>
        </member>
        <member name="M:ExitGames.Concurrency.Channels.Channel`1.Subscribe(ExitGames.Concurrency.Fibers.IFiber,System.Action{`0})">
            <summary>
            <see cref="M:ExitGames.Concurrency.Channels.ISubscriber`1.Subscribe(ExitGames.Concurrency.Fibers.IFiber,System.Action{`0})"/>
            </summary>
            <param name="fiber"></param>
            <param name="receive"></param>
            <returns></returns>
        </member>
        <member name="M:ExitGames.Concurrency.Channels.Channel`1.SubscribeToBatch(ExitGames.Concurrency.Fibers.IFiber,System.Action{System.Collections.Generic.IList{`0}},System.Int32)">
            <summary>
            <see cref="M:ExitGames.Concurrency.Channels.ISubscriber`1.SubscribeToBatch(ExitGames.Concurrency.Fibers.IFiber,System.Action{System.Collections.Generic.IList{`0}},System.Int32)"/>
            </summary>
            <param name="fiber"></param>
            <param name="receive"></param>
            <param name="intervalInMs"></param>
            <returns></returns>
        </member>
        <member name="M:ExitGames.Concurrency.Channels.Channel`1.SubscribeToKeyedBatch``1(ExitGames.Concurrency.Fibers.IFiber,System.Converter{`0,``0},System.Action{System.Collections.Generic.IDictionary{``0,`0}},System.Int32)">
            <summary>
            <see cref="M:ExitGames.Concurrency.Channels.ISubscriber`1.SubscribeToKeyedBatch``1(ExitGames.Concurrency.Fibers.IFiber,System.Converter{`0,``0},System.Action{System.Collections.Generic.IDictionary{``0,`0}},System.Int32)"/>
            </summary>
            <typeparam name="K"></typeparam>
            <param name="fiber"></param>
            <param name="keyResolver"></param>
            <param name="receive"></param>
            <param name="intervalInMs"></param>
            <returns></returns>
        </member>
        <member name="M:ExitGames.Concurrency.Channels.Channel`1.SubscribeToLast(ExitGames.Concurrency.Fibers.IFiber,System.Action{`0},System.Int32)">
            <summary>
            Subscription that delivers the latest message to the consuming thread.  If a newer message arrives before the consuming thread
            has a chance to process the message, the pending message is replaced by the newer message. The old message is discarded.
            </summary>
            <param name="fiber"></param>
            <param name="receive"></param>
            <param name="intervalInMs"></param>
            <returns></returns>
        </member>
        <member name="M:ExitGames.Concurrency.Channels.Channel`1.SubscribeOnProducerThreads(ExitGames.Concurrency.Channels.IProducerThreadSubscriber{`0})">
            <summary>
            Subscribes to actions on producer threads. Subscriber could be called from multiple threads.
            </summary>
            <param name="subscriber"></param>
            <returns></returns>
        </member>
        <member name="M:ExitGames.Concurrency.Channels.Channel`1.SubscribeOnProducerThreads(System.Action{`0},ExitGames.Concurrency.Core.ISubscriptionRegistry)">
            <summary>
            Subscribes an action to be executed for every action posted to the channel. Action should be thread safe. 
            Action may be invoked on multiple threads.
            </summary>
            <param name="subscriber"></param>
            <param name="subscriptions"></param>
            <returns></returns>
        </member>
        <member name="M:ExitGames.Concurrency.Channels.Channel`1.Publish(`0)">
            <summary>
            <see cref="M:ExitGames.Concurrency.Channels.IPublisher`1.Publish(`0)"/>
            </summary>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="M:ExitGames.Concurrency.Channels.Channel`1.ClearSubscribers">
            <summary>
            Remove all subscribers.
            </summary>
        </member>
        <member name="P:ExitGames.Concurrency.Channels.Channel`1.NumSubscribers">
            <summary>
             Number of subscribers
            </summary>
        </member>
        <member name="T:ExitGames.Concurrency.Channels.IRequest`2">
            <summary>
            A request object that can be used to send 1 or many responses to the initial request.
            </summary>
            <typeparam name="R"></typeparam>
            <typeparam name="M"></typeparam>
        </member>
        <member name="M:ExitGames.Concurrency.Channels.IRequest`2.SendReply(`1)">
            <summary>
            Send one or more responses.
            </summary>
            <param name="replyMsg"></param>
            <returns></returns>
        </member>
        <member name="P:ExitGames.Concurrency.Channels.IRequest`2.Request">
            <summary>
            Request Message
            </summary>
        </member>
        <member name="T:ExitGames.Concurrency.Channels.IReply`1">
            <summary>
            Used to receive one or more replies.
            </summary>
            <typeparam name="M"></typeparam>
        </member>
        <member name="M:ExitGames.Concurrency.Channels.IReply`1.Receive(System.Int32,`0@)">
            <summary>
            Receive a single response. Can be called repeatedly for multiple replies.
            </summary>
            <param name="timeout"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:ExitGames.Concurrency.Channels.ChannelRequest`2.Dispose">
            <summary>
            Stop receiving replies.
            </summary>
        </member>
        <member name="T:ExitGames.Concurrency.Channels.ChannelSubscription`1">
            <summary>
            Subscription for actions on a channel.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ExitGames.Concurrency.Channels.ChannelSubscription`1.#ctor(ExitGames.Concurrency.Fibers.IFiber,System.Action{`0})">
            <summary>
            Construct the subscription
            </summary>
            <param name="fiber"></param>
            <param name="receiver"></param>
        </member>
        <member name="M:ExitGames.Concurrency.Channels.ChannelSubscription`1.OnMessageOnProducerThread(`0)">
            <summary>
            Receives the action and queues the execution on the target fiber.
            </summary>
            <param name="msg"></param>
        </member>
        <member name="P:ExitGames.Concurrency.Channels.ChannelSubscription`1.Subscriptions">
            <summary>
             Allows for the registration and deregistration of subscriptions
            </summary>
        </member>
        <member name="T:ExitGames.Concurrency.Channels.IQueueChannel`1">
            <summary>
            Creates a queue that will deliver a message to a single consumer. Load balancing can be achieved by creating 
            multiple subscribers to the queue.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ExitGames.Concurrency.Channels.IQueueChannel`1.Subscribe(ExitGames.Concurrency.Core.IExecutionContext,System.Action{`0})">
            <summary>
            Subscribe to the context.
            </summary>
            <param name="executionContext"></param>
            <param name="onMessage"></param>
            <returns></returns>
        </member>
        <member name="M:ExitGames.Concurrency.Channels.IQueueChannel`1.Publish(`0)">
            <summary>
            Pushes a message into the queue. Message will be processed by first available consumer.
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:ExitGames.Concurrency.Channels.IReplySubscriber`2">
            <summary>
            Methods for working with a replyChannel
            </summary>
            <typeparam name="R"></typeparam>
            <typeparam name="M"></typeparam>
        </member>
        <member name="M:ExitGames.Concurrency.Channels.IReplySubscriber`2.Subscribe(ExitGames.Concurrency.Fibers.IFiber,System.Action{ExitGames.Concurrency.Channels.IRequest{`0,`1}})">
            <summary>
            Subscribe to a request on the channel.
            </summary>
            <param name="fiber"></param>
            <param name="onRequest"></param>
            <returns></returns>
        </member>
        <member name="T:ExitGames.Concurrency.Channels.IRequestPublisher`2">
            <summary>
            
            </summary>
            <typeparam name="R"></typeparam>
            <typeparam name="M"></typeparam>
        </member>
        <member name="M:ExitGames.Concurrency.Channels.IRequestPublisher`2.SendRequest(`0)">
            <summary>
            Send request on the channel.
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="T:ExitGames.Concurrency.Channels.IRequestReplyChannel`2">
            <summary>
            Typed channel for request/reply
            </summary>
            <typeparam name="R"></typeparam>
            <typeparam name="M"></typeparam>
        </member>
        <member name="T:ExitGames.Concurrency.Channels.ISnapshotChannel`1">
            <summary>
             An ISnapshotChannel is a channel that allows for the transmission of an initial snapshot followed by incremental updates.
             The class is thread safe.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ExitGames.Concurrency.Channels.ISnapshotChannel`1.PrimedSubscribe(ExitGames.Concurrency.Fibers.IFiber,System.Action{`0})">
            <summary>
             Subscribes for an initial snapshot and then incremental update.
            </summary>
            <param name="fiber">the target executor to receive the message</param>
            <param name="receive"></param>
        </member>
        <member name="M:ExitGames.Concurrency.Channels.ISnapshotChannel`1.ReplyToPrimingRequest(ExitGames.Concurrency.Fibers.IFiber,System.Func{`0})">
            <summary>
             Ressponds to the request for an initial snapshot.
            </summary>
            <param name="fiber">the target executor to receive the message</param>
            <param name="reply">returns the snapshot update</param>
        </member>
        <member name="T:ExitGames.Concurrency.Channels.Filter`1">
            <summary>
            Message filter delegate
            </summary>
            <typeparam name="T"></typeparam>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="T:ExitGames.Concurrency.Channels.KeyedBatchSubscriber`2">
            <summary>
            Channel subscription that drops duplicates based upon a key.
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ExitGames.Concurrency.Channels.KeyedBatchSubscriber`2.#ctor(System.Converter{`1,`0},System.Action{System.Collections.Generic.IDictionary{`0,`1}},ExitGames.Concurrency.Fibers.IFiber,System.Int32)">
            <summary>
            Construct new instance.
            </summary>
            <param name="keyResolver"></param>
            <param name="target"></param>
            <param name="fiber"></param>
            <param name="flushIntervalInMs"></param>
        </member>
        <member name="M:ExitGames.Concurrency.Channels.KeyedBatchSubscriber`2.OnMessageOnProducerThread(`1)">
            <summary>
            received on delivery thread
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:ExitGames.Concurrency.Channels.KeyedBatchSubscriber`2.Flush">
            <summary>
            Flushed from fiber
            </summary>
        </member>
        <member name="P:ExitGames.Concurrency.Channels.KeyedBatchSubscriber`2.Subscriptions">
            <summary>
             Allows for the registration and deregistration of subscriptions
            </summary>
        </member>
        <member name="T:ExitGames.Concurrency.Channels.LastSubscriber`1">
            <summary>
            Subscribes to last action received on the channel. 
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ExitGames.Concurrency.Channels.LastSubscriber`1.#ctor(System.Action{`0},ExitGames.Concurrency.Fibers.IFiber,System.Int32)">
            <summary>
            New instance.
            </summary>
            <param name="target"></param>
            <param name="fiber"></param>
            <param name="flushIntervalInMs"></param>
        </member>
        <member name="M:ExitGames.Concurrency.Channels.LastSubscriber`1.OnMessageOnProducerThread(`0)">
            <summary>
            Receives message from producer thread.
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:ExitGames.Concurrency.Channels.LastSubscriber`1.Flush">
            <summary>
            Flushes on IFiber thread.
            </summary>
        </member>
        <member name="P:ExitGames.Concurrency.Channels.LastSubscriber`1.Subscriptions">
            <summary>
             Allows for the registration and deregistration of subscriptions
            </summary>
        </member>
        <member name="T:ExitGames.Concurrency.Channels.QueueChannel`1">
            <summary>
            Default QueueChannel implementation. Once and only once delivery to first available consumer.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ExitGames.Concurrency.Channels.QueueChannel`1.Subscribe(ExitGames.Concurrency.Core.IExecutionContext,System.Action{`0})">
            <summary>
            Subscribe to executor messages. 
            </summary>
            <param name="executionContext"></param>
            <param name="onMessage"></param>
            <returns></returns>
        </member>
        <member name="M:ExitGames.Concurrency.Channels.QueueChannel`1.Publish(`0)">
            <summary>
            Publish message onto queue. Notify consumers of message.
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:ExitGames.Concurrency.Channels.RequestReplyChannel`2">
            <summary>
            Channel for synchronous and asynchronous requests.
            </summary>
            <typeparam name="R"></typeparam>
            <typeparam name="M"></typeparam>
        </member>
        <member name="M:ExitGames.Concurrency.Channels.RequestReplyChannel`2.Subscribe(ExitGames.Concurrency.Fibers.IFiber,System.Action{ExitGames.Concurrency.Channels.IRequest{`0,`1}})">
            <summary>
            Subscribe to requests.
            </summary>
            <param name="fiber"></param>
            <param name="onRequest"></param>
            <returns></returns>
        </member>
        <member name="M:ExitGames.Concurrency.Channels.RequestReplyChannel`2.SendRequest(`0)">
            <summary>
            Send request to any and all subscribers.
            </summary>
            <param name="p"></param>
            <returns>null if no subscribers registered for request.</returns>
        </member>
        <member name="T:ExitGames.Concurrency.Channels.SnapshotChannel`1">
            <summary>
             A SnapshotChannel is a channel that allows for the transmission of an initial snapshot followed by incremental updates.
             The class is thread safe.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ExitGames.Concurrency.Channels.SnapshotChannel`1.#ctor(System.Int32)">
            <summary>
            </summary>
            <param name="timeoutInMs">For initial snapshot</param>
        </member>
        <member name="M:ExitGames.Concurrency.Channels.SnapshotChannel`1.PrimedSubscribe(ExitGames.Concurrency.Fibers.IFiber,System.Action{`0})">
            <summary>
             Subscribes for an initial snapshot and then incremental update.
            </summary>
            <param name="fiber">the target executor to receive the message</param>
            <param name="receive"></param>
        </member>
        <member name="M:ExitGames.Concurrency.Channels.SnapshotChannel`1.Publish(`0)">
            <summary>
             Publishes the incremental update.
            </summary>
            <param name="update"></param>
        </member>
        <member name="M:ExitGames.Concurrency.Channels.SnapshotChannel`1.ReplyToPrimingRequest(ExitGames.Concurrency.Fibers.IFiber,System.Func{`0})">
            <summary>
             Ressponds to the request for an initial snapshot.
            </summary>
            <param name="fiber">the target executor to receive the message</param>
            <param name="reply">returns the snapshot update</param>
        </member>
        <member name="T:ExitGames.Concurrency.Core.BoundedQueue">
            <summary>
            Queue with bounded capacity.  Will throw exception if capacity does not recede prior to wait time.
            </summary>
        </member>
        <member name="T:ExitGames.Concurrency.Core.IQueue">
            <summary>
            Holds on to actions until the execution context can process them.
            </summary>
        </member>
        <member name="M:ExitGames.Concurrency.Core.IQueue.Enqueue(System.Action)">
            <summary>
             Enqueues action for execution context to process.
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:ExitGames.Concurrency.Core.IQueue.Run">
            <summary>
            Start consuming actions.
            </summary>
        </member>
        <member name="M:ExitGames.Concurrency.Core.IQueue.Stop">
            <summary>
            Stop consuming actions.
            </summary>
        </member>
        <member name="M:ExitGames.Concurrency.Core.BoundedQueue.#ctor(ExitGames.Concurrency.Core.IExecutor)">
            <summary>
             Creates a bounded queue with a custom executor.
            </summary>
            <param name="executor"></param>
        </member>
        <member name="M:ExitGames.Concurrency.Core.BoundedQueue.#ctor">
            <summary>
             Creates a bounded queue with the default executor.
            </summary>
        </member>
        <member name="M:ExitGames.Concurrency.Core.BoundedQueue.Enqueue(System.Action)">
            <summary>
            Enqueue action.
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:ExitGames.Concurrency.Core.BoundedQueue.Run">
            <summary>
            Execute actions until stopped.
            </summary>
        </member>
        <member name="M:ExitGames.Concurrency.Core.BoundedQueue.Stop">
            <summary>
            Stop consuming actions.
            </summary>
        </member>
        <member name="M:ExitGames.Concurrency.Core.BoundedQueue.ExecuteNextBatch">
            <summary>
            Remove all actions and execute.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ExitGames.Concurrency.Core.BoundedQueue.MaxDepth">
            <summary>
            Max number of actions to be queued.
            </summary>
        </member>
        <member name="P:ExitGames.Concurrency.Core.BoundedQueue.MaxEnqueueWaitTime">
            <summary>
            Max time to wait for space in the queue.
            </summary>
        </member>
        <member name="T:ExitGames.Concurrency.Core.BusyWaitQueue">
            <summary>
            Busy waits on lock to execute.  Can improve performance in certain situations.
            </summary>
        </member>
        <member name="M:ExitGames.Concurrency.Core.BusyWaitQueue.#ctor(ExitGames.Concurrency.Core.IExecutor,System.Int32,System.Int32)">
            <summary>
             BusyWaitQueue with custom executor.
            </summary>
            <param name="executor"></param>
            <param name="spinsBeforeTimeCheck"></param>
            <param name="msBeforeBlockingWait"></param>
        </member>
        <member name="M:ExitGames.Concurrency.Core.BusyWaitQueue.#ctor(System.Int32,System.Int32)">
            <summary>
             BusyWaitQueue with default executor.
            </summary>
        </member>
        <member name="M:ExitGames.Concurrency.Core.BusyWaitQueue.Enqueue(System.Action)">
            <summary>
            Enqueue action.
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:ExitGames.Concurrency.Core.BusyWaitQueue.Run">
            <summary>
            Execute actions until stopped.
            </summary>
        </member>
        <member name="M:ExitGames.Concurrency.Core.BusyWaitQueue.Stop">
            <summary>
            Stop consuming actions.
            </summary>
        </member>
        <member name="T:ExitGames.Concurrency.Core.DefaultExecutor">
            <summary>
            Default executor.
            </summary>
        </member>
        <member name="T:ExitGames.Concurrency.Core.IExecutor">
            <summary>
            Executes pending action(s).
            </summary>
        </member>
        <member name="M:ExitGames.Concurrency.Core.IExecutor.Execute(System.Collections.Generic.List{System.Action})">
            <summary>
            Executes all actions.
            </summary>
            <param name="toExecute"></param>
        </member>
        <member name="M:ExitGames.Concurrency.Core.IExecutor.Execute(System.Action)">
            <summary>
             Executes a single action. 
            </summary>
            <param name="toExecute"></param>
        </member>
        <member name="M:ExitGames.Concurrency.Core.DefaultExecutor.Execute(System.Collections.Generic.List{System.Action})">
            <summary>
            Executes all actions.
            </summary>
            <param name="toExecute"></param>
        </member>
        <member name="M:ExitGames.Concurrency.Core.DefaultExecutor.Execute(System.Action)">
            <summary>
             Executes a single action. 
            </summary>
            <param name="toExecute"></param>
        </member>
        <member name="P:ExitGames.Concurrency.Core.DefaultExecutor.IsEnabled">
            <summary>
            When disabled, actions will be ignored by executor. The executor is typically disabled at shutdown
            to prevent any pending actions from being executed. 
            </summary>
        </member>
        <member name="T:ExitGames.Concurrency.Core.DefaultQueue">
            <summary>
            Default implementation.
            </summary>
        </member>
        <member name="M:ExitGames.Concurrency.Core.DefaultQueue.#ctor(ExitGames.Concurrency.Core.IExecutor)">
            <summary>
             Default queue with custom executor
            </summary>
            <param name="executor"></param>
        </member>
        <member name="M:ExitGames.Concurrency.Core.DefaultQueue.#ctor">
            <summary>
             Default queue with default executor
            </summary>
        </member>
        <member name="M:ExitGames.Concurrency.Core.DefaultQueue.Enqueue(System.Action)">
            <summary>
            Enqueue action.
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:ExitGames.Concurrency.Core.DefaultQueue.Run">
            <summary>
            Execute actions until stopped.
            </summary>
        </member>
        <member name="M:ExitGames.Concurrency.Core.DefaultQueue.Stop">
            <summary>
            Stop consuming actions.
            </summary>
        </member>
        <member name="M:ExitGames.Concurrency.Core.DefaultQueue.ExecuteNextBatch">
            <summary>
            Remove all actions and execute.
            </summary>
            <returns></returns>
        </member>
        <member name="T:ExitGames.Concurrency.Core.DefaultThreadPool">
            <summary>
            Default implementation that uses the .NET thread pool.
            </summary>
        </member>
        <member name="T:ExitGames.Concurrency.Core.IThreadPool">
            <summary>
            A thread pool for executing asynchronous actions.
            </summary>
        </member>
        <member name="M:ExitGames.Concurrency.Core.IThreadPool.Queue(System.Threading.WaitCallback)">
            <summary>
            Enqueue action for execution.
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:ExitGames.Concurrency.Core.DefaultThreadPool.Queue(System.Threading.WaitCallback)">
            <summary>
            Enqueues action.
            </summary>
            <param name="callback"></param>
        </member>
        <member name="T:ExitGames.Concurrency.Core.IExecutionContext">
            <summary>
            Context of execution.
            </summary>
        </member>
        <member name="M:ExitGames.Concurrency.Core.IExecutionContext.Enqueue(System.Action)">
            <summary>
            Enqueue a single action.
            </summary>
            <param name="action"></param>
        </member>
        <member name="T:ExitGames.Concurrency.Core.IPendingEvent">
            <summary>
            A scheduled event.
            </summary>
        </member>
        <member name="M:ExitGames.Concurrency.Core.IPendingEvent.Execute(System.Int64)">
            <summary>
            Execute this event and optionally schedule another execution.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ExitGames.Concurrency.Core.IPendingEvent.Expiration">
            <summary>
            Time of expiration for this event
            </summary>
        </member>
        <member name="T:ExitGames.Concurrency.Core.IScheduler">
            <summary>
            Methods for scheduling actions that will be executed in the future.
            </summary>
        </member>
        <member name="M:ExitGames.Concurrency.Core.IScheduler.Schedule(System.Action,System.Int64)">
            <summary>
            Schedules an action to be executed once.
            </summary>
            <param name="action"></param>
            <param name="firstInMs"></param>
            <returns>a handle to cancel the timer.</returns>
        </member>
        <member name="M:ExitGames.Concurrency.Core.IScheduler.ScheduleOnInterval(System.Action,System.Int64,System.Int64)">
            <summary>
            Schedule an action to be executed on a recurring interval.
            </summary>
            <param name="action"></param>
            <param name="firstInMs"></param>
            <param name="regularInMs"></param>
            <returns>a handle to cancel the timer.</returns>
        </member>
        <member name="T:ExitGames.Concurrency.Core.ISchedulerRegistry">
            <summary>
            Enqueues actions and 
            </summary>
        </member>
        <member name="M:ExitGames.Concurrency.Core.ISchedulerRegistry.Enqueue(System.Action)">
            <summary>
            Enqueue action to target fiber.
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:ExitGames.Concurrency.Core.ISchedulerRegistry.Remove(System.IDisposable)">
            <summary>
            Remove timer
            </summary>
            <param name="timer"></param>
        </member>
        <member name="T:ExitGames.Concurrency.Core.ISubscriptionRegistry">
            <summary>
             Allows for the registration and deregistration of subscriptions
            </summary>
        </member>
        <member name="M:ExitGames.Concurrency.Core.ISubscriptionRegistry.RegisterSubscription(System.IDisposable)">
            <summary>
             Register subscription to be unsubcribed from when the fiber is disposed.
            </summary>
            <param name="toAdd"></param>
        </member>
        <member name="M:ExitGames.Concurrency.Core.ISubscriptionRegistry.DeregisterSubscription(System.IDisposable)">
            <summary>
             Deregister a subscription.
            </summary>
            <param name="toRemove"></param>
            <returns></returns>
        </member>
        <member name="T:ExitGames.Concurrency.Core.QueueFullException">
            <summary>
            Thrown when a queue is full.
            </summary>
        </member>
        <member name="M:ExitGames.Concurrency.Core.QueueFullException.#ctor(System.Int32)">
            <summary>
            Construct the execution with the depth of the queue.
            </summary>
            <param name="depth"></param>
        </member>
        <member name="M:ExitGames.Concurrency.Core.QueueFullException.#ctor(System.String)">
            <summary>
            Construct with a custom message.
            </summary>
            <param name="msg"></param>
        </member>
        <member name="P:ExitGames.Concurrency.Core.QueueFullException.Depth">
            <summary>
            Depth of queue.
            </summary>
        </member>
        <member name="T:ExitGames.Concurrency.Core.Scheduler">
            <summary>
             Enqueues actions on to context after schedule elapses.  
            </summary>
        </member>
        <member name="M:ExitGames.Concurrency.Core.Scheduler.#ctor(ExitGames.Concurrency.Core.IExecutionContext)">
            <summary>
             Constructs new instance.
            </summary>
        </member>
        <member name="M:ExitGames.Concurrency.Core.Scheduler.Schedule(System.Action,System.Int64)">
            <summary>
             Enqueues action on to context after timer elapses.  
            </summary>
        </member>
        <member name="M:ExitGames.Concurrency.Core.Scheduler.ScheduleOnInterval(System.Action,System.Int64,System.Int64)">
            <summary>
             Enqueues actions on to context after schedule elapses.  
            </summary>
        </member>
        <member name="M:ExitGames.Concurrency.Core.Scheduler.Remove(System.IDisposable)">
            <summary>
             Removes a pending scheduled action.
            </summary>
            <param name="toRemove"></param>
        </member>
        <member name="M:ExitGames.Concurrency.Core.Scheduler.Enqueue(System.Action)">
            <summary>
             Enqueues actions on to context immediately.
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:ExitGames.Concurrency.Core.Scheduler.Dispose">
            <summary>
             Cancels all pending actions
            </summary>
        </member>
        <member name="T:ExitGames.Concurrency.Core.Subscriptions">
            <summary>
            Registry for subscriptions. Provides thread safe methods for list of subscriptions.
            </summary>
        </member>
        <member name="M:ExitGames.Concurrency.Core.Subscriptions.Add(System.IDisposable)">
            <summary>
            Add Disposable
            </summary>
            <param name="toAdd"></param>
        </member>
        <member name="M:ExitGames.Concurrency.Core.Subscriptions.Remove(System.IDisposable)">
            <summary>
            Remove Disposable.
            </summary>
            <param name="toRemove"></param>
            <returns></returns>
        </member>
        <member name="M:ExitGames.Concurrency.Core.Subscriptions.Dispose">
            <summary>
            Disposes all disposables registered in list.
            </summary>
        </member>
        <member name="P:ExitGames.Concurrency.Core.Subscriptions.Count">
            <summary>
            Number of registered disposables.
            </summary>
        </member>
        <member name="T:ExitGames.Concurrency.Fibers.DispatcherFiber">
            <summary>
            Adapts Dispatcher to a Fiber. Transparently moves actions onto the Dispatcher thread.
            </summary>
        </member>
        <member name="T:ExitGames.Concurrency.Fibers.GuiFiber">
            <summary>
             Allows interaction with Windows Forms.  Transparently moves actions onto the Form's thread.
            </summary>
        </member>
        <member name="T:ExitGames.Concurrency.Fibers.IFiber">
            <summary>
            Enqueues pending actions for the context of execution (thread, pool of threads, message pump, etc.)
            </summary>
        </member>
        <member name="M:ExitGames.Concurrency.Fibers.IFiber.Start">
            <summary>
            Start consuming actions.
            </summary>
        </member>
        <member name="M:ExitGames.Concurrency.Fibers.GuiFiber.#ctor(ExitGames.Concurrency.Core.IExecutionContext,ExitGames.Concurrency.Core.IExecutor)">
            <summary>
            Creates an instance.
            </summary>
        </member>
        <member name="M:ExitGames.Concurrency.Fibers.GuiFiber.Enqueue(System.Action)">
            <summary>
            Enqueue a single action.
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:ExitGames.Concurrency.Fibers.GuiFiber.RegisterSubscription(System.IDisposable)">
            <summary>
             Register subscription to be unsubcribed from when the fiber is disposed.
            </summary>
            <param name="toAdd"></param>
        </member>
        <member name="M:ExitGames.Concurrency.Fibers.GuiFiber.DeregisterSubscription(System.IDisposable)">
            <summary>
             Deregister a subscription.
            </summary>
            <param name="toRemove"></param>
            <returns></returns>
        </member>
        <member name="M:ExitGames.Concurrency.Fibers.GuiFiber.Schedule(System.Action,System.Int64)">
            <summary>
            <see cref="M:ExitGames.Concurrency.Core.IScheduler.Schedule(System.Action,System.Int64)"/>
            </summary>
        </member>
        <member name="M:ExitGames.Concurrency.Fibers.GuiFiber.ScheduleOnInterval(System.Action,System.Int64,System.Int64)">
            <summary>
            <see cref="M:ExitGames.Concurrency.Core.IScheduler.ScheduleOnInterval(System.Action,System.Int64,System.Int64)"/>
            </summary>
        </member>
        <member name="M:ExitGames.Concurrency.Fibers.GuiFiber.Start">
            <summary>
            <see cref="M:ExitGames.Concurrency.Fibers.IFiber.Start"/>
            </summary>
        </member>
        <member name="M:ExitGames.Concurrency.Fibers.GuiFiber.Dispose">
            <summary>
            <see cref="M:System.IDisposable.Dispose"/>
            </summary>
        </member>
        <member name="M:ExitGames.Concurrency.Fibers.GuiFiber.Stop">
            <summary>
            Stops the fiber.
            </summary>
        </member>
        <member name="P:ExitGames.Concurrency.Fibers.GuiFiber.NumSubscriptions">
            <summary>
             Number of subscriptions.
            </summary>
        </member>
        <member name="M:ExitGames.Concurrency.Fibers.DispatcherFiber.#ctor(System.Windows.Threading.Dispatcher,System.Windows.Threading.DispatcherPriority,ExitGames.Concurrency.Core.IExecutor)">
            <summary>
            Constructs a Fiber that executes on dispatcher thread.
            </summary>
            <param name="dispatcher">The dispatcher.</param>
            <param name="priority">The priority.</param>
            <param name="executor">The executor.</param>
        </member>
        <member name="M:ExitGames.Concurrency.Fibers.DispatcherFiber.#ctor(System.Windows.Threading.Dispatcher,ExitGames.Concurrency.Core.IExecutor)">
            <summary>
            Constructs a Fiber that executes on dispatcher thread.
            </summary>
            <param name="dispatcher">The dispatcher.</param>
            <param name="executor">The priority.</param>
        </member>
        <member name="M:ExitGames.Concurrency.Fibers.DispatcherFiber.#ctor(System.Windows.Threading.Dispatcher,System.Windows.Threading.DispatcherPriority)">
            <summary>
            Constructs a Fiber that executes on dispatcher thread.
            </summary>
            <param name="dispatcher">The dispatcher.</param>
            <param name="priority">The priority.</param>
        </member>
        <member name="M:ExitGames.Concurrency.Fibers.DispatcherFiber.#ctor(System.Windows.Threading.Dispatcher)">
            <summary>
            Constructs a Fiber that executes on dispatcher thread.
            </summary>
            <param name="dispatcher">The dispatcher.</param>
        </member>
        <member name="M:ExitGames.Concurrency.Fibers.DispatcherFiber.#ctor(System.Windows.Threading.DispatcherPriority)">
            <summary>
            Constructs a Fiber that executes on dispatcher thread of the
            current dispatcher.
            </summary>
            <param name="priority">The priority.</param>
        </member>
        <member name="M:ExitGames.Concurrency.Fibers.DispatcherFiber.#ctor">
            <summary>
            Constructs a Fiber that executes on dispatcher thread of the
            current dispatcher.
            </summary>
        </member>
        <member name="T:ExitGames.Diagnostics.Counter.ICounter">
            <summary>
              Represents a counter instance.
            </summary>
        </member>
        <member name="M:ExitGames.Diagnostics.Counter.ICounter.Decrement">
            <summary>
              Decrements the counter by one.
            </summary>
            <returns>
              The decremented value.
            </returns>
        </member>
        <member name="M:ExitGames.Diagnostics.Counter.ICounter.GetNextValue">
            <summary>
              Gets the next value.
            </summary>
            <returns>The get next value.</returns>
        </member>
        <member name="M:ExitGames.Diagnostics.Counter.ICounter.Increment">
            <summary>
              Increments the counter by one and returns the new value.
            </summary>
            <returns>
              The incremented value.
            </returns>
        </member>
        <member name="M:ExitGames.Diagnostics.Counter.ICounter.IncrementBy(System.Int64)">
            <summary>
              Increments the counter by a given value.
            </summary>
            <param name = "value">
              The value to be added to the counter.
            </param>
            <returns>
              The incremented value.
            </returns>
        </member>
        <member name="P:ExitGames.Diagnostics.Counter.ICounter.CounterType">
            <summary>
              Gets the type of the counter.
            </summary>
            <value>The type of the counter.</value>
        </member>
        <member name="P:ExitGames.Diagnostics.Counter.ICounter.Name">
            <summary>
              Gets the name of the counter.
            </summary>
        </member>
        <member name="T:ExitGames.Concurrency.Fibers.ExecutionState">
            <summary>
             Fiber execution state management
            </summary>
        </member>
        <member name="F:ExitGames.Concurrency.Fibers.ExecutionState.Created">
            <summary>
             Created but not running
            </summary>
        </member>
        <member name="F:ExitGames.Concurrency.Fibers.ExecutionState.Running">
            <summary>
             After start
            </summary>
        </member>
        <member name="F:ExitGames.Concurrency.Fibers.ExecutionState.Stopped">
            <summary>
             After stopped
            </summary>
        </member>
        <member name="F:ExitGames.Concurrency.Fibers.ExecutionState.Paused">
            <summary>
            State after Pause
            </summary>
        </member>
        <member name="T:ExitGames.Concurrency.Fibers.IExtendedExecutor">
            <summary>
            Extended executor should support pausing
            </summary>
        </member>
        <member name="T:ExitGames.Concurrency.Fibers.ExtendedPoolFiber">
            <summary>
            PoolFiber which supports pausing
            </summary>
        </member>
        <member name="T:ExitGames.Concurrency.Fibers.PoolFiber">
            <summary>
            Fiber that uses a thread pool for execution.
            </summary>
        </member>
        <member name="M:ExitGames.Concurrency.Fibers.PoolFiber.#ctor(ExitGames.Concurrency.Core.IThreadPool,ExitGames.Concurrency.Core.IExecutor)">
            <summary>
            Construct new instance.
            </summary>
            <param name="pool"></param>
            <param name="executor"></param>
        </member>
        <member name="M:ExitGames.Concurrency.Fibers.PoolFiber.#ctor(ExitGames.Concurrency.Core.IExecutor)">
            <summary>
            Create a pool fiber with the default thread pool.
            </summary>
        </member>
        <member name="M:ExitGames.Concurrency.Fibers.PoolFiber.#ctor">
            <summary>
            Create a pool fiber with the default thread pool and default executor.
            </summary>
        </member>
        <member name="M:ExitGames.Concurrency.Fibers.PoolFiber.Enqueue(System.Action)">
            <summary>
            Enqueue a single action.
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:ExitGames.Concurrency.Fibers.PoolFiber.RegisterSubscription(System.IDisposable)">
            <summary>
            Register subscription to be unsubcribed from when the fiber is disposed.
            </summary>
            <param name="toAdd"></param>
        </member>
        <member name="M:ExitGames.Concurrency.Fibers.PoolFiber.DeregisterSubscription(System.IDisposable)">
            <summary>
            Deregister a subscription.
            </summary>
            <param name="toRemove"></param>
            <returns></returns>
        </member>
        <member name="M:ExitGames.Concurrency.Fibers.PoolFiber.Schedule(System.Action,System.Int64)">
            <summary>
            <see cref="M:ExitGames.Concurrency.Core.IScheduler.Schedule(System.Action,System.Int64)"/>
            </summary>
            <param name="action"></param>
            <param name="firstInMs"></param>
            <returns></returns>
        </member>
        <member name="M:ExitGames.Concurrency.Fibers.PoolFiber.ScheduleOnInterval(System.Action,System.Int64,System.Int64)">
            <summary>
            <see cref="M:ExitGames.Concurrency.Core.IScheduler.ScheduleOnInterval(System.Action,System.Int64,System.Int64)"/>
            </summary>
            <param name="action"></param>
            <param name="firstInMs"></param>
            <param name="regularInMs"></param>
            <returns></returns>
        </member>
        <member name="M:ExitGames.Concurrency.Fibers.PoolFiber.Start">
            <summary>
            Start consuming actions.
            </summary>
        </member>
        <member name="M:ExitGames.Concurrency.Fibers.PoolFiber.Stop">
            <summary>
            Stop consuming actions.
            </summary>
        </member>
        <member name="M:ExitGames.Concurrency.Fibers.PoolFiber.Dispose">
            <summary>
            Stops the fiber.
            </summary>
        </member>
        <member name="P:ExitGames.Concurrency.Fibers.PoolFiber.NumSubscriptions">
            <summary>
            Number of subscriptions.
            </summary>
        </member>
        <member name="T:ExitGames.Concurrency.Fibers.FormFiber">
            <summary>
             Allows interaction with Windows Forms.  Transparently moves actions onto the Form's thread.
            </summary>
        </member>
        <member name="M:ExitGames.Concurrency.Fibers.FormFiber.#ctor(System.ComponentModel.ISynchronizeInvoke,ExitGames.Concurrency.Core.IExecutor)">
            <summary>
            Creates an instance.
            </summary>
        </member>
        <member name="T:ExitGames.Concurrency.Fibers.StubFiber">
            <summary>
            StubFiber does not use a backing thread or a thread pool for execution. Actions are added to pending
            lists for execution. These actions can be executed synchronously by the calling thread. This class
            is not thread safe and should not be used in production code. 
            
            The class is typically used for testing asynchronous code to make it completely synchronous and
            deterministic.
            </summary>
        </member>
        <member name="M:ExitGames.Concurrency.Fibers.StubFiber.Start">
            <summary>
            No Op
            </summary>
        </member>
        <member name="M:ExitGames.Concurrency.Fibers.StubFiber.Dispose">
            <summary>
            Clears all subscriptions, scheduled, and pending actions.
            </summary>
        </member>
        <member name="M:ExitGames.Concurrency.Fibers.StubFiber.Enqueue(System.Action)">
            <summary>
            Enqueue a single action.
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:ExitGames.Concurrency.Fibers.StubFiber.RegisterSubscription(System.IDisposable)">
            <summary>
             Register subscription to be unsubcribed from when the fiber is disposed.
            </summary>
            <param name="toAdd"></param>
        </member>
        <member name="M:ExitGames.Concurrency.Fibers.StubFiber.DeregisterSubscription(System.IDisposable)">
            <summary>
             Deregister a subscription.
            </summary>
            <param name="toRemove"></param>
            <returns></returns>
        </member>
        <member name="M:ExitGames.Concurrency.Fibers.StubFiber.Schedule(System.Action,System.Int64)">
            <summary>
            Adds a scheduled action to the list. 
            </summary>
            <param name="action"></param>
            <param name="firstInMs"></param>
            <returns></returns>
        </member>
        <member name="M:ExitGames.Concurrency.Fibers.StubFiber.ScheduleOnInterval(System.Action,System.Int64,System.Int64)">
            <summary>
            Adds scheduled action to list.
            </summary>
            <param name="action"></param>
            <param name="firstInMs"></param>
            <param name="regularInMs"></param>
            <returns></returns>
        </member>
        <member name="M:ExitGames.Concurrency.Fibers.StubFiber.ExecuteAllPendingUntilEmpty">
            <summary>
            Execute all actions in the pending list.  If any of the executed actions enqueue more actions, execute those as well.
            </summary>
        </member>
        <member name="M:ExitGames.Concurrency.Fibers.StubFiber.ExecuteAllPending">
            <summary>
            Execute all actions in the pending list.
            </summary>
        </member>
        <member name="M:ExitGames.Concurrency.Fibers.StubFiber.ExecuteAllScheduled">
            <summary>
            Execute all actions in the scheduled list.
            </summary>
        </member>
        <member name="P:ExitGames.Concurrency.Fibers.StubFiber.NumSubscriptions">
            <summary>
             Number of subscriptions.
            </summary>
        </member>
        <member name="P:ExitGames.Concurrency.Fibers.StubFiber.Subscriptions">
            <summary>
            All subscriptions.
            </summary>
        </member>
        <member name="P:ExitGames.Concurrency.Fibers.StubFiber.Pending">
            <summary>
            All pending actions.
            </summary>
        </member>
        <member name="P:ExitGames.Concurrency.Fibers.StubFiber.Scheduled">
            <summary>
            All scheduled actions.
            </summary>
        </member>
        <member name="P:ExitGames.Concurrency.Fibers.StubFiber.ExecutePendingImmediately">
            <summary>
            If true events will be executed immediately rather than added to the pending list.
            </summary>
        </member>
        <member name="T:ExitGames.Concurrency.Fibers.StubScheduledAction">
            <summary>
             For use only in testing.  Allows for controlled execution of scheduled actions on the StubFiber.
            </summary>
        </member>
        <member name="M:ExitGames.Concurrency.Fibers.StubScheduledAction.#ctor(System.Action,System.Int64,System.Int64,System.Collections.Generic.List{ExitGames.Concurrency.Fibers.StubScheduledAction})">
            <summary>
             Use for recurring scheduled actions.
            </summary>
            <param name="action"></param>
            <param name="firstIntervalInMs"></param>
            <param name="intervalInMs"></param>
            <param name="registry"></param>
        </member>
        <member name="M:ExitGames.Concurrency.Fibers.StubScheduledAction.#ctor(System.Action,System.Int64,System.Collections.Generic.List{ExitGames.Concurrency.Fibers.StubScheduledAction})">
            <summary>
             Use for scheduled actions that only occur once.
            </summary>
            <param name="action"></param>
            <param name="timeTilEnqueueInMs"></param>
            <param name="registry"></param>
        </member>
        <member name="M:ExitGames.Concurrency.Fibers.StubScheduledAction.Execute">
            <summary>
             Executes the scheduled action.  If the action is not recurring it will be removed from the registry.
            </summary>
        </member>
        <member name="M:ExitGames.Concurrency.Fibers.StubScheduledAction.Dispose">
            <summary>
            Cancels scheduled action.  Removes scheduled action from registry.
            </summary>
        </member>
        <member name="P:ExitGames.Concurrency.Fibers.StubScheduledAction.FirstIntervalInMs">
            <summary>
             First interval in milliseconds.
            </summary>
        </member>
        <member name="P:ExitGames.Concurrency.Fibers.StubScheduledAction.IntervalInMs">
            <summary>
             Recurring interval in milliseconds.
            </summary>
        </member>
        <member name="T:ExitGames.Concurrency.Fibers.ThreadFiber">
            <summary>
            Fiber implementation backed by a dedicated thread.
            <see cref="T:ExitGames.Concurrency.Fibers.IFiber"/>
            </summary>
        </member>
        <member name="M:ExitGames.Concurrency.Fibers.ThreadFiber.#ctor">
            <summary>
            Create a thread fiber with the default queue.
            </summary>
        </member>
        <member name="M:ExitGames.Concurrency.Fibers.ThreadFiber.#ctor(ExitGames.Concurrency.Core.IQueue)">
            <summary>
            Creates a thread fiber with a specified queue.
            </summary>
            <param name="queue"></param>
        </member>
        <member name="M:ExitGames.Concurrency.Fibers.ThreadFiber.#ctor(System.String)">
            <summary>
            Creates a thread fiber with a specified name.
            </summary>
            /// <param name="threadName"></param>
        </member>
        <member name="M:ExitGames.Concurrency.Fibers.ThreadFiber.#ctor(ExitGames.Concurrency.Core.IQueue,System.String,System.Boolean,System.Threading.ThreadPriority)">
            <summary>
            Creates a thread fiber.
            </summary>
            <param name="queue"></param>
            <param name="threadName"></param>
            <param name="isBackground"></param>
            <param name="priority"></param>
        </member>
        <member name="M:ExitGames.Concurrency.Fibers.ThreadFiber.Enqueue(System.Action)">
            <summary>
            Enqueue a single action.
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:ExitGames.Concurrency.Fibers.ThreadFiber.RegisterSubscription(System.IDisposable)">
            <summary>
             Register subscription to be unsubcribed from when the fiber is disposed.
            </summary>
            <param name="toAdd"></param>
        </member>
        <member name="M:ExitGames.Concurrency.Fibers.ThreadFiber.DeregisterSubscription(System.IDisposable)">
            <summary>
             Deregister a subscription.
            </summary>
            <param name="toRemove"></param>
            <returns></returns>
        </member>
        <member name="M:ExitGames.Concurrency.Fibers.ThreadFiber.Schedule(System.Action,System.Int64)">
            <summary>
            <see cref="M:ExitGames.Concurrency.Core.IScheduler.Schedule(System.Action,System.Int64)"/>
            </summary>
            <param name="action"></param>
            <param name="firstInMs"></param>
            <returns></returns>
        </member>
        <member name="M:ExitGames.Concurrency.Fibers.ThreadFiber.ScheduleOnInterval(System.Action,System.Int64,System.Int64)">
            <summary>
            <see cref="M:ExitGames.Concurrency.Core.IScheduler.ScheduleOnInterval(System.Action,System.Int64,System.Int64)"/>
            </summary>
            <param name="action"></param>
            <param name="firstInMs"></param>
            <param name="regularInMs"></param>
        </member>
        <member name="M:ExitGames.Concurrency.Fibers.ThreadFiber.Start">
            <summary>
            <see cref="M:ExitGames.Concurrency.Fibers.IFiber.Start"/>
            </summary>
        </member>
        <member name="M:ExitGames.Concurrency.Fibers.ThreadFiber.Join">
            <summary>
             Calls join on the thread.
            </summary>
        </member>
        <member name="M:ExitGames.Concurrency.Fibers.ThreadFiber.Dispose">
            <summary>
            Stops the thread.
            </summary>
        </member>
        <member name="P:ExitGames.Concurrency.Fibers.ThreadFiber.Thread">
            <summary>
            <see cref="T:ExitGames.Concurrency.Fibers.IFiber"/>
            </summary>
        </member>
        <member name="P:ExitGames.Concurrency.Fibers.ThreadFiber.NumSubscriptions">
            <summary>
             Number of subscriptions.
            </summary>
        </member>
        <member name="T:ExitGames.Configuration.ConfigurationException">
            <summary>
              A configuration exception.
            </summary>
        </member>
        <member name="M:ExitGames.Configuration.ConfigurationException.#ctor(System.String)">
            <summary>
              Initializes a new instance of the <see cref="T:ExitGames.Configuration.ConfigurationException"/> class.
            </summary>
            <param name="msg">
              The message.
            </param>
        </member>
        <member name="T:ExitGames.Configuration.ProfileReader">
            <summary>
              This class reads a configuration section for a profile name and merges it with profile section 'Common'.
            </summary>
        </member>
        <member name="T:ExitGames.Configuration.NameValueCollectionReader">
            <summary>
              Reads values from a <see cref="T:System.Collections.Specialized.NameValueCollection"/>.
            </summary>
        </member>
        <member name="F:ExitGames.Configuration.NameValueCollectionReader.collection">
            <summary>
              The name value collection.
            </summary>
        </member>
        <member name="M:ExitGames.Configuration.NameValueCollectionReader.#ctor(System.Collections.Specialized.NameValueCollection)">
            <summary>
              Initializes a new instance of the <see cref="T:ExitGames.Configuration.NameValueCollectionReader"/> class.
            </summary>
            <param name="collection">
              The collection.
            </param>
        </member>
        <member name="M:ExitGames.Configuration.NameValueCollectionReader.GetOptionalValue(System.String,System.String)">
            <summary>
              Gets an optional string value.
            </summary>
            <param name = "key">
              The key.
            </param>
            <param name = "defaultValue">
              The default value.
            </param>
            <returns>
              If found the value; otherwise the <paramref name = "defaultValue" />.
            </returns>
        </member>
        <member name="M:ExitGames.Configuration.NameValueCollectionReader.GetOptionalValueBoolean(System.String,System.Boolean)">
            <summary>
              Gets an optional boolean value.
            </summary>
            <param name = "key">
              The key.
            </param>
            <param name = "defaultValue">
              The default value.
            </param>
            <returns>
              If found the value; otherwise the <paramref name = "defaultValue" />.
            </returns>
        </member>
        <member name="M:ExitGames.Configuration.NameValueCollectionReader.GetOptionalValueByte(System.String,System.Byte)">
            <summary>
              Gets an optional byte value.
            </summary>
            <param name = "key">
              The key.
            </param>
            <param name = "defaultValue">
              The default value.
            </param>
            <returns>
              If found the value; otherwise the <paramref name = "defaultValue" />.
            </returns>
        </member>
        <member name="M:ExitGames.Configuration.NameValueCollectionReader.GetOptionalValueInteger(System.String,System.Int32)">
            <summary>
              Gets an optional integer value.
            </summary>
            <param name = "key">
              The key.
            </param>
            <param name = "defaultValue">
              The default value.
            </param>
            <returns>
              If found the value; otherwise the <paramref name = "defaultValue" />.
            </returns>
        </member>
        <member name="M:ExitGames.Configuration.NameValueCollectionReader.GetValue(System.String)">
            <summary>
              Gets a mandatory string value.
            </summary>
            <param name="key">
              The key.
            </param>
            <returns>
              The value.
            </returns>
            <exception cref="T:ExitGames.Configuration.ConfigurationException">
              Key missing in collection.
            </exception>
        </member>
        <member name="M:ExitGames.Configuration.NameValueCollectionReader.GetValueBoolean(System.String)">
            <summary>
              Gets a mandatory boolean value.
            </summary>
            <param name="key">
              The key.
            </param>
            <returns>
              The value.
            </returns>
            <exception cref="T:ExitGames.Configuration.ConfigurationException">
              Key missing in collection.
            </exception>
        </member>
        <member name="M:ExitGames.Configuration.NameValueCollectionReader.GetValueByte(System.String)">
            <summary>
              Gets a mandatory byte value.
            </summary>
            <param name="key">
              The key.
            </param>
            <returns>
              The value.
            </returns>
            <exception cref="T:ExitGames.Configuration.ConfigurationException">
              Key missing in collection.
            </exception>
        </member>
        <member name="M:ExitGames.Configuration.NameValueCollectionReader.GetValueInteger(System.String)">
            <summary>
              Gets a mandatory integer value.
            </summary>
            <param name="key">
              The key.
            </param>
            <returns>
              The value.
            </returns>
            <exception cref="T:ExitGames.Configuration.ConfigurationException">
              Key missing in collection.
            </exception>
        </member>
        <member name="M:ExitGames.Configuration.NameValueCollectionReader.TryGetValue(System.String,System.String@)">
            <summary>
              Tries to find a string value.
            </summary>
            <param name = "key">
              The key.
            </param>
            <param name = "value">
              The result value.
            </param>
            <returns>
              True on succes, otherwise false.
            </returns>
        </member>
        <member name="M:ExitGames.Configuration.NameValueCollectionReader.TryGetValueBoolean(System.String,System.Boolean@)">
            <summary>
              Tries to find a boolean value.
            </summary>
            <param name="key">
              The key.
            </param>
            <param name="value">
              The result value.
            </param>
            <returns>
              True on succes, otherwise false.
            </returns>
            <exception cref="T:ExitGames.Configuration.ConfigurationException">
              Value parse error.
            </exception>
        </member>
        <member name="M:ExitGames.Configuration.NameValueCollectionReader.TryGetValueByte(System.String,System.Byte@)">
            <summary>
              Tries to find a byte value.
            </summary>
            <param name="key">
              The key.
            </param>
            <param name="value">
              The result value.
            </param>
            <returns>
              True on succes, otherwise false.
            </returns>
            <exception cref="T:ExitGames.Configuration.ConfigurationException">
              Value parse error.
            </exception>
        </member>
        <member name="M:ExitGames.Configuration.NameValueCollectionReader.TryGetValueInteger(System.String,System.Int32@)">
            <summary>
              Tries to find an integer value.
            </summary>
            <param name="key">
              The key.
            </param>
            <param name="value">
              The result value.
            </param>
            <returns>
              True on succes, otherwise false.
            </returns>
            <exception cref="T:ExitGames.Configuration.ConfigurationException">
              Value parse error.
            </exception>
        </member>
        <member name="P:ExitGames.Configuration.NameValueCollectionReader.Collection">
            <summary>
              Gets the collection.
            </summary>
        </member>
        <member name="F:ExitGames.Configuration.ProfileReader.log">
            <summary>
              The logger.
            </summary>
        </member>
        <member name="M:ExitGames.Configuration.ProfileReader.#ctor(System.Collections.Specialized.NameValueCollection)">
            <summary>
              Initializes a new instance of the <see cref="T:ExitGames.Configuration.ProfileReader"/> class.
            </summary>
            <param name="settings">
              The settings.
            </param>
        </member>
        <member name="M:ExitGames.Configuration.ProfileReader.Create(System.String,System.String)">
            <summary>
              Creates a new instance from the given pofile name.
            </summary>
            <param name="profile">
              The profile.
            </param>
            <param name="profilesSection">
              The profiles section.
            </param>
            <returns>
              A new instance of <see cref="T:ExitGames.Configuration.ProfileReader"/>.
            </returns>
            <exception cref="T:ExitGames.Configuration.ConfigurationException">
              Profile not found.
            </exception>
        </member>
        <member name="M:ExitGames.Configuration.ProfileReader.ReadCurrentProfileName">
            <summary>
              Reads the profile name from AppSettings.Profile.
            </summary>
            <returns>
              The profile name.
            </returns>
            <exception cref="T:ExitGames.Configuration.ConfigurationException">
              Key 'Profile' missing in AppSettings.
            </exception>
        </member>
        <member name="P:ExitGames.Diagnostics.Configuration.CounterSampleSenderSettings.Endpoint">
            <summary>
              Gets Endpoint.
            </summary>
        </member>
        <member name="P:ExitGames.Diagnostics.Configuration.CounterSampleSenderSettings.Protocol">
            <summary>
              Gets or sets the application level protocol.
            </summary>
        </member>
        <member name="P:ExitGames.Diagnostics.Configuration.CounterSampleSenderSettings.SenderId">
            <summary>
            Gets the id of the sender which will be send together with the counter data.
            </summary>
        </member>
        <member name="P:ExitGames.Diagnostics.Configuration.CounterSampleSenderSettings.InitialDelay">
            <summary>
              Period of time to delay first data publishing.
            </summary>
        </member>
        <member name="P:ExitGames.Diagnostics.Configuration.CounterSampleSenderSettings.SendInterval">
            <summary>
              The publish interval in seconds.
            </summary>
        </member>
        <member name="P:ExitGames.Diagnostics.Configuration.CounterSampleSenderSettings.MaxQueueLength">
            <summary>
            Gets a value indicating how many packages should be enqueued for republishing if an error occurred during publishing.
            The default value is 120.
            </summary>
        </member>
        <member name="P:ExitGames.Diagnostics.Configuration.CounterSampleSenderSettings.MaxRetryCount">
            <summary>
            Gets a value indicating how many error can occur during publishing before the counter publishers stops publishing.
            If a value equal or less than than zero is specified the counter publisher will never stop if an error occurred.
            The default value is -1;
            </summary>
        </member>
        <member name="P:ExitGames.Diagnostics.Configuration.PacketWriterSettings.MinPayloadSize">
            <summary>
              Maximum safe (unfragmented) packet payload size.
              Maximum safe UDP payload is = 512 bytes, given minimum RFC internet MTU 576 = 20b/ipv4 + 8b/udp + 512b/data.
            
              Be careful to keep the total length of the payload within your network's MTU. 
              There is no single good value to use, but here are some guidelines for common network scenarios:
              Fast Ethernet (1432) - This is most likely for Intranets.
              Gigabit Ethernet (8932) - Jumbo frames can make use of this feature much more efficient.
              Commodity Internet (512) - If you are routing over the internet a value in this range will be reasonable. 
                                         You might be able to go higher, but you are at the mercy of all the hops in your route.
            </summary>
        </member>
        <member name="P:ExitGames.Diagnostics.Configuration.PacketWriterSettings.MaxPayloadSize">
            <summary>
              Maximum packet payload size.
              Maximum safe UDP payload is = 512 bytes, given minimum RFC internet MTU 576 = 20b/ipv4 + 8b/udp + 512b/data.
              The correct maximum UDP message size is 65507, as determined by the following formula: 0xffff - 
              (sizeof(IP Header) + sizeof(UDP Header)) = 65535-(20+8) = 65507.
            </summary>
        </member>
        <member name="P:ExitGames.Diagnostics.Configuration.InfluxDB090TextWriterSettings.RewriteKeys">
            <summary>
              Do rewriting of keys provided by sampler to keep them distinct to tags part of the path.
            </summary>
        </member>
        <member name="P:ExitGames.Diagnostics.Configuration.InfluxDB090TextWriterSettings.Separator">
            <summary>
              Separator used by InfluxDB instead of default DOT(.).
            </summary>
        </member>
        <member name="F:ExitGames.Diagnostics.Configuration.ProtocolType.PhotonBinary">
            <summary>
            (default) The Photon old binary protocol over PGM, UDP, HTTP.
            </summary>
        </member>
        <member name="F:ExitGames.Diagnostics.Configuration.ProtocolType.InfluxDBJson">
            <summary>
            The InfluxDB JSON protocol over TCP, UDP, HTTP.
            metric_path value timestamp\n
            aaa.bbb.ccc
            </summary>
        </member>
        <member name="F:ExitGames.Diagnostics.Configuration.ProtocolType.InfluxDB090GraphiteText">
            <summary>
            The InfluxDB Graphite protocol over TCP, UDP, HTTP.
            The InfluxDB awaits keys in following format: key.value.key.value.name or name.
            i.e. region.us-west.hostname.server01.cpu -> tags -> region: us-west, hostname: server01, point name -> cpu
            use senderId = "CloudType.{#CloudType#}.PrivateCloud.{#PrivateCloud#}.Region.{#Region#}.Cluster.{#Cluster#}.Machine.{0}"
            </summary>
        </member>
        <member name="F:ExitGames.Diagnostics.Configuration.ProtocolType.GraphiteText">
            <summary>
            The Graphite / Carbon text protocol over TCP, UDP.
            </summary>
        </member>
        <member name="F:ExitGames.Diagnostics.Configuration.ProtocolType.CollectDBinary">
            <summary>
            The CollectD binary protocol over TCP, UDP.
            </summary>
        </member>
        <member name="F:ExitGames.Diagnostics.Configuration.ProtocolType.StatsDText">
            <summary>
            The StatsD binary protocol over TCP, UDP.
            </summary>
        </member>
        <member name="F:ExitGames.Diagnostics.Configuration.ProtocolType.AmazonCloudWatch">
            <summary>
            The Amazon CloudWatch protocol over HTTP.
            </summary>
        </member>
        <member name="F:ExitGames.Diagnostics.Configuration.TransportType.Udp">
            <summary>
            The UDP protocol.
            </summary>
        </member>
        <member name="F:ExitGames.Diagnostics.Configuration.TransportType.Http">
            <summary>
            The Http protocol.
            </summary>
        </member>
        <member name="F:ExitGames.Diagnostics.Configuration.TransportType.Https">
            <summary>
            The Https protocol.
            </summary>
        </member>
        <member name="F:ExitGames.Diagnostics.Configuration.TransportType.Pgm">
            <summary>
            The Pragmatic General Multicast protocol.
            </summary>
        </member>
        <member name="T:ExitGames.Diagnostics.Counter.AverageCounter">
            <summary>
              The average counter.
            </summary>
            <remarks>
              <see cref="M:ExitGames.Diagnostics.Counter.AverageCounter.GetNextValue"/> calculates the average counter since the previous <see cref="M:ExitGames.Diagnostics.Counter.AverageCounter.GetNextValue"/> call.
            </remarks>
        </member>
        <member name="T:ExitGames.Diagnostics.Counter.CounterBase">
            <summary>
              The base class for counters.
            </summary>
        </member>
        <member name="F:ExitGames.Diagnostics.Counter.CounterBase.log">
            <summary>
              Provides a <see cref="T:ExitGames.Logging.ILogger"/> instance used to log messages into the logging framework.
            </summary>
        </member>
        <member name="M:ExitGames.Diagnostics.Counter.CounterBase.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:ExitGames.Diagnostics.Counter.CounterBase"/> class.
            </summary>
        </member>
        <member name="M:ExitGames.Diagnostics.Counter.CounterBase.#ctor(System.String)">
            <summary>
              Initializes a new instance of the <see cref="T:ExitGames.Diagnostics.Counter.CounterBase"/> class.
            </summary>
            <param name="name">
              The counter name.
            </param>
        </member>
        <member name="M:ExitGames.Diagnostics.Counter.CounterBase.GetNextSample">
            <summary>
              Gets the next sample.
            </summary>
            <returns>
              The next sample.
            </returns>
        </member>
        <member name="M:ExitGames.Diagnostics.Counter.CounterBase.Decrement">
            <summary>
              Decrements the counter.
            </summary>
            <returns>
              The decremented value.
            </returns>
        </member>
        <member name="M:ExitGames.Diagnostics.Counter.CounterBase.GetNextValue">
            <summary>
              Gets the next value.
            </summary>
            <returns>
              The next value.
            </returns>
        </member>
        <member name="M:ExitGames.Diagnostics.Counter.CounterBase.Increment">
            <summary>
              Increments the counter.
            </summary>
            <returns>
              The incremented counter.
            </returns>
        </member>
        <member name="M:ExitGames.Diagnostics.Counter.CounterBase.IncrementBy(System.Int64)">
            <summary>
              Increments the counter by a value.
            </summary>
            <param name = "value">
              The value.
            </param>
            <returns>
              The incremented counter.
            </returns>
        </member>
        <member name="P:ExitGames.Diagnostics.Counter.CounterBase.CounterType">
            <summary>
              Gets the type of the counter.
            </summary>
            <value>The type of the counter.</value>
        </member>
        <member name="P:ExitGames.Diagnostics.Counter.CounterBase.Name">
            <summary>
              Gets Name.
            </summary>
        </member>
        <member name="F:ExitGames.Diagnostics.Counter.AverageCounter.sharedCounter">
            <summary>
              _shared counter.
            </summary>
        </member>
        <member name="F:ExitGames.Diagnostics.Counter.AverageCounter.sharedCounterBase">
            <summary>
              _shared counter base.
            </summary>
        </member>
        <member name="F:ExitGames.Diagnostics.Counter.AverageCounter.oldSample">
            <summary>
              _old sample.
            </summary>
        </member>
        <member name="M:ExitGames.Diagnostics.Counter.AverageCounter.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:ExitGames.Diagnostics.Counter.AverageCounter"/> class.
            </summary>
        </member>
        <member name="M:ExitGames.Diagnostics.Counter.AverageCounter.#ctor(System.String)">
            <summary>
              Initializes a new instance of the <see cref="T:ExitGames.Diagnostics.Counter.AverageCounter"/> class.
            </summary>
            <param name="name">
              The counter name.
            </param>
        </member>
        <member name="M:ExitGames.Diagnostics.Counter.AverageCounter.Decrement">
            <summary>
              Decrements the counter.
            </summary>
            <returns>
              The decremented counter.
            </returns>
        </member>
        <member name="M:ExitGames.Diagnostics.Counter.AverageCounter.GetNextSample">
            <summary>
              Gets the next sample.
            </summary>
            <remarks>
              This method is not thread safe.
            </remarks>
            <returns>A new <see cref="T:ExitGames.Diagnostics.Counter.RawCounterSample"/>.</returns>
        </member>
        <member name="M:ExitGames.Diagnostics.Counter.AverageCounter.GetNextValue">
            <summary>
              Returns the average count since the last <see cref="M:ExitGames.Diagnostics.Counter.AverageCounter.GetNextValue"/> call.
            </summary>
            <remarks>
              This method is NOT thread safe.
            </remarks>
            <returns>
              The new average value.
            </returns>
        </member>
        <member name="M:ExitGames.Diagnostics.Counter.AverageCounter.Increment">
            <summary>
              Increments the counter.
            </summary>
            <returns>
              The incremented counter.
            </returns>
        </member>
        <member name="M:ExitGames.Diagnostics.Counter.AverageCounter.IncrementBy(System.Int64)">
            <summary>
              Increments the counter by a value.
            </summary>
            <param name = "value">
              The value.
            </param>
            <returns>
              The incremented counter.
            </returns>
        </member>
        <member name="P:ExitGames.Diagnostics.Counter.AverageCounter.CounterType">
            <summary>
              Gets the type of the counter.
            </summary>
            <value>The type of the counter.</value>
        </member>
        <member name="T:ExitGames.Diagnostics.Counter.RawCounterSample">
            <summary>
            Defines a structure that holds the raw data for a performance counter.
            </summary>
        </member>
        <member name="F:ExitGames.Diagnostics.Counter.RawCounterSample.BaseValue">
            <summary>
            Gets an optional, base raw value for the counter.
            </summary>
        </member>
        <member name="F:ExitGames.Diagnostics.Counter.RawCounterSample.TimeStamp">
            <summary>
            Gets the raw time stamp.
            </summary>
        </member>
        <member name="F:ExitGames.Diagnostics.Counter.RawCounterSample.Value">
            <summary>
            Gets the raw value of the counter.
            </summary>
        </member>
        <member name="M:ExitGames.Diagnostics.Counter.RawCounterSample.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:ExitGames.Diagnostics.Counter.RawCounterSample"/> struct.
            </summary>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="M:ExitGames.Diagnostics.Counter.RawCounterSample.#ctor(System.Int64,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:ExitGames.Diagnostics.Counter.RawCounterSample"/> struct.
            </summary>
            <param name="value">
            The value.
            </param>
            <param name="baseValue">
            The base value.
            </param>
        </member>
        <member name="M:ExitGames.Diagnostics.Counter.RawCounterSample.#ctor(System.Int64,System.Int64,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:ExitGames.Diagnostics.Counter.RawCounterSample"/> struct.
            </summary>
            <param name="value">
            The value.
            </param>
            <param name="baseValue">
            The base value.
            </param>
            <param name="timeStamp">
            The time stamp.
            </param>
        </member>
        <member name="T:ExitGames.Diagnostics.Monitoring.CounterSampleSenderBase">
            <summary>
              Collects data from <see cref="T:ExitGames.Diagnostics.Counter.ICounter"/> instances and publishes the data in a specified 
              interval using an <see cref="T:ExitGames.Diagnostics.Monitoring.Protocol.ICounterSampleWriter"/> implementation.
            </summary>
        </member>
        <member name="F:ExitGames.Diagnostics.Monitoring.CounterSampleSenderBase.SenderId">
            <summary>
              The local sender id.
            </summary>
        </member>
        <member name="F:ExitGames.Diagnostics.Monitoring.CounterSampleSenderBase.InitialDelay">
            <summary>
              Time period to start publishing data since expired.
            </summary>
        </member>
        <member name="F:ExitGames.Diagnostics.Monitoring.CounterSampleSenderBase.SendInterval">
            <summary>
              The publish interval in seconds.
            </summary>
        </member>
        <member name="F:ExitGames.Diagnostics.Monitoring.CounterSampleSenderBase.MaxRetryCount">
            <summary>
            Gets a value indicating how many error can occur during publishing before the counter publishers stops publishing.
            If a value equal or less than than zero is specified the counter publisher will never stop if an error occurred.
            The default value is -1;
            </summary>
        </member>
        <member name="F:ExitGames.Diagnostics.Monitoring.CounterSampleSenderBase.Writer">
            <summary>
              The used <see cref="T:ExitGames.Diagnostics.Monitoring.Protocol.ICounterSampleWriter"/> to write data out.
            </summary>
        </member>
        <member name="F:ExitGames.Diagnostics.Monitoring.CounterSampleSenderBase.Log">
            <summary>
              Provides a <see cref="T:ExitGames.Logging.ILogger"/> instance used to log messages into the logging framework.
            </summary>
        </member>
        <member name="F:ExitGames.Diagnostics.Monitoring.CounterSampleSenderBase.Fiber">
            <summary>
              The fiber for async sending.
            </summary>
        </member>
        <member name="F:ExitGames.Diagnostics.Monitoring.CounterSampleSenderBase.Samples">
            <summary>
              A dictionary that stores a <see cref="T:ExitGames.Diagnostics.Monitoring.CounterSampleCollection"/> per counter name.
            </summary>
        </member>
        <member name="F:ExitGames.Diagnostics.Monitoring.CounterSampleSenderBase.syncRoot">
            <summary>
              The sync root.
            </summary>
            TODO: need???
        </member>
        <member name="F:ExitGames.Diagnostics.Monitoring.CounterSampleSenderBase.timerControl">
            <summary>
              The current timer.
            </summary>
        </member>
        <member name="M:ExitGames.Diagnostics.Monitoring.CounterSampleSenderBase.#ctor(System.String,System.Int32,System.Int32,System.Int32,ExitGames.Diagnostics.Monitoring.Protocol.ICounterSampleWriter)">
            <summary>
              Initializes a new instance of the <see cref="T:ExitGames.Diagnostics.Monitoring.CounterSampleSender"/> class.
            </summary>
            <param name="senderId">The sender id.</param>
            <param name="initialDelay">The publish after first seconds pass.</param>
            <param name="sendInterval">The publish interval.</param>
            <param name="maxRetryCount">Max retry count of publishing data before full stop.</param>
            <param name="writer">The data writer.</param>
        </member>
        <member name="M:ExitGames.Diagnostics.Monitoring.CounterSampleSenderBase.Finalize">
            <summary>
              Finalizes an instance of the <see cref="T:ExitGames.Diagnostics.Monitoring.CounterSampleSender"/> class.
            </summary>
        </member>
        <member name="M:ExitGames.Diagnostics.Monitoring.CounterSampleSenderBase.Start">
            <summary>
              Starts this instance to collect and publish counter data.
            </summary>
        </member>
        <member name="M:ExitGames.Diagnostics.Monitoring.CounterSampleSenderBase.Stop">
            <summary>
              Stops this instance.
            </summary>
        </member>
        <member name="M:ExitGames.Diagnostics.Monitoring.CounterSampleSenderBase.SubscribeToChannel(ExitGames.Concurrency.Channels.Channel{ExitGames.Diagnostics.Monitoring.CounterSampleMessage})">
            <summary>
              Subscribes the sender to a channel of <see cref="T:ExitGames.Diagnostics.Monitoring.CounterSampleMessage"/>s.
            </summary>
            <param name="channel">
              The channel.
            </param>
            <returns>
              A subscription.
            </returns>
        </member>
        <member name="M:ExitGames.Diagnostics.Monitoring.CounterSampleSenderBase.Dispose">
            <summary>
              Disposes this instance.
            </summary>
        </member>
        <member name="M:ExitGames.Diagnostics.Monitoring.CounterSampleSenderBase.Dispose(System.Boolean)">
            <summary>
              Stops the sender.
            </summary>
            <param name = "disposing">
              The disposing.
            </param>
        </member>
        <member name="M:ExitGames.Diagnostics.Monitoring.CounterSampleSenderBase.OnNewSample(ExitGames.Diagnostics.Monitoring.CounterSampleMessage)">
            <summary>
              Callback for channel subscriptions.
            </summary>
            <param name = "m">
              The counter sample message.
            </param>
        </member>
        <member name="M:ExitGames.Diagnostics.Monitoring.CounterSampleSenderBase.Publish">
            <summary>
              Sends samples to the socket sender.
            </summary>
        </member>
        <member name="M:ExitGames.Diagnostics.Monitoring.CounterSampleSenderBase.RaiseErrorEvent(System.Exception)">
            <summary>
              Invokes the <see cref="E:ExitGames.Diagnostics.Monitoring.CounterSampleSenderBase.OnError"/> event.
            </summary>
            <param name="exception">
              The exception.
            </param>
        </member>
        <member name="M:ExitGames.Diagnostics.Monitoring.CounterSampleSenderBase.RaiseOnDisconnetedEvent">
            <summary>
              Invokes the <see cref="E:ExitGames.Diagnostics.Monitoring.CounterSampleSenderBase.OnDisconnected"/> event.
            </summary>
        </member>
        <member name="E:ExitGames.Diagnostics.Monitoring.CounterSampleSenderBase.OnError">
            <summary>
              Fired when an unhandled Exception occurs during publishing.
              The instance stops publishing data if that happens.
            </summary>
        </member>
        <member name="E:ExitGames.Diagnostics.Monitoring.CounterSampleSenderBase.OnDisconnected">
            <summary>
            Occurs when the underling <see cref="T:ExitGames.Net.Sockets.ISocketSender"/> is disconnected.
            </summary>
        </member>
        <member name="P:ExitGames.Diagnostics.Monitoring.CounterSampleSenderBase.ErrorCount">
            <summary>
            Gets the number of errors that occurred since the last successful publish.
            The counter publisher tries to publish the data again until the <see cref="F:ExitGames.Diagnostics.Monitoring.CounterSampleSenderBase.MaxRetryCount"/> is reached.
            TODO: MT insecure
            </summary>
        </member>
        <member name="P:ExitGames.Diagnostics.Monitoring.CounterSampleSenderBase.State">
            <summary>
              0 = stopped, running > 0.
            </summary>
        </member>
        <member name="P:ExitGames.Diagnostics.Monitoring.CounterSampleSenderBase.SampleCount">
            <summary>
              The current sample count.
              TODO: MT insecure
            </summary>
        </member>
        <member name="T:ExitGames.Diagnostics.Monitoring.CounterSampleSender">
            <summary>
              Collects data from <see cref="T:ExitGames.Diagnostics.Counter.ICounter"/> instances and publishes the data in a specified 
              interval using an <see cref="T:ExitGames.Net.Sockets.ISocketSender"/> implementation.
            </summary>
        </member>
        <member name="M:ExitGames.Diagnostics.Monitoring.CounterSampleSender.#ctor(System.String,System.Int32,System.Int32,System.Int32,ExitGames.Diagnostics.Monitoring.Protocol.ICounterSampleWriter)">
            <summary>
              Initializes a new instance of the <see cref="T:ExitGames.Diagnostics.Monitoring.CounterSampleSender"/> class.
            </summary>
            <param name="senderId">The sender id.</param>
            <param name="initialDelay">The publish after first seconds pass.</param>
            <param name="sendInterval">The publish interval.</param>
            /// <param name="maxRetryCount">Max retry count of publishing data before full stop.</param>
            <param name="writer">The data writer.</param>
        </member>
        <member name="M:ExitGames.Diagnostics.Monitoring.CounterSampleSender.#ctor(ExitGames.Diagnostics.Configuration.CounterSampleSenderSettings)">
            <summary>
                Initializes a new instance of the <see cref="T:ExitGames.Diagnostics.Monitoring.CounterSampleSender"/> class.
            </summary>
            <param name="s">The configuration.</param>
        </member>
        <member name="T:ExitGames.Diagnostics.Counter.CounterSample">
            <summary>
              Represents the value of a counter calculated at a specific time.
            </summary>
        </member>
        <member name="F:ExitGames.Diagnostics.Counter.CounterSample.Timestamp">
            <summary>
              Gets the timestamp of the counter sample.
            </summary>
        </member>
        <member name="F:ExitGames.Diagnostics.Counter.CounterSample.Value">
            <summary>
              Gets the calculated value of the counter.
            </summary>
        </member>
        <member name="M:ExitGames.Diagnostics.Counter.CounterSample.#ctor(System.Single)">
            <summary>
              Initializes a new instance of the <see cref="T:ExitGames.Diagnostics.Counter.CounterSample"/> struct. 
              The <see cref="F:ExitGames.Diagnostics.Counter.CounterSample.Timestamp"/> property is set to <see cref="P:System.DateTime.UtcNow"/>.
            </summary>
            <param name="value">
              The calculated value of the counter.
            </param>
        </member>
        <member name="M:ExitGames.Diagnostics.Counter.CounterSample.#ctor(System.DateTime,System.Single)">
            <summary>
              Initializes a new instance of the <see cref="T:ExitGames.Diagnostics.Counter.CounterSample"/> struct.
            </summary>
            <param name="timestamp">
              The timestamp of the counter sample.
            </param>
            <param name="value">
              The calculated value of the counter.
            </param>
        </member>
        <member name="T:ExitGames.Diagnostics.Monitoring.CounterSampleCollection">
            <summary>
              A collectin of <see cref="T:ExitGames.Diagnostics.Counter.CounterSample"/>s.
            </summary>
        </member>
        <member name="M:ExitGames.Diagnostics.Monitoring.CounterSampleCollection.#ctor(System.String)">
            <summary>
              Initializes a new instance of the <see cref="T:ExitGames.Diagnostics.Monitoring.CounterSampleCollection"/> class.
            </summary>
            <param name="name">
              The name.
            </param>
        </member>
        <member name="M:ExitGames.Diagnostics.Monitoring.CounterSampleCollection.Deserialize(System.IO.Stream)">
            <summary>
              Deserializes a stream of <see cref="T:ExitGames.Diagnostics.Counter.CounterSample"/>s.
            </summary>
            <param name="stream">
              The stream.
            </param>
            <returns>
              A new <see cref="T:ExitGames.Diagnostics.Monitoring.CounterSampleCollection"/>.
            </returns>
        </member>
        <member name="M:ExitGames.Diagnostics.Monitoring.CounterSampleCollection.Deserialize(System.IO.BinaryReader)">
            <summary>
              Deserializes a stream of <see cref="T:ExitGames.Diagnostics.Counter.CounterSample"/>s.
            </summary>
            <param name="binaryReader">
              The reader wrapping a stream.
            </param>
            <returns>
              A new <see cref="T:ExitGames.Diagnostics.Monitoring.CounterSampleCollection"/>.
            </returns>
        </member>
        <member name="M:ExitGames.Diagnostics.Monitoring.CounterSampleCollection.Serialize(System.IO.Stream)">
            <summary>
              Serializes the <see cref="T:ExitGames.Diagnostics.Counter.CounterSample"/>s to a stream.
            </summary>
            <param name="stream">
              The stream.
            </param>
        </member>
        <member name="M:ExitGames.Diagnostics.Monitoring.CounterSampleCollection.Serialize(System.IO.BinaryWriter)">
            <summary>
              Serializes the <see cref="T:ExitGames.Diagnostics.Counter.CounterSample"/>s to a stream with a <see cref="T:System.IO.BinaryWriter"/>.
            </summary>
            <param name="binaryWriter">
              The binary writer wrapping a stream.
            </param>
        </member>
        <member name="P:ExitGames.Diagnostics.Monitoring.CounterSampleCollection.CounterName">
            <summary>
              Gets the counter name.
            </summary>
        </member>
        <member name="T:ExitGames.Diagnostics.Monitoring.CounterSampleMessage">
            <summary>
            A message used by the <see cref="T:ExitGames.Diagnostics.Monitoring.CounterSamplePublisher"/>.
            </summary>
        </member>
        <member name="F:ExitGames.Diagnostics.Monitoring.CounterSampleMessage.CounterName">
            <summary>
            Gets the name of the counter.
            </summary>
        </member>
        <member name="F:ExitGames.Diagnostics.Monitoring.CounterSampleMessage.CounterSample">
            <summary>
            Gets the <see cref="F:ExitGames.Diagnostics.Monitoring.CounterSampleMessage.CounterSample"/>.
            </summary>
        </member>
        <member name="M:ExitGames.Diagnostics.Monitoring.CounterSampleMessage.#ctor(System.String,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ExitGames.Diagnostics.Monitoring.CounterSampleMessage"/> class.
            </summary>
            <param name="counterName">The name of the counter.</param>
            <param name="value">The calculated value of the counter.</param>
        </member>
        <member name="M:ExitGames.Diagnostics.Monitoring.CounterSampleMessage.#ctor(System.String,System.DateTime,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ExitGames.Diagnostics.Monitoring.CounterSampleMessage"/> class.
            </summary>
            <param name="counterName">The name of the counter.</param>
            <param name="timestamp">The timestamp when the value has been taken from the counter..</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:ExitGames.Diagnostics.Monitoring.CounterSampleMessage.#ctor(System.String,ExitGames.Diagnostics.Counter.CounterSample)">
            <summary>
            Initializes a new instance of the <see cref="T:ExitGames.Diagnostics.Monitoring.CounterSampleMessage"/> class.
            </summary>
            <param name="counterName">The name of the counter.</param>
            <param name="counterSample">The counter sample.</param>
        </member>
        <member name="T:ExitGames.Diagnostics.Counter.PerformanceCounterReader">
            <summary>
              A read only <see cref="T:ExitGames.Diagnostics.Counter.ICounter"/> that wraps a windows <see cref="T:System.Diagnostics.PerformanceCounter"/>.
            </summary>
        </member>
        <member name="F:ExitGames.Diagnostics.Counter.PerformanceCounterReader.category">
            <summary>
              The windows performance counter category.
            </summary>
        </member>
        <member name="F:ExitGames.Diagnostics.Counter.PerformanceCounterReader.counter">
            <summary>
              The windows performance counter.
            </summary>
        </member>
        <member name="M:ExitGames.Diagnostics.Counter.PerformanceCounterReader.#ctor(System.String,System.String)">
            <summary>
              Initializes a new instance of the <see cref="T:ExitGames.Diagnostics.Counter.PerformanceCounterReader"/> class.
            </summary>
            <param name="categoryName">The name of the performance counter category.</param>
            <param name="counterName">The performance counter name counter.</param>
        </member>
        <member name="M:ExitGames.Diagnostics.Counter.PerformanceCounterReader.#ctor(System.String,System.String,System.String)">
            <summary>
              Initializes a new instance of the <see cref="T:ExitGames.Diagnostics.Counter.PerformanceCounterReader"/> class.
            </summary>
            <param name="categoryName">The name of the performance counter category.</param>
            <param name="counterName">The performance counter name counter.</param>
            <param name="instanceName">The instance name for the performance counter.</param>
        </member>
        <member name="M:ExitGames.Diagnostics.Counter.PerformanceCounterReader.Initialize">
            <summary>
              Initalizes this instance. 
              There is usally no need to call this method since the constructor has already taken care of it.
            </summary>
        </member>
        <member name="M:ExitGames.Diagnostics.Counter.PerformanceCounterReader.TryGetValue(System.Single@)">
            <summary>
              Tries to obtain a counter sample and returns the calculated value for it.
            </summary>
            <param name = "value">
              When this method returns, contains the calculated value for the performance counter 
              if the the performance counter exists; otherwise, the default value for the type of
              the value parameter is returned. 
            </param>
            <returns>
              True if performcae counter exists and the calcualted value could be obtained; otherwise, false.
            </returns>
        </member>
        <member name="M:ExitGames.Diagnostics.Counter.PerformanceCounterReader.Decrement">
            <summary>
              Not supported by this readonly <see cref="T:ExitGames.Diagnostics.Counter.ICounter"/> implementation.
            </summary>
            <returns>
              Throws a <see cref="T:System.NotSupportedException"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">
              This counter is read only.
            </exception>
        </member>
        <member name="M:ExitGames.Diagnostics.Counter.PerformanceCounterReader.GetNextValue">
            <summary>
              Obtains a counter sample and returns the calculated value for it.
            </summary>
            <returns>
              The next calculated value that the system obtains for this counter.
            </returns>
        </member>
        <member name="M:ExitGames.Diagnostics.Counter.PerformanceCounterReader.Increment">
            <summary>
              Not supported by this readonly <see cref="T:ExitGames.Diagnostics.Counter.ICounter"/> implementation.
            </summary>
            <returns>
              Throws a <see cref="T:System.NotSupportedException"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">
              This counter is read only.
            </exception>
        </member>
        <member name="M:ExitGames.Diagnostics.Counter.PerformanceCounterReader.IncrementBy(System.Int64)">
            <summary>
              Not supported by this readonly <see cref="T:ExitGames.Diagnostics.Counter.ICounter"/> implementation.
            </summary>
            <param name="value">
              The value.
            </param>
            <returns>
              Throws a <see cref="T:System.NotSupportedException"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">
              This counter is read only.
            </exception>
        </member>
        <member name="M:ExitGames.Diagnostics.Counter.PerformanceCounterReader.Dispose">
            <summary>
              Releases all resources used by this instance.
            </summary>
        </member>
        <member name="M:ExitGames.Diagnostics.Counter.PerformanceCounterReader.Dispose(System.Boolean)">
            <summary>
              Disposes the wrapped <see cref="T:System.Diagnostics.PerformanceCounter"/>.
            </summary>
            <param name="disposing">
              The disposing.
            </param>
        </member>
        <member name="M:ExitGames.Diagnostics.Counter.PerformanceCounterReader.InitializeCounter">
            <summary>
              Initializes the counter.
            </summary>
        </member>
        <member name="P:ExitGames.Diagnostics.Counter.PerformanceCounterReader.CategoryExists">
            <summary>
              Gets a value indicating whether the given performance counter category exists.
            </summary>
        </member>
        <member name="P:ExitGames.Diagnostics.Counter.PerformanceCounterReader.CategoryName">
            <summary>
              Gets the name of the performance counter category for the performance counter.
            </summary>
        </member>
        <member name="P:ExitGames.Diagnostics.Counter.PerformanceCounterReader.CounterExists">
            <summary>
              Gets a value indicating whether the given performance counter exists.
            </summary>
        </member>
        <member name="P:ExitGames.Diagnostics.Counter.PerformanceCounterReader.CounterType">
            <summary>
              Gets the counter type of the associated performance counter.
            </summary>
        </member>
        <member name="P:ExitGames.Diagnostics.Counter.PerformanceCounterReader.InstanceExists">
            <summary>
              Gets a value indicating whether the given performance counter instance exists.
            </summary>
        </member>
        <member name="P:ExitGames.Diagnostics.Counter.PerformanceCounterReader.InstanceName">
            <summary>
              Gets the instance name for the performance counter.
            </summary>
        </member>
        <member name="P:ExitGames.Diagnostics.Counter.PerformanceCounterReader.IsSingleInstance">
            <summary>
              Gets a value indicating whether the performance counter category can have only a single instance.
            </summary>
        </member>
        <member name="P:ExitGames.Diagnostics.Counter.PerformanceCounterReader.Name">
            <summary>
              Gets the name of the counter.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:ExitGames.Diagnostics.Monitoring.Protocol.StatsD.Text.StatsDTextWriter" -->
        <member name="M:ExitGames.Diagnostics.Monitoring.Protocol.ICounterSampleWriter.Start(ExitGames.Diagnostics.Monitoring.CounterSampleSenderBase)">
            <summary>
              Start writing. 
              Stop is handled by IDisposable implementation.
              Can be called once.
            </summary>
        </member>
        <member name="M:ExitGames.Diagnostics.Monitoring.Protocol.ICounterSampleWriter.Publish(ExitGames.Diagnostics.Monitoring.CounterSampleCollection[])">
            <summary>
               Called by <see cref="T:ExitGames.Diagnostics.Monitoring.CounterSampleSenderBase"/> 
               to write samples out to some storage.
            </summary>
        </member>
        <member name="P:ExitGames.Diagnostics.Monitoring.Protocol.ICounterSampleWriter.Ready">
            <summary>
              Is writer ready to publish any data.
              IsConnected status is subset of this status.
              Default implementation is writer started and connected.
            </summary>
        </member>
        <member name="F:ExitGames.Diagnostics.Monitoring.Protocol.PhotonBinaryWriterBase.MaxQueueLength">
            <summary>
            Gets a value indicating how many packages should be enqueued for republishing if an error occurred during publishing.
            The default value is 120.
            </summary>
        </member>
        <member name="F:ExitGames.Diagnostics.Monitoring.Protocol.PhotonBinaryWriterBase.socket">
            <summary>
              The used <see cref="T:ExitGames.Net.Sockets.ISocketSender"/>.
            </summary>
        </member>
        <member name="P:ExitGames.Diagnostics.Monitoring.Protocol.PhotonBinaryWriterBase.QueuedDataSize">
            <summary>
                Gets the size of the queued data in bytes.
            </summary>
        </member>
        <member name="F:ExitGames.Diagnostics.Monitoring.Protocol.StatsD.Text.StatsDTextWriter.minPayloadSize">
            <summary>
              What is the largest Safe UDP Packet Size on the Internet:
              http://stackoverflow.com/questions/1098897/what-is-the-largest-safe-udp-packet-size-on-the-internet
            
              Maximum safe UDP payload is = 512 bytes, given minimum RFC internet MTU 576 = 20b/ipv4 + 8b/udp + 512b/data.
              The correct maximum UDP message size is 65507, as determined by the following formula: 0xffff - 
              (sizeof(IP Header) + sizeof(UDP Header)) = 65535-(20+8) = 65507.
            
              Be careful to keep the total length of the payload within your network's MTU. 
              There is no single good value to use, but here are some guidelines for common network scenarios:
              Fast Ethernet (1432) - This is most likely for Intranets.
              Gigabit Ethernet (8932) - Jumbo frames can make use of this feature much more efficient.
              Commodity Internet (512) - If you are routing over the internet a value in this range will be reasonable. 
                                         You might be able to go higher, but you are at the mercy of all the hops in your route.
            </summary>
        </member>
        <member name="F:ExitGames.Diagnostics.Monitoring.Protocol.StatsD.Text.StatsDTextWriter.maxPayloadSize">
            <summary>
              What is the largest Safe UDP Packet Size on the Internet:
              http://stackoverflow.com/questions/1098897/what-is-the-largest-safe-udp-packet-size-on-the-internet
            
              Maximum safe UDP payload is = 512 bytes, given minimum RFC internet MTU 576 = 20b/ipv4 + 8b/udp + 512b/data.
              The correct maximum UDP message size is 65507, as determined by the following formula: 0xffff - 
              (sizeof(IP Header) + sizeof(UDP Header)) = 65535-(20+8) = 65507.
            </summary>
        </member>
        <member name="T:ExitGames.Diagnostics.Monitoring.Protocol.Graphite.Text.GraphiteTextWriter">
            <summary>
              Graphite text protocol writer http://graphite.wikidot.com/getting-your-data-into-graphite
              metric_path value timestamp\n 
            </summary>
            <example>
              So for example, "foo.bar.baz 42 74857843" where the last number is a UNIX epoch time.
            </example>
        </member>
        <member name="F:ExitGames.Diagnostics.Monitoring.Protocol.Graphite.Text.GraphiteTextWriter.minPayloadSize">
            <summary>
              What is the largest Safe UDP Packet Size on the Internet:
              http://stackoverflow.com/questions/1098897/what-is-the-largest-safe-udp-packet-size-on-the-internet
            
              Maximum safe UDP payload is = 512 bytes, given minimum RFC internet MTU 576 = 20b/ipv4 + 8b/udp + 512b/data.
              The correct maximum UDP message size is 65507, as determined by the following formula: 0xffff - 
              (sizeof(IP Header) + sizeof(UDP Header)) = 65535-(20+8) = 65507.
            </summary>
        </member>
        <member name="F:ExitGames.Diagnostics.Monitoring.Protocol.Graphite.Text.GraphiteTextWriter.maxPayloadSize">
            <summary>
              What is the largest Safe UDP Packet Size on the Internet:
              http://stackoverflow.com/questions/1098897/what-is-the-largest-safe-udp-packet-size-on-the-internet
            
              Maximum safe UDP payload is = 512 bytes, given minimum RFC internet MTU 576 = 20b/ipv4 + 8b/udp + 512b/data.
              The correct maximum UDP message size is 65507, as determined by the following formula: 0xffff - 
              (sizeof(IP Header) + sizeof(UDP Header)) = 65535-(20+8) = 65507.
            </summary>
        </member>
        <member name="T:ExitGames.Diagnostics.Monitoring.Protocol.InfluxDB090.Graphite.Text.GraphiteTextWriter">
            <summary>
              Graphite text protocol writer http://graphite.wikidot.com/getting-your-data-into-graphite
              metric_path value timestamp\n 
            </summary> 
            <example>
              InfluxDB 0.9.0 awaits in the following format:
              ex: region.us-west.hostname.server01.cpu -> tags -> region: us-west, hostname: server01, point name -> cpu
              use senderId = "CloudType.{#CloudType#}.PrivateCloud.{#PrivateCloud#}.Region.{#Region#}.Cluster.{#Cluster#}.Machine.{0}"
            </example>
        </member>
        <member name="F:ExitGames.Diagnostics.Monitoring.Protocol.Photon.Binary.PhotonBinaryWriter.MaxPayloadSize">
            <summary>
              What is the largest Safe UDP Packet Size on the Internet:
              http://stackoverflow.com/questions/1098897/what-is-the-largest-safe-udp-packet-size-on-the-internet
            
              Maximum safe UDP payload is = 512 bytes, given minimum RFC internet MTU 576 = 20b/ipv4 + 8b/udp + 512b/data.
              The correct maximum UDP message size is 65507, as determined by the following formula: 0xffff - 
              (sizeof(IP Header) + sizeof(UDP Header)) = 65535-(20+8) = 65507.
            </summary>
        </member>
        <member name="T:ExitGames.Diagnostics.Monitoring.PublishCounterAttribute">
            <summary>
            Attribute for <see cref="T:ExitGames.Diagnostics.Counter.ICounter"/> fields or properties to publish with the <see cref="T:ExitGames.Diagnostics.Monitoring.CounterSamplePublisher"/>.
            </summary>
        </member>
        <member name="M:ExitGames.Diagnostics.Monitoring.PublishCounterAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ExitGames.Diagnostics.Monitoring.PublishCounterAttribute"/> class.
            </summary>
        </member>
        <member name="M:ExitGames.Diagnostics.Monitoring.PublishCounterAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ExitGames.Diagnostics.Monitoring.PublishCounterAttribute"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="P:ExitGames.Diagnostics.Monitoring.PublishCounterAttribute.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="T:ExitGames.Diagnostics.Monitoring.CounterSamplesPackage">
            <summary>
              Argument for event <see cref="E:ExitGames.Diagnostics.Monitoring.CounterSampleReceiver.OnCounterDataReceived"/> and message type for <see cref="F:ExitGames.Diagnostics.Monitoring.CounterSampleReceiver.Channel"/> 
            </summary>
        </member>
        <member name="F:ExitGames.Diagnostics.Monitoring.CounterSamplesPackage.counterSamples">
            <summary>
            The samples.
            </summary>
        </member>
        <member name="F:ExitGames.Diagnostics.Monitoring.CounterSamplesPackage.receiveTime">
            <summary>
            The receive time.
            </summary>
        </member>
        <member name="F:ExitGames.Diagnostics.Monitoring.CounterSamplesPackage.remoteEndPoint">
            <summary>
            The remote end point.
            </summary>
        </member>
        <member name="F:ExitGames.Diagnostics.Monitoring.CounterSamplesPackage.senderId">
            <summary>
            The sender id.
            </summary>
        </member>
        <member name="F:ExitGames.Diagnostics.Monitoring.CounterSamplesPackage.senderTime">
            <summary>
            The send time.
            </summary>
        </member>
        <member name="M:ExitGames.Diagnostics.Monitoring.CounterSamplesPackage.#ctor(System.Net.EndPoint,System.String,System.DateTime,System.DateTime,ExitGames.Diagnostics.Monitoring.CounterSampleCollection[])">
            <summary>
            Initializes a new instance of the <see cref="T:ExitGames.Diagnostics.Monitoring.CounterSamplesPackage"/> class.
            </summary>
            <param name="remoteEndPoint">
            The remote end point.
            </param>
            <param name="senderId">
            The sender id.
            </param>
            <param name="senderTime">
            The sender time.
            </param>
            <param name="receiveTime">
            The receive time.
            </param>
            <param name="counterSamples">
            The counter samples.
            </param>
        </member>
        <member name="P:ExitGames.Diagnostics.Monitoring.CounterSamplesPackage.CounterSamples">
            <summary>
            Gets the received <see cref="T:ExitGames.Diagnostics.Counter.CounterSample"/>s.
            </summary>
        </member>
        <member name="P:ExitGames.Diagnostics.Monitoring.CounterSamplesPackage.ReceiveTime">
            <summary>
            Gets the time when counters were received.
            </summary>
        </member>
        <member name="P:ExitGames.Diagnostics.Monitoring.CounterSamplesPackage.RemoteEndPoint">
            <summary>
            Gets the remote end point.
            </summary>
        </member>
        <member name="P:ExitGames.Diagnostics.Monitoring.CounterSamplesPackage.SenderId">
            <summary>
            Gets the sender's id.
            </summary>
        </member>
        <member name="P:ExitGames.Diagnostics.Monitoring.CounterSamplesPackage.SenderTime">
            <summary>
            Gets the send time.
            </summary>
        </member>
        <member name="T:ExitGames.Diagnostics.Monitoring.CounterFactory">
            <summary>
              Provides methods to create <see cref="T:ExitGames.Diagnostics.Counter.ICounter"/> instances.
            </summary>
        </member>
        <member name="F:ExitGames.Diagnostics.Monitoring.CounterFactory.log">
            <summary>
              Provides a <see cref="T:ExitGames.Logging.ILogger"/> instance used to log messages into the logging framework.
            </summary>
        </member>
        <member name="M:ExitGames.Diagnostics.Monitoring.CounterFactory.TryCreateWindowsCounter(System.String,System.String,System.String)">
            <summary>
              Tries the create windows counter.
            </summary>
            <param name="name">The name.</param>
            <param name="performanceCounterCategory">The performance counter category.</param>
            <param name="performanceCounterName">Name of the performance counter.</param>
            <returns>
              If the performance counter creation succeds an instance of <see cref="T:ExitGames.Diagnostics.Counter.WindowsPerformanceCounter"/> 
              is returned, otherwise an instance of <see cref="T:ExitGames.Diagnostics.Counter.DummyCounter"/> is returned.
            </returns>
        </member>
        <member name="M:ExitGames.Diagnostics.Monitoring.CounterFactory.TryCreateWindowsCounter(System.String,System.String,System.String,System.String)">
            <summary>
              Tries to create a <see cref="T:ExitGames.Diagnostics.Counter.ICounter"/> wrapper for an <see cref="T:System.Diagnostics.PerformanceCounter"/>.
            </summary>
            <param name="name">The counter name.</param>
            <param name="performanceCounterCategory">
              The name of the performance counter category (performance object) with which this performance counter is associated. 
            </param>
            <param name="performanceCounterName">
              The name of the performance counter. 
            </param>
            <param name="performanceCounterInstance">
              The name of the performance counter category instance, or an empty string (""), if the category contains a single instance.
            </param>
            <returns>
              If the performance counter creation succeds an instance of <see cref="T:ExitGames.Diagnostics.Counter.WindowsPerformanceCounter"/> 
              is returned, otherwise an instance of <see cref="T:ExitGames.Diagnostics.Counter.DummyCounter"/> is returned.
            </returns>
        </member>
        <member name="M:ExitGames.Diagnostics.Monitoring.CounterFactory.LogPerformanceCounterError(System.String,System.String,System.String,System.String)">
            <summary>
              Logs an error.
            </summary>
            <param name = "performanceCounterCategory">
              The performance counter category.
            </param>
            <param name = "performanceCounterName">
              The performance counter name.
            </param>
            <param name = "performanceCounterInstance">
              The performance counter instance.
            </param>
            <param name = "errorMessage">
              The error message.
            </param>
        </member>
        <member name="T:ExitGames.Diagnostics.Monitoring.CounterSampleReceiver">
            <summary>
              A receiver of <see cref="T:ExitGames.Diagnostics.Monitoring.CounterSamplesPackage"/>s.
            </summary>
        </member>
        <member name="F:ExitGames.Diagnostics.Monitoring.CounterSampleReceiver.Channel">
            <summary>
              A Channel for <see cref="T:ExitGames.Diagnostics.Monitoring.CounterSamplesPackage"/>s.
            </summary>
        </member>
        <member name="F:ExitGames.Diagnostics.Monitoring.CounterSampleReceiver.log">
            <summary>
              Provides a <see cref="T:ExitGames.Logging.ILogger"/> instance used to log messages into the logging framework.
            </summary>
        </member>
        <member name="F:ExitGames.Diagnostics.Monitoring.CounterSampleReceiver.socket">
            <summary>
              The <see cref="T:ExitGames.Net.Sockets.ISocketReceiver"/> used to receive data.
            </summary>
        </member>
        <member name="F:ExitGames.Diagnostics.Monitoring.CounterSampleReceiver.reader">
            <summary>
              The <see cref="T:ExitGames.Diagnostics.Monitoring.Protocol.ICounterSampleReader"/> used to receive data.
            </summary>
        </member>
        <member name="M:ExitGames.Diagnostics.Monitoring.CounterSampleReceiver.#ctor(ExitGames.Net.Sockets.ISocketReceiver,ExitGames.Diagnostics.Monitoring.Protocol.ICounterSampleReader)">
            <summary>
              Initializes a new instance of the <see cref="T:ExitGames.Diagnostics.Monitoring.CounterSampleReceiver"/> class.
            </summary>
            <param name="socket">
              The receiver.
            </param>
            <param name="reader">
              The reader.
            </param>
        </member>
        <member name="M:ExitGames.Diagnostics.Monitoring.CounterSampleReceiver.OnReceive(System.Object,ExitGames.Net.Sockets.SocketReceiveEventArgs)">
            <summary>
              The <see cref="E:ExitGames.Net.Sockets.ISocketReceiver.Receive"/> callback.
            </summary>
            <param name="sender">
              The sender.
            </param>
            <param name="e">
              The event args.
            </param>
        </member>
        <member name="E:ExitGames.Diagnostics.Monitoring.CounterSampleReceiver.OnCounterDataReceived">
            <summary>
              This event is invoked when new <see cref="T:ExitGames.Diagnostics.Monitoring.CounterSamplesPackage"/> are received.
            </summary>
        </member>
        <member name="T:ExitGames.Diagnostics.Monitoring.CounterSetAttribute">
            <summary>
              Attribute to set a name for a group of counters.
            </summary>
        </member>
        <member name="P:ExitGames.Diagnostics.Monitoring.CounterSetAttribute.Name">
            <summary>
              Gets or sets the name.
            </summary>
        </member>
        <member name="T:ExitGames.Diagnostics.Counter.CounterType">
            <summary>
            The counter type enum.
            </summary>
        </member>
        <member name="F:ExitGames.Diagnostics.Counter.CounterType.Undefined">
            <summary>
            An undefined counter type.
            </summary>
        </member>
        <member name="F:ExitGames.Diagnostics.Counter.CounterType.Numeric">
            <summary>
            A numeric counter.
            </summary>
        </member>
        <member name="F:ExitGames.Diagnostics.Counter.CounterType.Average">
            <summary>
            An average counter.
            </summary>
        </member>
        <member name="F:ExitGames.Diagnostics.Counter.CounterType.CountPerSecound">
            <summary>
            A rate counter.
            </summary>
        </member>
        <member name="F:ExitGames.Diagnostics.Counter.CounterType.WindowsPerformanceCounter">
            <summary>
            A windows performance counter.
            </summary>
        </member>
        <member name="T:ExitGames.Diagnostics.Counter.CountsPerSecondCounter">
            <summary>
              The counts per second rate counter.
            </summary>
        </member>
        <member name="F:ExitGames.Diagnostics.Counter.CountsPerSecondCounter.sharedCounter">
            <summary>
              _shared counter.
            </summary>
        </member>
        <member name="F:ExitGames.Diagnostics.Counter.CountsPerSecondCounter.oldSample">
            <summary>
              _old sample.
            </summary>
        </member>
        <member name="M:ExitGames.Diagnostics.Counter.CountsPerSecondCounter.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:ExitGames.Diagnostics.Counter.CountsPerSecondCounter"/> class.
            </summary>
        </member>
        <member name="M:ExitGames.Diagnostics.Counter.CountsPerSecondCounter.#ctor(System.String)">
            <summary>
              Initializes a new instance of the <see cref="T:ExitGames.Diagnostics.Counter.CountsPerSecondCounter"/> class.
            </summary>
            <param name="counterName">
              The counterName.
            </param>
        </member>
        <member name="M:ExitGames.Diagnostics.Counter.CountsPerSecondCounter.Decrement">
            <summary>
              Decrements the sharedCounter.
            </summary>
            <returns>
              The new value.
            </returns>
        </member>
        <member name="M:ExitGames.Diagnostics.Counter.CountsPerSecondCounter.GetNextSample">
            <summary>
              Gets the next sample.
            </summary>
            <returns>
              A new <see cref="T:ExitGames.Diagnostics.Counter.RawCounterSample"/>.
            </returns>
        </member>
        <member name="M:ExitGames.Diagnostics.Counter.CountsPerSecondCounter.GetNextValue">
            <summary>
              Get the value since the last <see cref="M:ExitGames.Diagnostics.Counter.CountsPerSecondCounter.GetNextValue"/> call.
            </summary>
            <returns>
              A new <see cref="T:ExitGames.Diagnostics.Counter.RawCounterSample"/>.
            </returns>
            <remarks>
              This method is NOT thread safe.
            </remarks>
        </member>
        <member name="M:ExitGames.Diagnostics.Counter.CountsPerSecondCounter.Increment">
            <summary>
              Increments the counter.
            </summary>
            <returns>
              The new value.
            </returns>
        </member>
        <member name="M:ExitGames.Diagnostics.Counter.CountsPerSecondCounter.IncrementBy(System.Int64)">
            <summary>
              Increment the counter by a value.
            </summary>
            <param name = "value">
              The value.
            </param>
            <returns>
              The new value.
            </returns>
        </member>
        <member name="P:ExitGames.Diagnostics.Counter.CountsPerSecondCounter.CounterType">
            <summary>
              Gets the type of the counter.
            </summary>
            <value>The type of the counter.</value>
        </member>
        <member name="T:ExitGames.Diagnostics.Counter.DummyCounter">
            <summary>
              A dummy counter that does nothing.
            </summary>
        </member>
        <member name="M:ExitGames.Diagnostics.Counter.DummyCounter.#ctor(System.String)">
            <summary>
              Initializes a new instance of the <see cref="T:ExitGames.Diagnostics.Counter.DummyCounter"/> class.
            </summary>
            <param name="name">
              The name.
            </param>
        </member>
        <member name="M:ExitGames.Diagnostics.Counter.DummyCounter.Decrement">
            <summary>
              Decrements the counter.
            </summary>
            <returns>
              Always zero.
            </returns>
        </member>
        <member name="M:ExitGames.Diagnostics.Counter.DummyCounter.GetNextSample">
            <summary>
              Gets the next sample.
            </summary>
            <returns>
              A new <see cref="T:ExitGames.Diagnostics.Counter.RawCounterSample"/>.
            </returns>
        </member>
        <member name="M:ExitGames.Diagnostics.Counter.DummyCounter.GetNextValue">
            <summary>
              Gets the next value.
            </summary>
            <returns>
              Always zero.
            </returns>
        </member>
        <member name="M:ExitGames.Diagnostics.Counter.DummyCounter.Increment">
            <summary>
              Increments the counter.
            </summary>
            <returns>
              Always zero.
            </returns>
        </member>
        <member name="M:ExitGames.Diagnostics.Counter.DummyCounter.IncrementBy(System.Int64)">
            <summary>
              Increments the counter.
            </summary>
            <param name = "value">
              The value.
            </param>
            <returns>
              Always zero.
            </returns>
        </member>
        <member name="P:ExitGames.Diagnostics.Counter.DummyCounter.CounterType">
            <summary>
              Gets the type of the counter.
            </summary>
            <value>The type of the counter.</value>
        </member>
        <member name="T:ExitGames.Diagnostics.Counter.Internal.ISharedCounter">
            <summary>
            i shared counter.
            </summary>
        </member>
        <member name="M:ExitGames.Diagnostics.Counter.Internal.ISharedCounter.Increment">
            <summary>
            Increments the value.
            </summary>
            <returns>
            The increment.
            </returns>
        </member>
        <member name="M:ExitGames.Diagnostics.Counter.Internal.ISharedCounter.IncrementBy(System.Int64@)">
            <summary>
            Increments the value by the given value.
            </summary>
            <param name="valueToAdd">
            The valueToAdd.
            </param>
            <returns>
            The increment by.
            </returns>
        </member>
        <member name="M:ExitGames.Diagnostics.Counter.Internal.ISharedCounter.Decrement">
            <summary>
            Decrements the value.
            </summary>
            <returns>
            The decrement.
            </returns>
        </member>
        <member name="P:ExitGames.Diagnostics.Counter.Internal.ISharedCounter.Name">
            <summary>
            Gets Name.
            </summary>
        </member>
        <member name="P:ExitGames.Diagnostics.Counter.Internal.ISharedCounter.Value">
            <summary>
            Gets or sets Value.
            </summary>
        </member>
        <member name="T:ExitGames.Diagnostics.Counter.Internal.SharedCounter">
            <summary>
            shared counter.
            </summary>
        </member>
        <member name="F:ExitGames.Diagnostics.Counter.Internal.SharedCounter.name">
            <summary>
            The counter name.
            </summary>
        </member>
        <member name="F:ExitGames.Diagnostics.Counter.Internal.SharedCounter.value">
            <summary>
            The counter value.
            </summary>
        </member>
        <member name="M:ExitGames.Diagnostics.Counter.Internal.SharedCounter.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ExitGames.Diagnostics.Counter.Internal.SharedCounter"/> class.
            </summary>
            <param name="name">
            The counter name.
            </param>
        </member>
        <member name="M:ExitGames.Diagnostics.Counter.Internal.SharedCounter.Decrement">
            <summary>
            Decrements the counter by one.
            </summary>
            <returns>
            The decremented value.
            </returns>
        </member>
        <member name="M:ExitGames.Diagnostics.Counter.Internal.SharedCounter.Increment">
            <summary>
            Increments the counter by one and returns the new value.
            </summary>
            <returns>
            The incremented value.
            </returns>
        </member>
        <member name="M:ExitGames.Diagnostics.Counter.Internal.SharedCounter.IncrementBy(System.Int64@)">
            <summary>
            Increments the counter by a given value.
            </summary>
            <param name="valueToAdd">
            The value to be added to the counter.
            </param>
            <returns>
            The incremented value.
            </returns>
        </member>
        <member name="P:ExitGames.Diagnostics.Counter.Internal.SharedCounter.Name">
            <summary>
            Gets the counters name.
            </summary>
        </member>
        <member name="P:ExitGames.Diagnostics.Counter.Internal.SharedCounter.Value">
            <summary>
            Gets or sets the counters value.
            </summary>
        </member>
        <member name="T:ExitGames.Diagnostics.Counter.NumericCounter">
            <summary>
              A numeric counter.
            </summary>
        </member>
        <member name="F:ExitGames.Diagnostics.Counter.NumericCounter.sharedCounter">
            <summary>
              shared counter.
            </summary>
        </member>
        <member name="M:ExitGames.Diagnostics.Counter.NumericCounter.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:ExitGames.Diagnostics.Counter.NumericCounter"/> class.
            </summary>
        </member>
        <member name="M:ExitGames.Diagnostics.Counter.NumericCounter.#ctor(System.String)">
            <summary>
              Initializes a new instance of the <see cref="T:ExitGames.Diagnostics.Counter.NumericCounter"/> class.
            </summary>
            <param name="name">
              The name.
            </param>
        </member>
        <member name="M:ExitGames.Diagnostics.Counter.NumericCounter.GetNextSample">
            <summary>
              Gets the next sample.
            </summary>
            <returns>
              A new <see cref="T:ExitGames.Diagnostics.Counter.RawCounterSample"/>.
            </returns>
        </member>
        <member name="M:ExitGames.Diagnostics.Counter.NumericCounter.Decrement">
            <summary>
              Decrements the counter by one.
            </summary>
            <returns>
              The decremented value.
            </returns>
        </member>
        <member name="M:ExitGames.Diagnostics.Counter.NumericCounter.GetNextValue">
            <summary>
              Gets the next value.
            </summary>
            <returns>The get next value.</returns>
        </member>
        <member name="M:ExitGames.Diagnostics.Counter.NumericCounter.Increment">
            <summary>
              Increments the counter by one and returns the new value.
            </summary>
            <returns>
              The incremented value.
            </returns>
        </member>
        <member name="M:ExitGames.Diagnostics.Counter.NumericCounter.IncrementBy(System.Int64)">
            <summary>
              Increments the counter by a given value.
            </summary>
            <param name = "value">
              The value to be added to the counter.
            </param>
            <returns>
              The incremented value.
            </returns>
        </member>
        <member name="P:ExitGames.Diagnostics.Counter.NumericCounter.CounterType">
            <summary>
              Gets the type of the counter.
            </summary>
            <value>The type of the counter.</value>
        </member>
        <member name="P:ExitGames.Diagnostics.Counter.NumericCounter.RawValue">
            <summary>
              Gets or sets RawValue.
            </summary>
        </member>
        <member name="T:ExitGames.Diagnostics.Counter.WindowsPerformanceCounter">
            <summary>
              An <see cref="T:ExitGames.Diagnostics.Counter.ICounter"/> that wraps a windows <see cref="T:System.Diagnostics.PerformanceCounter"/>.
            </summary>
        </member>
        <member name="F:ExitGames.Diagnostics.Counter.WindowsPerformanceCounter.counter">
            <summary>
              The windows performance counter.
            </summary>
        </member>
        <member name="F:ExitGames.Diagnostics.Counter.WindowsPerformanceCounter.name">
            <summary>
              The counter name.
            </summary>
        </member>
        <member name="M:ExitGames.Diagnostics.Counter.WindowsPerformanceCounter.#ctor(System.Diagnostics.PerformanceCounter)">
            <summary>
              Initializes a new instance of the <see cref="T:ExitGames.Diagnostics.Counter.WindowsPerformanceCounter"/> class.
            </summary>
            <param name="counter">
              The counter.
            </param>
        </member>
        <member name="M:ExitGames.Diagnostics.Counter.WindowsPerformanceCounter.#ctor(System.String,System.Diagnostics.PerformanceCounter)">
            <summary>
              Initializes a new instance of the <see cref="T:ExitGames.Diagnostics.Counter.WindowsPerformanceCounter"/> class.
            </summary>
            <param name="name">
              The name.
            </param>
            <param name="counter">
              The counter.
            </param>
        </member>
        <member name="M:ExitGames.Diagnostics.Counter.WindowsPerformanceCounter.CreateCounter(System.String,System.String,System.String)">
            <summary>
              Create a new instance of <see cref="T:ExitGames.Diagnostics.Counter.WindowsPerformanceCounter"/>.
            </summary>
            <param name="name">
              The counter.
            </param>
            <param name="categoryName">
              The windows performance counter category name.
            </param>
            <param name="counterName">
              The windows performance counter name.
            </param>
            <returns>
              A new instance of <see cref="T:ExitGames.Diagnostics.Counter.WindowsPerformanceCounter"/>.
            </returns>
        </member>
        <member name="M:ExitGames.Diagnostics.Counter.WindowsPerformanceCounter.CreateCounter(System.String,System.String,System.String,System.String)">
            <summary>
              Create a new instance of <see cref="T:ExitGames.Diagnostics.Counter.WindowsPerformanceCounter"/>.
            </summary>
            <param name="name">
              The counter.
            </param>
            <param name="categoryName">
              The windows performance counter category name.
            </param>
            <param name="counterName">
              The windows performance counter name.
            </param>
            <param name="instanceName">
              The windows performance counter instance Name.
            </param>
            <returns>
              A new instance of <see cref="T:ExitGames.Diagnostics.Counter.WindowsPerformanceCounter"/>.
            </returns>
        </member>
        <member name="M:ExitGames.Diagnostics.Counter.WindowsPerformanceCounter.Decrement">
            <summary>
              Decrements the counter.
            </summary>
            <returns>
              The new value.
            </returns>
        </member>
        <member name="M:ExitGames.Diagnostics.Counter.WindowsPerformanceCounter.GetNextValue">
            <summary>
              Gets the next value.
            </summary>
            <returns>
              The next value.
            </returns>
        </member>
        <member name="M:ExitGames.Diagnostics.Counter.WindowsPerformanceCounter.Increment">
            <summary>
              Increments the counter.
            </summary>
            <returns>
              The new value.
            </returns>
        </member>
        <member name="M:ExitGames.Diagnostics.Counter.WindowsPerformanceCounter.IncrementBy(System.Int64)">
            <summary>
              Increments the counter by a value.
            </summary>
            <param name = "value">
              The value.
            </param>
            <returns>
              The new value.
            </returns>
        </member>
        <member name="P:ExitGames.Diagnostics.Counter.WindowsPerformanceCounter.CounterType">
            <summary>
              Gets the type of the counter.
            </summary>
            <value>The type of the counter.</value>
        </member>
        <member name="P:ExitGames.Diagnostics.Counter.WindowsPerformanceCounter.Name">
            <summary>
              Gets the counter name.
            </summary>
        </member>
        <member name="P:ExitGames.Diagnostics.Counter.WindowsPerformanceCounter.Value">
            <summary>
              Gets or sets the <see cref="P:System.Diagnostics.PerformanceCounter.RawValue"/>.
            </summary>
        </member>
        <member name="T:ExitGames.Diagnostics.Monitoring.CounterSamplePublisher">
            <summary>
              Collects and publishes data from <see cref="T:ExitGames.Diagnostics.Counter.ICounter"/> instances in a specified interval.
            </summary>
        </member>
        <member name="F:ExitGames.Diagnostics.Monitoring.CounterSamplePublisher.Channel">
            <summary>
              A channel for <see cref="T:ExitGames.Diagnostics.Monitoring.CounterSampleMessage"/>s.
            </summary>
        </member>
        <member name="F:ExitGames.Diagnostics.Monitoring.CounterSamplePublisher.ListChannel">
            <summary>
              A channel for lists of <see cref="T:ExitGames.Diagnostics.Monitoring.CounterSampleMessage"/>s.
            </summary>
        </member>
        <member name="F:ExitGames.Diagnostics.Monitoring.CounterSamplePublisher.log">
            <summary>
              Provides a <see cref="T:ExitGames.Logging.ILogger"/> instance used to log messages into the logging framework.
            </summary>
        </member>
        <member name="F:ExitGames.Diagnostics.Monitoring.CounterSamplePublisher.items">
            <summary>
              A list of <see cref="T:ExitGames.Diagnostics.Monitoring.CounterSamplePublisher.CounterPublisherItem"/>s.
            </summary>
        </member>
        <member name="F:ExitGames.Diagnostics.Monitoring.CounterSamplePublisher.publishInterval">
            <summary>
              The publish interval in seconds.
            </summary>
        </member>
        <member name="F:ExitGames.Diagnostics.Monitoring.CounterSamplePublisher.syncRoot">
            <summary>
              A sync root.
            </summary>
        </member>
        <member name="F:ExitGames.Diagnostics.Monitoring.CounterSamplePublisher.lastUpdateDate">
            <summary>
              The last update time.
            </summary>
        </member>
        <member name="F:ExitGames.Diagnostics.Monitoring.CounterSamplePublisher.timer">
            <summary>
              The time for updates.
            </summary>
        </member>
        <member name="M:ExitGames.Diagnostics.Monitoring.CounterSamplePublisher.#ctor(System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:ExitGames.Diagnostics.Monitoring.CounterSamplePublisher"/> class.
            </summary>
            <param name="publishInterval">
              Specifies the interval to publish counter values in seconds.
            </param>
        </member>
        <member name="M:ExitGames.Diagnostics.Monitoring.CounterSamplePublisher.AddCounter(ExitGames.Diagnostics.Counter.ICounter,System.String)">
            <summary>
              Adds an <see cref="T:ExitGames.Diagnostics.Counter.ICounter"/> instance to the counter publisher.
            </summary>
            <param name="counter">The counter to add.</param>
            <param name="name">The name of the counter.</param>
        </member>
        <member name="M:ExitGames.Diagnostics.Monitoring.CounterSamplePublisher.Start">
            <summary>
              Starts this instance to collect and publish counter data.
            </summary>
        </member>
        <member name="M:ExitGames.Diagnostics.Monitoring.CounterSamplePublisher.Stop">
            <summary>
              Stops publishing counter data.
            </summary>
        </member>
        <member name="M:ExitGames.Diagnostics.Monitoring.CounterSamplePublisher.SetTimer(System.DateTime)">
            <summary>
              Sets the timer to the next update time.
            </summary>
            <param name = "lastUpdateDateTime">
              The last update time.
            </param>
        </member>
        <member name="M:ExitGames.Diagnostics.Monitoring.CounterSamplePublisher.TimerCallBack(System.Object)">
            <summary>
              The timer elapsed callback.
              Calls <see cref="M:ExitGames.Diagnostics.Monitoring.CounterSamplePublisher.Update"/>.
            </summary>
            <param name="state">
              The state (is not used).
            </param>
        </member>
        <member name="M:ExitGames.Diagnostics.Monitoring.CounterSamplePublisher.Update">
            <summary>
              Reads all counters and publishes them into the <see cref="F:ExitGames.Diagnostics.Monitoring.CounterSamplePublisher.Channel"/> and the <see cref="F:ExitGames.Diagnostics.Monitoring.CounterSamplePublisher.ListChannel"/>.
            </summary>
        </member>
        <member name="T:ExitGames.Diagnostics.Monitoring.CounterSamplePublisher.CounterPublisherItem">
            <summary>
              A wrapper to read values from an <see cref="T:ExitGames.Diagnostics.Counter.ICounter"/>.
            </summary>
        </member>
        <member name="F:ExitGames.Diagnostics.Monitoring.CounterSamplePublisher.CounterPublisherItem.counter">
            <summary>
              The counter.
            </summary>
        </member>
        <member name="F:ExitGames.Diagnostics.Monitoring.CounterSamplePublisher.CounterPublisherItem.counterReader">
            <summary>
              The counter reader.
            </summary>
        </member>
        <member name="F:ExitGames.Diagnostics.Monitoring.CounterSamplePublisher.CounterPublisherItem.name">
            <summary>
              The counter name.
            </summary>
        </member>
        <member name="M:ExitGames.Diagnostics.Monitoring.CounterSamplePublisher.CounterPublisherItem.#ctor(ExitGames.Diagnostics.Counter.ICounter,System.String)">
            <summary>
              Initializes a new instance of the <see cref="T:ExitGames.Diagnostics.Monitoring.CounterSamplePublisher.CounterPublisherItem"/> class.
            </summary>
            <param name="counter">
              The counter.
            </param>
            <param name="name">
              The counter name.
            </param>
        </member>
        <member name="M:ExitGames.Diagnostics.Monitoring.CounterSamplePublisher.CounterPublisherItem.TryGetNextValue(System.DateTime,ExitGames.Diagnostics.Counter.CounterSample@)">
            <summary>
              Try to read the nexxt value.
            </summary>
            <param name = "currentTimeStamp">
              The current time stamp.
            </param>
            <param name = "counterSample">
              The counter sample.
            </param>
            <returns>
              True on success.
            </returns>
        </member>
        <member name="P:ExitGames.Diagnostics.Monitoring.CounterSamplePublisher.CounterPublisherItem.Name">
            <summary>
              Gets the counter name.
            </summary>
        </member>
        <member name="T:ExitGames.Diagnostics.Monitoring.CounterSamplePublisherFactory">
            <summary>
              A factory for <see cref="T:ExitGames.Diagnostics.Monitoring.CounterSamplePublisher"/>s.
            </summary>
        </member>
        <member name="F:ExitGames.Diagnostics.Monitoring.CounterSamplePublisherFactory.MemberBindingFlags">
            <summary>
              Binding flags used to find instance counter memebers.
            </summary>
        </member>
        <member name="F:ExitGames.Diagnostics.Monitoring.CounterSamplePublisherFactory.StaticBindingFlags">
            <summary>
              Binding flags used to find static counter memebers.
            </summary>
        </member>
        <member name="F:ExitGames.Diagnostics.Monitoring.CounterSamplePublisherFactory.log">
            <summary>
              Provides a <see cref="T:ExitGames.Logging.ILogger"/> instance used to log messages into the logging framework.
            </summary>
        </member>
        <member name="M:ExitGames.Diagnostics.Monitoring.CounterSamplePublisherFactory.InitializeCounterPublisher(ExitGames.Diagnostics.Monitoring.CounterSamplePublisher,System.Object)">
            <summary>
              Initializes a counter publisher.
            </summary>
            <param name = "counterSamplePublisher">The counter publisher.</param>
            <param name = "counterContainer">An object providing counter instance members.</param>
        </member>
        <member name="M:ExitGames.Diagnostics.Monitoring.CounterSamplePublisherFactory.InitializeCounterPublisher(ExitGames.Diagnostics.Monitoring.CounterSamplePublisher,System.Object,System.String)">
            <summary>
              Initializes a counter publisher.
            </summary>
            <param name = "counterSamplePublisher">The counter publisher.</param>
            <param name = "counterSet">An object providing counter instance members.</param>
            <param name = "counterSetName">The name of the counter set.</param>
        </member>
        <member name="M:ExitGames.Diagnostics.Monitoring.CounterSamplePublisherFactory.InitializeCounterPublisher(ExitGames.Diagnostics.Monitoring.CounterSamplePublisher,System.Type)">
            <summary>
              Initializes a counter publisher.
            </summary>
            <param name = "counterSamplePublisher">The counter publisher.</param>
            <param name = "counterContainerType">Type of the counter container.</param>
        </member>
        <member name="M:ExitGames.Diagnostics.Monitoring.CounterSamplePublisherFactory.InitializeCounterPublisher(ExitGames.Diagnostics.Monitoring.CounterSamplePublisher,System.Type,System.String)">
            <summary>
              Initializes a counter publisher.
            </summary>
            <param name = "counterSamplePublisher">The counter publisher.</param>
            <param name = "counterContainerType">Type of the counter container.</param>
            <param name = "counterSetName">Name of the counter set.</param>
        </member>
        <member name="M:ExitGames.Diagnostics.Monitoring.CounterSamplePublisherFactory.GetCounterAttribute(System.Reflection.MemberInfo)">
            <summary>
              Gets a <see cref="T:ExitGames.Diagnostics.Monitoring.PublishCounterAttribute"/> from a <see cref="T:System.Reflection.MemberInfo"/>.
            </summary>
            <param name="memberInfo">
              The member info.
            </param>
            <returns>
              A <see cref="T:ExitGames.Diagnostics.Monitoring.PublishCounterAttribute"/> or null.
            </returns>
        </member>
        <member name="M:ExitGames.Diagnostics.Monitoring.CounterSamplePublisherFactory.GetCounterName(System.Reflection.MemberInfo,ExitGames.Diagnostics.Monitoring.PublishCounterAttribute,System.String)">
            <summary>
              Returns the name of a <see cref="T:ExitGames.Diagnostics.Monitoring.PublishCounterAttribute"/> or the <see cref="T:System.Reflection.MemberInfo"/> name combined with a counter set name.
            </summary>
            <param name="memberInfo">
              The member info.
            </param>
            <param name="publishCounterAttribute">
              The publish Counter Attribute.
            </param>
            <param name="counterSetName">
              The counter Set Name.
            </param>
            <returns>
              The name of the <paramref name="publishCounterAttribute"/> or the <paramref name="memberInfo"/> combined with <paramref name="counterSetName"/>.
            </returns>
        </member>
        <member name="M:ExitGames.Diagnostics.Monitoring.CounterSamplePublisherFactory.GetCounterSetAttribute(System.Reflection.MemberInfo)">
            <summary>
              Gets a <see cref="M:ExitGames.Diagnostics.Monitoring.CounterSamplePublisherFactory.GetCounterSetAttribute(System.Reflection.MemberInfo)"/> from a <see cref="T:System.Reflection.MemberInfo"/>.
            </summary>
            <param name="memberInfo">
              The member info.
            </param>
            <returns>
              A <see cref="M:ExitGames.Diagnostics.Monitoring.CounterSamplePublisherFactory.GetCounterSetAttribute(System.Reflection.MemberInfo)"/> or null.
            </returns>
        </member>
        <member name="M:ExitGames.Diagnostics.Monitoring.CounterSamplePublisherFactory.GetCounterSetName(System.Reflection.MemberInfo,ExitGames.Diagnostics.Monitoring.CounterSetAttribute,System.String)">
            <summary>
              Returns the name of a <see cref="T:ExitGames.Diagnostics.Monitoring.CounterSetAttribute"/> or the <see cref="T:System.Reflection.MemberInfo"/> name combined with a parent counter set name.
            </summary>
            <param name="memberInfo">
              The member info.
            </param>
            <param name="counterSetAttribute">
              The counter set attribute.
            </param>
            <param name="parentCounterSetName">
              The parent counter set name.
            </param>
            <returns>
              The name of the <paramref name="counterSetAttribute"/> or the <paramref name="memberInfo"/> combined with <paramref name="parentCounterSetName"/>.
            </returns>
        </member>
        <member name="M:ExitGames.Diagnostics.Monitoring.CounterSamplePublisherFactory.GetMemberValue(System.Object,System.Reflection.MemberInfo)">
            <summary>
              Gets the value of a field or property.
            </summary>
            <param name = "obj">
              The obj.
            </param>
            <param name = "memberInfo">
              The member info.
            </param>
            <returns>
              The value or false.
            </returns>
        </member>
        <member name="M:ExitGames.Diagnostics.Monitoring.CounterSamplePublisherFactory.GetName(System.String,System.String)">
            <summary>
              Helper method to build counter names.
            </summary>
            <param name = "name">The name.</param>
            <param name = "parentName">Name of the parent.</param>
            <returns>
              <paramref name = "name" /> if <paramref name = "parentName" /> is not set, otherwise "<paramref name = "name" />.<paramref name = "parentName" />".
            </returns>
        </member>
        <member name="M:ExitGames.Diagnostics.Monitoring.CounterSamplePublisherFactory.InitializeCounterPublisher(ExitGames.Diagnostics.Monitoring.CounterSamplePublisher,System.Object,System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo},System.String)">
            <summary>
              Initializes a counter publisher.
            </summary>
            <param name = "counterSamplePublisher">The counter publisher.</param>
            <param name = "counterSet">An object providing counter instance members.</param>
            <param name = "memberList">The member list.</param>
            <param name = "counterSetName">Name of the counter set.</param>
        </member>
        <member name="M:ExitGames.Diagnostics.Monitoring.CounterSamplePublisherFactory.IsCounterType(System.Reflection.MemberInfo)">
            <summary>
              Checks whether field or property is a counter.
            </summary>
            <param name = "memberInfo">
              The member info.
            </param>
            <returns>
              True if field or property is a counter.
            </returns>
        </member>
        <member name="M:ExitGames.Diagnostics.Monitoring.CounterSamplePublisherFactory.IsCounterType(System.Type)">
            <summary>
              Checks whether field or property is of type <see cref="T:ExitGames.Diagnostics.Counter.ICounter"/>.
            </summary>
            <param name="memberType">
              The member type.
            </param>
            <returns>
              True on success.
            </returns>
        </member>
        <member name="T:ExitGames.Diagnostics.Monitoring.PerformanceCounterInstancesDelegate">
            <summary>
              Delegate for new performance counter instances.
            </summary>
            <param name = "instanceName">
              The counter instance name.
            </param>
        </member>
        <member name="T:ExitGames.Diagnostics.Monitoring.PerformanceCounterWatcher">
            <summary>
              This class monitors the windows performance counters for new instances.
            </summary>
        </member>
        <member name="F:ExitGames.Diagnostics.Monitoring.PerformanceCounterWatcher.log">
            <summary>
              The logger.
            </summary>
        </member>
        <member name="F:ExitGames.Diagnostics.Monitoring.PerformanceCounterWatcher.category">
            <summary>
              The windows performance counter category.
            </summary>
        </member>
        <member name="F:ExitGames.Diagnostics.Monitoring.PerformanceCounterWatcher.categoryName">
            <summary>
              The windows performance counter category name.
            </summary>
        </member>
        <member name="F:ExitGames.Diagnostics.Monitoring.PerformanceCounterWatcher.regEx">
            <summary>
              The reg ex for counters.
            </summary>
        </member>
        <member name="F:ExitGames.Diagnostics.Monitoring.PerformanceCounterWatcher.instances">
            <summary>
              The counter instances.
            </summary>
        </member>
        <member name="F:ExitGames.Diagnostics.Monitoring.PerformanceCounterWatcher.timer">
            <summary>
              The update timer.
            </summary>
        </member>
        <member name="F:ExitGames.Diagnostics.Monitoring.PerformanceCounterWatcher.updateInterval">
            <summary>
              The update interval.
            </summary>
        </member>
        <member name="M:ExitGames.Diagnostics.Monitoring.PerformanceCounterWatcher.#ctor(System.String,System.String)">
            <summary>
              Initializes a new instance of the <see cref="T:ExitGames.Diagnostics.Monitoring.PerformanceCounterWatcher"/> class.
            </summary>
            <param name="category">
              The category.
            </param>
            <param name="instancePattern">
              The instance pattern.
            </param>
        </member>
        <member name="M:ExitGames.Diagnostics.Monitoring.PerformanceCounterWatcher.Start(System.Int32)">
            <summary>
              Starts the watcher.
            </summary>
            <param name = "updateIntervalTime">
              The update interval.
            </param>
        </member>
        <member name="M:ExitGames.Diagnostics.Monitoring.PerformanceCounterWatcher.Update">
            <summary>
              This method reads all instances.
            </summary>
        </member>
        <member name="M:ExitGames.Diagnostics.Monitoring.PerformanceCounterWatcher.TimerCallback(System.Object)">
            <summary>
              timer callback.
            </summary>
            <param name = "state">
              The state.
            </param>
        </member>
        <member name="E:ExitGames.Diagnostics.Monitoring.PerformanceCounterWatcher.InstancesRemoved">
            <summary>
              Invoked when a windows performance counter instances are removed.
            </summary>
        </member>
        <member name="E:ExitGames.Diagnostics.Monitoring.PerformanceCounterWatcher.NewInstances">
            <summary>
              Invoked when new windows performance counter instances are added.
            </summary>
        </member>
        <member name="T:ExitGames.Extensions.DateTimeExtensions">
            <summary>
            Date time extension methods.
            </summary>
        </member>
        <member name="F:ExitGames.Extensions.DateTimeExtensions.UnixBaseDate">
            <summary>
            unix base date.
            </summary>
        </member>
        <member name="M:ExitGames.Extensions.DateTimeExtensions.FromUnixTime(System.Double)">
            <summary>
            Convert unix time stamp to <see cref="T:System.DateTime"/>.
            </summary>
            <param name="timestamp">
            The timestamp.
            </param>
            <returns>
            A new <see cref="T:System.DateTime"/>.
            </returns>
        </member>
        <member name="M:ExitGames.Extensions.DateTimeExtensions.FromUnixTime(System.DateTime,System.Double)">
            <summary>
            Convert unix time stamp to <see cref="T:System.DateTime"/>.
            </summary>
            <param name="dateTime">
            The date time.
            </param>
            <param name="timestamp">
            The timestamp.
            </param>
            <returns>
            A new <see cref="T:System.DateTime"/>.
            </returns>
        </member>
        <member name="T:ExitGames.IO.BigEndianBinaryReader">
            <summary>
              DataInputStreamWrapper provides functions to Read binary data from a stream.
            </summary>
        </member>
        <member name="T:ExitGames.IO.IBinaryReader">
            <summary>
              Interface for a binary reader.
            </summary>
        </member>
        <member name="M:ExitGames.IO.IBinaryReader.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
              Reads bytes from the stream.
            </summary>
            <param name = "buffer">
              The buffer.
            </param>
            <param name = "offset">
              The offset.
            </param>
            <param name = "count">
              The count.
            </param>
            <returns>
              The read.
            </returns>
        </member>
        <member name="M:ExitGames.IO.IBinaryReader.ReadBoolean">
            <summary>
              Reads a boolean from the stream.
            </summary>
            <returns>
              The read boolean.
            </returns>
        </member>
        <member name="M:ExitGames.IO.IBinaryReader.ReadByte">
            <summary>
              Reads a byte from the stream.
            </summary>
            <returns>
              The read byte.
            </returns>
        </member>
        <member name="M:ExitGames.IO.IBinaryReader.ReadBytes(System.Int32)">
            <summary>
              Reads bytes from the stream.
            </summary>
            <param name = "length">
              The length.
            </param>
            <returns>
              A byte array.
            </returns>
        </member>
        <member name="M:ExitGames.IO.IBinaryReader.ReadChar">
            <summary>
              Reads a char from the stream.
            </summary>
            <returns>
              The read char.
            </returns>
        </member>
        <member name="M:ExitGames.IO.IBinaryReader.ReadDouble">
            <summary>
              Reads a double from the stream.
            </summary>
            <returns>
              The read double.
            </returns>
        </member>
        <member name="M:ExitGames.IO.IBinaryReader.ReadInt16">
            <summary>
              Reads a short from the stream.
            </summary>
            <returns>
              The read short.
            </returns>
        </member>
        <member name="M:ExitGames.IO.IBinaryReader.ReadInt32">
            <summary>
              Reads an integer from the stream.
            </summary>
            <returns>
              The read integer.
            </returns>
        </member>
        <member name="M:ExitGames.IO.IBinaryReader.ReadInt64">
            <summary>
              Eeads a long from the stream.
            </summary>
            <returns>
              The read long.
            </returns>
        </member>
        <member name="M:ExitGames.IO.IBinaryReader.ReadSingle">
            <summary>
              Reads an 4-byte floating point value from the stream.
            </summary>
            <returns>
              The read float.
            </returns>
        </member>
        <member name="P:ExitGames.IO.IBinaryReader.BaseStream">
            <summary>
              Gets the base stream.
            </summary>
        </member>
        <member name="F:ExitGames.IO.BigEndianBinaryReader.stream">
            <summary>
              The stream to read from.
            </summary>
        </member>
        <member name="M:ExitGames.IO.BigEndianBinaryReader.#ctor(System.IO.Stream)">
            <summary>
              Initializes a new instance of the <see cref="T:ExitGames.IO.BigEndianBinaryReader"/> class.
            </summary>
            <param name="stream">
              The stream to read from.
            </param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="stream"/> is null.
            </exception>
        </member>
        <member name="M:ExitGames.IO.BigEndianBinaryReader.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
              Reads a sequence of bytes from the current stream and advances 
              the position within the stream by the number of bytes read.
            </summary>
            <param name = "buffer">
              An array of bytes. When this method returns, the buffer contains 
              the specified byte array with the values between offset and (offset + count - 1) 
              replaced by the bytes read from the current source. 
            </param>
            <param name = "offset">
              The zero-based byte offset in buffer at which to begin storing 
              the data read from the current stream.
            </param>
            <param name = "count">
              The maximum number of bytes to be read from the current stream. 
            </param>
            <returns>
              The total number of bytes read into the buffer. 
              This can be less than the number of bytes requested if that many 
              bytes are not currently available, or zero (0) if the end of the 
              stream has been reached. 
            </returns>
        </member>
        <member name="M:ExitGames.IO.BigEndianBinaryReader.ReadBoolean">
            <summary>
              Reads a Boolean value from the current stream and advances the current 
              position of the stream by one byte.
            </summary>
            <returns>
              Type: <see cref="T:System.Boolean"/>
              True if the byte is nonzero; otherwise, false. 
            </returns>
        </member>
        <member name="M:ExitGames.IO.BigEndianBinaryReader.ReadByte">
            <summary>
              Reads the next byte from the current stream and advances the current 
              position of the stream by one byte.
            </summary>
            <returns>
              The read byte.
            </returns>
        </member>
        <member name="M:ExitGames.IO.BigEndianBinaryReader.ReadBytes(System.Int32)">
            <summary>
              Reads bytes.
            </summary>
            <param name = "length">
              The length.
            </param>
            <returns>
              A byte array.
            </returns>
        </member>
        <member name="M:ExitGames.IO.BigEndianBinaryReader.ReadChar">
            <summary>
              Reads a char.
            </summary>
            <returns>
              The read char.
            </returns>
        </member>
        <member name="M:ExitGames.IO.BigEndianBinaryReader.ReadDouble">
            <summary>
              Reads an 8-byte floating point value from the current stream and advances 
              the current position of the stream by eight bytes.
            </summary>
            <returns>
              The read double.
            </returns>
        </member>
        <member name="M:ExitGames.IO.BigEndianBinaryReader.ReadInt16">
            <summary>
              Reads a 2-byte signed integer from the current stream and advances the 
              current position of the stream by two bytes.
            </summary>
            <returns>
              Type: <see cref="T:System.Int16"/>
              A 2-byte signed integer read from the current stream.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
              The stream is closed.
            </exception>
        </member>
        <member name="M:ExitGames.IO.BigEndianBinaryReader.ReadInt32">
            <summary>
              Reads a 4-byte signed integer from the current stream 
              and advances the current position of the stream by four bytes.
            </summary>
            Type:
            <see cref="T:System.Int32"/>
            A 4-byte signed integer read from the current stream.
            <returns>
              The read int 32.
            </returns>
        </member>
        <member name="M:ExitGames.IO.BigEndianBinaryReader.ReadInt64">
            <summary>
              Read a long (64 bit) from the stream.
            </summary>
            <returns>
              A long.
            </returns>
        </member>
        <member name="M:ExitGames.IO.BigEndianBinaryReader.ReadSingle">
            <summary>
              Reads an 4-byte floating point value from the current stream and advances the current position of the stream by four bytes.
            </summary>
            <returns>
              The read single.
            </returns>
        </member>
        <member name="M:ExitGames.IO.BigEndianBinaryReader.ReadBytesFromStream(System.IO.Stream,System.Int32)">
            <summary>
              Read bytes from a stream.
            </summary>
            <param name = "data">
              The data.
            </param>
            <param name = "length">
              The length.
            </param>
            <returns>
              A byte array.
            </returns>
        </member>
        <member name="P:ExitGames.IO.BigEndianBinaryReader.BaseStream">
            <summary>
              Gets the underlying stream of the <see cref="T:ExitGames.IO.BigEndianBinaryReader"/>.
            </summary>
        </member>
        <member name="T:ExitGames.IO.BigEndianBinaryWriter">
            <summary>
              Provides methods to write binary data into a <see cref="T:System.IO.Stream">stream</see>.
            </summary>
        </member>
        <member name="T:ExitGames.IO.IBinaryWriter">
            <summary>
            The interface for a binary writer.
            </summary>
        </member>
        <member name="M:ExitGames.IO.IBinaryWriter.WriteBoolean(System.Boolean)">
            <summary>
            Writes a boolean.
            </summary>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="M:ExitGames.IO.IBinaryWriter.WriteByte(System.Byte)">
            <summary>
            Writes a byte.
            </summary>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="M:ExitGames.IO.IBinaryWriter.WriteBytes(System.Byte[])">
            <summary>
            Writes bytes.
            </summary>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="M:ExitGames.IO.IBinaryWriter.WriteChar(System.Char)">
            <summary>
            Writes a char.
            </summary>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="M:ExitGames.IO.IBinaryWriter.WriteDouble(System.Double)">
            <summary>
            write double.
            </summary>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="M:ExitGames.IO.IBinaryWriter.WriteSingle(System.Single)">
            <summary>
            Writes a 32-bit floating point value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ExitGames.IO.IBinaryWriter.WriteInt16(System.Int16)">
            <summary>
            Writes a short.
            </summary>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="M:ExitGames.IO.IBinaryWriter.WriteInt32(System.Int32)">
            <summary>
            Writes an integer.
            </summary>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="M:ExitGames.IO.IBinaryWriter.WriteInt64(System.Int64)">
            <summary>
            Writes a long.
            </summary>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="M:ExitGames.IO.IBinaryWriter.WriteUTF(System.String)">
            <summary>
            Writes an utf8 encoded string.
            </summary>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="P:ExitGames.IO.IBinaryWriter.Stream">
            <summary>
            Gets the underlying stream.
            </summary>
        </member>
        <member name="F:ExitGames.IO.BigEndianBinaryWriter.stream">
            <summary>
              The stream.
            </summary>
        </member>
        <member name="M:ExitGames.IO.BigEndianBinaryWriter.#ctor(System.IO.Stream)">
            <summary>
              Initializes a new instance of the <see cref="T:ExitGames.IO.BigEndianBinaryWriter"/> class.
            </summary>
            <param name="stream">
              The stream to write to.
            </param>
        </member>
        <member name="M:ExitGames.IO.BigEndianBinaryWriter.WriteByte(System.IO.Stream,System.Byte)">
            <summary>
              Writes a byte to the stream.
            </summary>
            <param name = "stream">
              The stream.
            </param>
            <param name = "value">
              The value.
            </param>
        </member>
        <member name="M:ExitGames.IO.BigEndianBinaryWriter.WriteInt16(System.IO.Stream,System.Int16)">
            <summary>
              Writes a short to the stream.
            </summary>
            <param name = "stream">
              The stream.
            </param>
            <param name = "value">
              The value.
            </param>
        </member>
        <member name="M:ExitGames.IO.BigEndianBinaryWriter.WriteBoolean(System.Boolean)">
            <summary>
              Writes a bool to the stream.
            </summary>
            <param name = "value">
              The value.
            </param>
        </member>
        <member name="M:ExitGames.IO.BigEndianBinaryWriter.WriteByte(System.Byte)">
            <summary>
              Writes a <see cref="T:System.Byte"/> to the stream.
            </summary>
            <param name="value">
              The value.
            </param>
        </member>
        <member name="M:ExitGames.IO.BigEndianBinaryWriter.WriteBytes(System.Byte[])">
            <summary>
              Write bytes to the stream.
            </summary>
            <param name = "value">
              The bytes.
            </param>
        </member>
        <member name="M:ExitGames.IO.BigEndianBinaryWriter.WriteChar(System.Char)">
            <summary>
              Write a char to the stream.
            </summary>
            <param name = "value">
              The value.
            </param>
        </member>
        <member name="M:ExitGames.IO.BigEndianBinaryWriter.WriteDouble(System.Double)">
            <summary>
              Writes an eight-byte floating-point value to the current stream 
              and advances the stream position by eight bytes.
            </summary>
            <param name = "value">
              The eight-byte floating-point value to write.
            </param>
        </member>
        <member name="M:ExitGames.IO.BigEndianBinaryWriter.WriteInt16(System.Int16)">
            <summary>
              Writes a short (16 bit) to the stream.
            </summary>
            <param name = "value">
              The value.
            </param>
        </member>
        <member name="M:ExitGames.IO.BigEndianBinaryWriter.WriteInt32(System.Int32)">
            <summary>
              Writes a int (32bit) to the stream.
            </summary>
            <param name = "value">
              The value.
            </param>
        </member>
        <member name="M:ExitGames.IO.BigEndianBinaryWriter.WriteInt64(System.Int64)">
            <summary>
              Writes a long (64 bit) to the stream.
            </summary>
            <param name = "value">
              The value.
            </param>
        </member>
        <member name="M:ExitGames.IO.BigEndianBinaryWriter.WriteSingle(System.Single)">
            <summary>
              Writes an four-byte floating-point value to the current stream 
              and advances the stream position by eight bytes.
            </summary>
            <param name = "value">
              The eight-byte floating-point value to write.
            </param>
        </member>
        <member name="M:ExitGames.IO.BigEndianBinaryWriter.WriteUTF(System.String)">
            <summary>
              Writes a UTF8 encoded string to the stream.
            </summary>
            <param name = "value">
              The value.
            </param>
        </member>
        <member name="P:ExitGames.IO.BigEndianBinaryWriter.Stream">
            <summary>
              Gets the underlying stream.
            </summary>
        </member>
        <member name="T:ExitGames.IO.BinaryConverter">
            <summary>
              This class converts binary data to streams and vice versa and de-/serialzes objects with the <see cref="T:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter"/>.
            </summary>
        </member>
        <member name="F:ExitGames.IO.BinaryConverter.formatter">
            <summary>
              The thread static formatter.
            </summary>
        </member>
        <member name="M:ExitGames.IO.BinaryConverter.ConvertStreamToByteArray(System.IO.Stream,System.Int32)">
            <summary>
              Converts a stream to a byte array.
            </summary>
            <param name="data">
              The data.
            </param>
            <param name="length">
              The length.
            </param>
            <returns>
              A byte array.
            </returns>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="data"/> is null.
            </exception>
        </member>
        <member name="M:ExitGames.IO.BinaryConverter.Deserialize``1(System.Byte[],System.Int32,System.Int32)">
            <summary>
              Converts a byte array to an object of type T with the <see cref="T:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter"/>.
            </summary>
            <typeparam name="T">
              The object type.
            </typeparam>
            <param name="bytes">
              A serialized object of Type T.
            </param>
            <param name="index">
              The start index.
            </param>
            <param name="count">
              The length to the serialized object.
            </param>
            <returns>
              An object of type T.
            </returns>
        </member>
        <member name="M:ExitGames.IO.BinaryConverter.Deserialize``1(System.Byte[])">
            <summary>
              Converts a byte array to an object of type T with the <see cref="T:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter"/>.
            </summary>
            <param name="bytes">
              The bytes.
            </param>
            <typeparam name="T">
              The object type.
            </typeparam>
            <returns>
              An object of type T.
            </returns>
        </member>
        <member name="M:ExitGames.IO.BinaryConverter.GetBinaryFormatterThreadStatic">
            <summary>
              Gets a thread static <see cref="T:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter"/>.
            </summary>
            <returns>
              A thread static <see cref="T:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter"/>.
            </returns>
        </member>
        <member name="M:ExitGames.IO.BinaryConverter.ReadBytesFromStream(System.IO.Stream,System.Int32)">
            <summary>
              Reads the given amount of bytes from a stream.
            </summary>
            <param name="data">
              The stream.
            </param>
            <param name="length">
              The length to read.
            </param>
            <returns>
              A byte array.
            </returns>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="data"/> is null.
            </exception>
        </member>
        <member name="M:ExitGames.IO.BinaryConverter.Serialize``1(``0@)">
            <summary>
              Serializes an object of type T.
            </summary>
            <typeparam name = "T">
              The object type.
            </typeparam>
            <param name = "data">
              The object to serialize.
            </param>
            <returns>
              A byte array.
            </returns>
        </member>
        <member name="T:ExitGames.Logging.ILogger">
            <summary>
              Interface for a logger.
            </summary>
        </member>
        <member name="M:ExitGames.Logging.ILogger.Debug(System.Object)">
            <summary>
              Logs a debug message.
            </summary>
            <param name = "message">
              The message.
            </param>
        </member>
        <member name="M:ExitGames.Logging.ILogger.Debug(System.Object,System.Exception)">
            <summary>
              Logs a debug message with an exception.
            </summary>
            <param name = "message">
              The message.
            </param>
            <param name = "exception">
              The exception.
            </param>
        </member>
        <member name="M:ExitGames.Logging.ILogger.DebugFormat(System.String,System.Object[])">
            <summary>
              Logs a formatted debug message.
            </summary>
            <param name = "format">
              The formatted string.
            </param>
            <param name = "args">
              The args.
            </param>
        </member>
        <member name="M:ExitGames.Logging.ILogger.DebugFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
              Logs a formatted debug message.
            </summary>
            <param name = "provider">
              The provider.
            </param>
            <param name = "format">
              The formatted string.
            </param>
            <param name = "args">
              The args.
            </param>
        </member>
        <member name="M:ExitGames.Logging.ILogger.Error(System.Object)">
            <summary>
              Logs an error message.
            </summary>
            <param name = "message">
              The message.
            </param>
        </member>
        <member name="M:ExitGames.Logging.ILogger.Error(System.Object,System.Exception)">
            <summary>
              Logs an error message with an exception.
            </summary>
            <param name = "message">
              The message.
            </param>
            <param name = "exception">
              The exception.
            </param>
        </member>
        <member name="M:ExitGames.Logging.ILogger.ErrorFormat(System.String,System.Object[])">
            <summary>
              Logs a formatted error message.
            </summary>
            <param name = "format">
              The formatted string.
            </param>
            <param name = "args">
              The args.
            </param>
        </member>
        <member name="M:ExitGames.Logging.ILogger.ErrorFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
              Logs a formatted error message.
            </summary>
            <param name = "provider">
              The provider.
            </param>
            <param name = "format">
              The formatted string.
            </param>
            <param name = "args">
              The args.
            </param>
        </member>
        <member name="M:ExitGames.Logging.ILogger.Fatal(System.Object)">
            <summary>
              Logs a fatal message.
            </summary>
            <param name = "message">
              The message.
            </param>
        </member>
        <member name="M:ExitGames.Logging.ILogger.Fatal(System.Object,System.Exception)">
            <summary>
              Logs a fatal message with an exception.
            </summary>
            <param name = "message">
              The message.
            </param>
            <param name = "exception">
              The exception.
            </param>
        </member>
        <member name="M:ExitGames.Logging.ILogger.FatalFormat(System.String,System.Object[])">
            <summary>
              Logs a formatted fatal message.
            </summary>
            <param name = "format">
              The formatted string.
            </param>
            <param name = "args">
              The args.
            </param>
        </member>
        <member name="M:ExitGames.Logging.ILogger.FatalFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
              Logs a formatted fatal message.
            </summary>
            <param name = "provider">
              The provider.
            </param>
            <param name = "format">
              The formatted string.
            </param>
            <param name = "args">
              The args.
            </param>
        </member>
        <member name="M:ExitGames.Logging.ILogger.Info(System.Object)">
            <summary>
              Logs an info message.
            </summary>
            <param name = "message">
              The message.
            </param>
        </member>
        <member name="M:ExitGames.Logging.ILogger.Info(System.Object,System.Exception)">
            <summary>
              Logs a info message with an exception.
            </summary>
            <param name = "message">
              The message.
            </param>
            <param name = "exception">
              The exception.
            </param>
        </member>
        <member name="M:ExitGames.Logging.ILogger.InfoFormat(System.String,System.Object[])">
            <summary>
              Logs a formatted info message.
            </summary>
            <param name = "format">
              The formatted string.
            </param>
            <param name = "args">
              The args.
            </param>
        </member>
        <member name="M:ExitGames.Logging.ILogger.InfoFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
              Logs a formatted info message.
            </summary>
            <param name = "provider">
              The provider.
            </param>
            <param name = "format">
              The formatted string.
            </param>
            <param name = "args">
              The args.
            </param>
        </member>
        <member name="M:ExitGames.Logging.ILogger.Warn(System.Object)">
            <summary>
              Logs a warning.
            </summary>
            <param name = "message">
              The message.
            </param>
        </member>
        <member name="M:ExitGames.Logging.ILogger.Warn(System.Object,System.Exception)">
            <summary>
              Logs a warning with an exception.
            </summary>
            <param name = "message">
              The message.
            </param>
            <param name = "exception">
              The exception.
            </param>
        </member>
        <member name="M:ExitGames.Logging.ILogger.WarnFormat(System.String,System.Object[])">
            <summary>
              Logs a formatted warning.
            </summary>
            <param name = "format">
              The formatted string.
            </param>
            <param name = "args">
              The args.
            </param>
        </member>
        <member name="M:ExitGames.Logging.ILogger.WarnFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
              Logs a formatted warning.
            </summary>
            <param name = "provider">
              The provider.
            </param>
            <param name = "format">
              The formatted string.
            </param>
            <param name = "args">
              The args.
            </param>
        </member>
        <member name="P:ExitGames.Logging.ILogger.IsDebugEnabled">
            <summary>
              Gets a value indicating whether debug logging level is enabled.
            </summary>
        </member>
        <member name="P:ExitGames.Logging.ILogger.IsErrorEnabled">
            <summary>
              Gets a value indicating whether error logging level is enabled.
            </summary>
        </member>
        <member name="P:ExitGames.Logging.ILogger.IsFatalEnabled">
            <summary>
              Gets a value indicating whether fatal logging level is enabled.
            </summary>
        </member>
        <member name="P:ExitGames.Logging.ILogger.IsInfoEnabled">
            <summary>
              Gets a value indicating whether info logging level is enabled.
            </summary>
        </member>
        <member name="P:ExitGames.Logging.ILogger.IsWarnEnabled">
            <summary>
              Gets a value indicating whether warn logging level is enabled.
            </summary>
        </member>
        <member name="P:ExitGames.Logging.ILogger.Name">
            <summary>
              Gets the name.
            </summary>
        </member>
        <member name="T:ExitGames.Logging.ILoggerFactory">
            <summary>
            The implementor creates <see cref="T:ExitGames.Logging.ILogger"/> instances.
            </summary>
        </member>
        <member name="M:ExitGames.Logging.ILoggerFactory.CreateLogger(System.String)">
            <summary>
            Creates a logger for a name.
            </summary>
            <param name="name">
            The name.
            </param>
            <returns>
            A new <see cref="T:ExitGames.Logging.ILogger"/>.
            </returns>
        </member>
        <member name="T:ExitGames.Logging.LogManager">
            <summary>
              The log manager provides methods to get instances of <see cref="T:ExitGames.Logging.ILogger"/> using a <see cref="T:ExitGames.Logging.ILoggerFactory"/>.
              Any logging framework of choice can be used by assigining a new <see cref="T:ExitGames.Logging.ILoggerFactory"/> with <see cref="M:ExitGames.Logging.LogManager.SetLoggerFactory(ExitGames.Logging.ILoggerFactory)"/>.
              The default logger factory creates <see cref="T:ExitGames.Logging.ILogger"/> that do not log
            </summary>
        </member>
        <member name="F:ExitGames.Logging.LogManager.createLoggerCount">
            <summary>
              The number of loggers created.
            </summary>
        </member>
        <member name="F:ExitGames.Logging.LogManager.loggerFactory">
            <summary>
              The used logger factory.
            </summary>
        </member>
        <member name="M:ExitGames.Logging.LogManager.#cctor">
            <summary>
              Initializes static members of the <see cref="T:ExitGames.Logging.LogManager"/> class.
              Sets the default logger factory.
            </summary>
        </member>
        <member name="M:ExitGames.Logging.LogManager.GetCurrentClassLogger">
            <summary>
              Gets an <see cref="T:ExitGames.Logging.ILogger"/> for the calling class type.
            </summary>
            <returns>
              A new <see cref="T:ExitGames.Logging.ILogger"/> for the calling class type.
            </returns>
        </member>
        <member name="M:ExitGames.Logging.LogManager.GetLogger(System.String)">
            <summary>
              Gets an <see cref="T:ExitGames.Logging.ILogger"/> for the specified name.
            </summary>
            <param name="name">
              The name.
            </param>
            <returns>
              A new <see cref="T:ExitGames.Logging.ILogger"/> for the specified <paramref name="name"/>.
            </returns>
        </member>
        <member name="M:ExitGames.Logging.LogManager.SetLoggerFactory(ExitGames.Logging.ILoggerFactory)">
            <summary>
              Assigns a new <see cref="T:ExitGames.Logging.ILoggerFactory"/> to create <see cref="T:ExitGames.Logging.ILogger"/> instances.
            </summary>
            <param name="factory">
              The new factory. Set null to disable logging.
            </param>
        </member>
        <member name="T:ExitGames.Logging.LogManager.EmptyLogger">
            <summary>
              A logger that does nothing.
            </summary>
        </member>
        <member name="F:ExitGames.Logging.LogManager.EmptyLogger.name">
            <summary>
              The name.
            </summary>
        </member>
        <member name="M:ExitGames.Logging.LogManager.EmptyLogger.#ctor(System.String)">
            <summary>
              Initializes a new instance of the <see cref="T:ExitGames.Logging.LogManager.EmptyLogger"/> class.
            </summary>
            <param name="name">
              The name.
            </param>
        </member>
        <member name="M:ExitGames.Logging.LogManager.EmptyLogger.Debug(System.Object)">
            <summary>
              Does nothing.
            </summary>
            <param name = "message">
              The message.
            </param>
        </member>
        <member name="M:ExitGames.Logging.LogManager.EmptyLogger.Debug(System.Object,System.Exception)">
            <summary>
              Does nothing.
            </summary>
            <param name = "message">
              The message.
            </param>
            <param name = "exception">
              The exception.
            </param>
        </member>
        <member name="M:ExitGames.Logging.LogManager.EmptyLogger.DebugFormat(System.String,System.Object[])">
            <summary>
              Does nothing.
            </summary>
            <param name = "format">
              The format.
            </param>
            <param name = "args">
              The args.
            </param>
        </member>
        <member name="M:ExitGames.Logging.LogManager.EmptyLogger.DebugFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
              Does nothing.
            </summary>
            <param name = "provider">
              The provider.
            </param>
            <param name = "format">
              The format.
            </param>
            <param name = "args">
              The args.
            </param>
        </member>
        <member name="M:ExitGames.Logging.LogManager.EmptyLogger.Error(System.Object)">
            <summary>
              Does nothing.
            </summary>
            <param name = "message">
              The message.
            </param>
        </member>
        <member name="M:ExitGames.Logging.LogManager.EmptyLogger.Error(System.Object,System.Exception)">
            <summary>
              Does nothing.
            </summary>
            <param name = "message">
              The message.
            </param>
            <param name = "exception">
              The exception.
            </param>
        </member>
        <member name="M:ExitGames.Logging.LogManager.EmptyLogger.ErrorFormat(System.String,System.Object[])">
            <summary>
              Does nothing.
            </summary>
            <param name = "format">
              The format.
            </param>
            <param name = "args">
              The args.
            </param>
        </member>
        <member name="M:ExitGames.Logging.LogManager.EmptyLogger.ErrorFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
              Does nothing.
            </summary>
            <param name = "provider">
              The provider.
            </param>
            <param name = "format">
              The format.
            </param>
            <param name = "args">
              The args.
            </param>
        </member>
        <member name="M:ExitGames.Logging.LogManager.EmptyLogger.Fatal(System.Object)">
            <summary>
              Does nothing.
            </summary>
            <param name = "message">
              The message.
            </param>
        </member>
        <member name="M:ExitGames.Logging.LogManager.EmptyLogger.Fatal(System.Object,System.Exception)">
            <summary>
              Does nothing.
            </summary>
            <param name = "message">
              The message.
            </param>
            <param name = "exception">
              The exception.
            </param>
        </member>
        <member name="M:ExitGames.Logging.LogManager.EmptyLogger.FatalFormat(System.String,System.Object[])">
            <summary>
              Does nothing.
            </summary>
            <param name = "format">
              The format.
            </param>
            <param name = "args">
              The args.
            </param>
        </member>
        <member name="M:ExitGames.Logging.LogManager.EmptyLogger.FatalFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
              Does nothing.
            </summary>
            <param name = "provider">
              The provider.
            </param>
            <param name = "format">
              The format.
            </param>
            <param name = "args">
              The args.
            </param>
        </member>
        <member name="M:ExitGames.Logging.LogManager.EmptyLogger.Info(System.Object)">
            <summary>
              Does nothing.
            </summary>
            <param name = "message">
              The message.
            </param>
        </member>
        <member name="M:ExitGames.Logging.LogManager.EmptyLogger.Info(System.Object,System.Exception)">
            <summary>
              Does nothing.
            </summary>
            <param name = "message">
              The message.
            </param>
            <param name = "exception">
              The exception.
            </param>
        </member>
        <member name="M:ExitGames.Logging.LogManager.EmptyLogger.InfoFormat(System.String,System.Object[])">
            <summary>
              Does nothing.
            </summary>
            <param name = "format">
              The format.
            </param>
            <param name = "args">
              The args.
            </param>
        </member>
        <member name="M:ExitGames.Logging.LogManager.EmptyLogger.InfoFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
              Does nothing.
            </summary>
            <param name = "provider">
              The provider.
            </param>
            <param name = "format">
              The format.
            </param>
            <param name = "args">
              The args.
            </param>
        </member>
        <member name="M:ExitGames.Logging.LogManager.EmptyLogger.Warn(System.Object)">
            <summary>
              Does nothing.
            </summary>
            <param name = "message">
              The message.
            </param>
        </member>
        <member name="M:ExitGames.Logging.LogManager.EmptyLogger.Warn(System.Object,System.Exception)">
            <summary>
              Does nothing.
            </summary>
            <param name = "message">
              The message.
            </param>
            <param name = "exception">
              The exception.
            </param>
        </member>
        <member name="M:ExitGames.Logging.LogManager.EmptyLogger.WarnFormat(System.String,System.Object[])">
            <summary>
              Does nothing.
            </summary>
            <param name = "format">
              The format.
            </param>
            <param name = "args">
              The args.
            </param>
        </member>
        <member name="M:ExitGames.Logging.LogManager.EmptyLogger.WarnFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
              Does nothing.
            </summary>
            <param name = "provider">
              The provider.
            </param>
            <param name = "format">
              The format.
            </param>
            <param name = "args">
              The args.
            </param>
        </member>
        <member name="P:ExitGames.Logging.LogManager.EmptyLogger.IsDebugEnabled">
            <summary>
              Gets a value indicating whether IsDebugEnabled.
            </summary>
            <value>Always false.</value>
        </member>
        <member name="P:ExitGames.Logging.LogManager.EmptyLogger.IsErrorEnabled">
            <summary>
              Gets a value indicating whether IsErrorEnabled.
            </summary>
            <value>Always false.</value>
        </member>
        <member name="P:ExitGames.Logging.LogManager.EmptyLogger.IsFatalEnabled">
            <summary>
              Gets a value indicating whether IsFatalEnabled.
            </summary>
            <value>Always false.</value>
        </member>
        <member name="P:ExitGames.Logging.LogManager.EmptyLogger.IsInfoEnabled">
            <summary>
              Gets a value indicating whether IsInfoEnabled.
            </summary>
            <value>Always false.</value>
        </member>
        <member name="P:ExitGames.Logging.LogManager.EmptyLogger.IsWarnEnabled">
            <summary>
              Gets a value indicating whether IsWarnEnabled.
            </summary>
            <value>Always false.</value>
        </member>
        <member name="P:ExitGames.Logging.LogManager.EmptyLogger.Name">
            <summary>
              Gets the logger name.
            </summary>
        </member>
        <member name="T:ExitGames.Logging.LogManager.EmptyLoggerFactory">
            <summary>
              An <see cref="T:ExitGames.Logging.ILoggerFactory"/> that creates <see cref="T:ExitGames.Logging.LogManager.EmptyLogger"/> instances.
              Assigning this factory disables logging.
            </summary>
        </member>
        <member name="F:ExitGames.Logging.LogManager.EmptyLoggerFactory.Instance">
            <summary>
              The singleton instance.
            </summary>
        </member>
        <member name="M:ExitGames.Logging.LogManager.EmptyLoggerFactory.CreateLogger(System.String)">
            <summary>
              Creates a new <see cref="T:ExitGames.Logging.LogManager.EmptyLogger"/>.
            </summary>
            <param name="name">
              The name.
            </param>
            <returns>
              A new <see cref="T:ExitGames.Logging.LogManager.EmptyLogger"/>
            </returns>
        </member>
        <member name="T:ExitGames.Logging.LogManager.LazyLoggerWrapper">
            <summary>
              A logger wrapper for lazy logger initialization. This fixes a problem where loggers are created before assigning a custom factory.
            </summary>
        </member>
        <member name="F:ExitGames.Logging.LogManager.LazyLoggerWrapper.name">
            <summary>
              The logger name.
            </summary>
        </member>
        <member name="F:ExitGames.Logging.LogManager.LazyLoggerWrapper.getLogger">
            <summary>
              A getter funcation for the logger.
              Initially it is mapped to <see cref="M:ExitGames.Logging.LogManager.LazyLoggerWrapper.CreateLogger"/>.
            </summary>
        </member>
        <member name="F:ExitGames.Logging.LogManager.LazyLoggerWrapper.logger">
            <summary>
              The used logger.
            </summary>
        </member>
        <member name="M:ExitGames.Logging.LogManager.LazyLoggerWrapper.#ctor(System.String)">
            <summary>
              Initializes a new instance of the <see cref="T:ExitGames.Logging.LogManager.LazyLoggerWrapper"/> class.
            </summary>
            <param name="name">
              The name.
            </param>
        </member>
        <member name="M:ExitGames.Logging.LogManager.LazyLoggerWrapper.Debug(System.Object)">
            <summary>
              Log a message.
            </summary>
            <param name = "message">
              The message.
            </param>
        </member>
        <member name="M:ExitGames.Logging.LogManager.LazyLoggerWrapper.Debug(System.Object,System.Exception)">
            <summary>
              Log a message.
            </summary>
            <param name = "message">
              The message.
            </param>
            <param name = "exception">
              The exception.
            </param>
        </member>
        <member name="M:ExitGames.Logging.LogManager.LazyLoggerWrapper.DebugFormat(System.String,System.Object[])">
            <summary>
              Log a message.
            </summary>
            <param name = "format">
              The format.
            </param>
            <param name = "args">
              The args.
            </param>
        </member>
        <member name="M:ExitGames.Logging.LogManager.LazyLoggerWrapper.DebugFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
              Log a message.
            </summary>
            <param name = "provider">
              The provider.
            </param>
            <param name = "format">
              The format.
            </param>
            <param name = "args">
              The args.
            </param>
        </member>
        <member name="M:ExitGames.Logging.LogManager.LazyLoggerWrapper.Error(System.Object)">
            <summary>
              Log a message.
            </summary>
            <param name = "message">
              The message.
            </param>
        </member>
        <member name="M:ExitGames.Logging.LogManager.LazyLoggerWrapper.Error(System.Object,System.Exception)">
            <summary>
              Log a message.
            </summary>
            <param name = "message">
              The message.
            </param>
            <param name = "exception">
              The exception.
            </param>
        </member>
        <member name="M:ExitGames.Logging.LogManager.LazyLoggerWrapper.ErrorFormat(System.String,System.Object[])">
            <summary>
              Log a message.
            </summary>
            <param name = "format">
              The format.
            </param>
            <param name = "args">
              The args.
            </param>
        </member>
        <member name="M:ExitGames.Logging.LogManager.LazyLoggerWrapper.ErrorFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
              Log a message.
            </summary>
            <param name = "provider">
              The provider.
            </param>
            <param name = "format">
              The format.
            </param>
            <param name = "args">
              The args.
            </param>
        </member>
        <member name="M:ExitGames.Logging.LogManager.LazyLoggerWrapper.Fatal(System.Object)">
            <summary>
              Log a message.
            </summary>
            <param name = "message">
              The message.
            </param>
        </member>
        <member name="M:ExitGames.Logging.LogManager.LazyLoggerWrapper.Fatal(System.Object,System.Exception)">
            <summary>
              Log a message.
            </summary>
            <param name = "message">
              The message.
            </param>
            <param name = "exception">
              The exception.
            </param>
        </member>
        <member name="M:ExitGames.Logging.LogManager.LazyLoggerWrapper.FatalFormat(System.String,System.Object[])">
            <summary>
              Log a message.
            </summary>
            <param name = "format">
              The format.
            </param>
            <param name = "args">
              The args.
            </param>
        </member>
        <member name="M:ExitGames.Logging.LogManager.LazyLoggerWrapper.FatalFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
              Log a message.
            </summary>
            <param name = "provider">
              The provider.
            </param>
            <param name = "format">
              The format.
            </param>
            <param name = "args">
              The args.
            </param>
        </member>
        <member name="M:ExitGames.Logging.LogManager.LazyLoggerWrapper.Info(System.Object)">
            <summary>
              Log a message.
            </summary>
            <param name = "message">
              The message.
            </param>
        </member>
        <member name="M:ExitGames.Logging.LogManager.LazyLoggerWrapper.Info(System.Object,System.Exception)">
            <summary>
              Log a message.
            </summary>
            <param name = "message">
              The message.
            </param>
            <param name = "exception">
              The exception.
            </param>
        </member>
        <member name="M:ExitGames.Logging.LogManager.LazyLoggerWrapper.InfoFormat(System.String,System.Object[])">
            <summary>
              Log a message.
            </summary>
            <param name = "format">
              The format.
            </param>
            <param name = "args">
              The args.
            </param>
        </member>
        <member name="M:ExitGames.Logging.LogManager.LazyLoggerWrapper.InfoFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
              Log a message.
            </summary>
            <param name = "provider">
              The provider.
            </param>
            <param name = "format">
              The format.
            </param>
            <param name = "args">
              The args.
            </param>
        </member>
        <member name="M:ExitGames.Logging.LogManager.LazyLoggerWrapper.Warn(System.Object)">
            <summary>
              Log a message.
            </summary>
            <param name = "message">
              The message.
            </param>
        </member>
        <member name="M:ExitGames.Logging.LogManager.LazyLoggerWrapper.Warn(System.Object,System.Exception)">
            <summary>
              Log a message.
            </summary>
            <param name = "message">
              The message.
            </param>
            <param name = "exception">
              The exception.
            </param>
        </member>
        <member name="M:ExitGames.Logging.LogManager.LazyLoggerWrapper.WarnFormat(System.String,System.Object[])">
            <summary>
              Log a message.
            </summary>
            <param name = "format">
              The format.
            </param>
            <param name = "args">
              The args.
            </param>
        </member>
        <member name="M:ExitGames.Logging.LogManager.LazyLoggerWrapper.WarnFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
              Log a message.
            </summary>
            <param name = "provider">
              The provider.
            </param>
            <param name = "format">
              The format.
            </param>
            <param name = "args">
              The args.
            </param>
        </member>
        <member name="M:ExitGames.Logging.LogManager.LazyLoggerWrapper.CreateLogger">
            <summary>
              Creates a new <see cref="T:ExitGames.Logging.ILogger"/> with the current logger factory.
              It then switches the <see cref="F:ExitGames.Logging.LogManager.LazyLoggerWrapper.getLogger"/> function to <see cref="M:ExitGames.Logging.LogManager.LazyLoggerWrapper.GetLogger"/>.
            </summary>
            <returns>
              A new <see cref="T:ExitGames.Logging.ILogger"/>.
            </returns>
        </member>
        <member name="M:ExitGames.Logging.LogManager.LazyLoggerWrapper.GetLogger">
            <summary>
              Returns the logger that was created with the factory.
            </summary>
            <returns>
              The logger that was created with the factory.
            </returns>
        </member>
        <member name="P:ExitGames.Logging.LogManager.LazyLoggerWrapper.IsDebugEnabled">
            <summary>
              Gets a value indicating whether IsDebugEnabled.
            </summary>
        </member>
        <member name="P:ExitGames.Logging.LogManager.LazyLoggerWrapper.IsErrorEnabled">
            <summary>
              Gets a value indicating whether IsErrorEnabled.
            </summary>
        </member>
        <member name="P:ExitGames.Logging.LogManager.LazyLoggerWrapper.IsFatalEnabled">
            <summary>
              Gets a value indicating whether IsFatalEnabled.
            </summary>
        </member>
        <member name="P:ExitGames.Logging.LogManager.LazyLoggerWrapper.IsInfoEnabled">
            <summary>
              Gets a value indicating whether IsInfoEnabled.
            </summary>
        </member>
        <member name="P:ExitGames.Logging.LogManager.LazyLoggerWrapper.IsWarnEnabled">
            <summary>
              Gets a value indicating whether IsWarnEnabled.
            </summary>
        </member>
        <member name="P:ExitGames.Logging.LogManager.LazyLoggerWrapper.Name">
            <summary>
              Gets Name.
            </summary>
        </member>
        <member name="T:ExitGames.Messaging.Channels.GenericSerializer`1">
            <summary>
            An <see cref="T:ExitGames.Messaging.Channels.IMessageSerializer`1"/> that uses the <see cref="T:ExitGames.IO.BinaryConverter"/> to serialze any message type.
            </summary>
            <typeparam name="T">
            The message type.
            </typeparam>
        </member>
        <member name="T:ExitGames.Messaging.Channels.IMessageSerializer`1">
            <summary>
              The implementor converts a message to a byte array and back.
              The <see cref="T:ExitGames.Messaging.Channels.IMessageSerializer`1"/> is used to de-/serialize messages to the <see cref="T:ExitGames.Messaging.Channels.TopicPublisher`1"/> and the <see cref="T:ExitGames.Messaging.Channels.TopicSubscription`1"/>.
            </summary>
            <typeparam name="T">
              The message type.
            </typeparam>
        </member>
        <member name="M:ExitGames.Messaging.Channels.IMessageSerializer`1.Deserialize(System.Byte[])">
            <summary>
              Deserializes a message.
            </summary>
            <param name = "bytes">
              The bytes.
            </param>
            <returns>
              A message.
            </returns>
        </member>
        <member name="M:ExitGames.Messaging.Channels.IMessageSerializer`1.Serialize(`0)">
            <summary>
              Serialize a message.
            </summary>
            <param name = "message">
              The message.
            </param>
            <returns>
              A byte array.
            </returns>
        </member>
        <member name="F:ExitGames.Messaging.Channels.GenericSerializer`1.Instance">
            <summary>
            The singleton.
            </summary>
        </member>
        <member name="M:ExitGames.Messaging.Channels.GenericSerializer`1.Deserialize(System.Byte[])">
            <summary>
            Deserializes the message with the <see cref="T:ExitGames.IO.BinaryConverter"/>.
            </summary>
            <param name="bytes">
            The serialized message.
            </param>
            <returns>
            A deserialized message.
            </returns>
        </member>
        <member name="M:ExitGames.Messaging.Channels.GenericSerializer`1.Serialize(`0)">
            <summary>
            Serializes the message with the <see cref="T:ExitGames.IO.BinaryConverter"/>.
            </summary>
            <param name="message">
            The message.
            </param>
            <returns>
            A serialized message.
            </returns>
        </member>
        <member name="T:ExitGames.Messaging.Channels.TopicChannel`1">
            <summary>
              this class is a hybrid between <see cref="T:ExitGames.Messaging.Channels.TopicSubscription`1"/> and <see cref="T:ExitGames.Messaging.Channels.TopicPublishChannel`1"/>: 
              it sends locally published messages through a <see cref="T:ExitGames.Net.Sockets.ISocketSender"/>  
              and receives remote messages through the <see cref="T:ExitGames.Messaging.Channels.TopicMessageReceiver"/>
            </summary>
            <typeparam name="T">
              the type of message
            </typeparam>
            <remarks>
              all instance members are thread safe if all constructor parameters are thread safe, too
            </remarks>
        </member>
        <member name="T:ExitGames.Messaging.Channels.TopicPublishChannel`1">
            <summary>
              A <see cref="T:ExitGames.Concurrency.Channels.IChannel`1"/> wrapper that extends class <see cref="T:ExitGames.Messaging.Channels.TopicPublisher`1"/>.
            </summary>
            <typeparam name="T">
              The message type.
            </typeparam>
            <remarks>
              All instance members are thread safe if all constructor parameters are thread safe, too.
            </remarks>
        </member>
        <member name="T:ExitGames.Messaging.Channels.TopicPublisher`1">
            <summary>
              This is a <see cref="T:ExitGames.Messaging.Channels.IPublisher`1"/> wrapper that sends all messages as <see cref="T:ExitGames.Messaging.Channels.TopicMessage"/> to a <see cref="T:ExitGames.Net.Sockets.ISocketSender"/>.
            </summary>
            <typeparam name="T">
              The message type.
            </typeparam>
            <remarks>
              All instance members are thread safe if all constructor parameters are thread safe, too
            </remarks>
        </member>
        <member name="T:ExitGames.Messaging.Channels.IPublisher`1">
            <summary>
              An <see cref="T:ExitGames.Concurrency.Channels.IPublisher`1"/> with an additional <see cref="M:ExitGames.Messaging.Channels.IPublisher`1.Publish(`0,System.Guid)"/> method that includes a host id.
              The host id is included to identify and filter received messages that were sent from the same host.
            </summary>
            <typeparam name="T">
              The message type.
            </typeparam>
        </member>
        <member name="M:ExitGames.Messaging.Channels.IPublisher`1.Publish(`0,System.Guid)">
            <summary>
              Publishes a message with a host id.
            </summary>
            <param name = "msg">
              The message .
            </param>
            <param name = "hostId">
              The host id is included to identify and filter received messages that were sent from the same host.
            </param>
            <returns>
              True if there is any receiver.
            </returns>
        </member>
        <member name="F:ExitGames.Messaging.Channels.TopicPublisher`1.log">
            <summary>
              The logger.
            </summary>
        </member>
        <member name="F:ExitGames.Messaging.Channels.TopicPublisher`1.hostId">
            <summary>
              The host id is added to each <see cref="T:ExitGames.Messaging.Channels.TopicMessage"/> to enable the <see cref="T:ExitGames.Messaging.Channels.TopicMessageReceiver"/> to filter messages on the same host.
            </summary>
        </member>
        <member name="F:ExitGames.Messaging.Channels.TopicPublisher`1.publisher">
            <summary>
              The publisher is usually a <see cref="T:ExitGames.Messaging.Channels.Channel`1"/>.
            </summary>
        </member>
        <member name="F:ExitGames.Messaging.Channels.TopicPublisher`1.sender">
            <summary>
              The socket sender sends the serialized <see cref="T:ExitGames.Messaging.Channels.TopicMessage"/> to a socket.
            </summary>
        </member>
        <member name="F:ExitGames.Messaging.Channels.TopicPublisher`1.serializer">
            <summary>
              The serializer converts a message to a byte array before sending them to the socket.
            </summary>
        </member>
        <member name="F:ExitGames.Messaging.Channels.TopicPublisher`1.topic">
            <summary>
              The topic is used to distinguish between different message types that are received and sent on the same socket.
            </summary>
        </member>
        <member name="M:ExitGames.Messaging.Channels.TopicPublisher`1.#ctor(System.String,ExitGames.Concurrency.Channels.IPublisher{`0},ExitGames.Net.Sockets.ISocketSender,ExitGames.Messaging.Channels.IMessageSerializer{`0},System.Guid)">
            <summary>
              Initializes a new instance of the <see cref="T:ExitGames.Messaging.Channels.TopicPublisher`1"/> class.
            </summary>
            <param name="topic">
              The topic is used to distinguish between different message types that are received and sent on the same socket.
            </param>
            <param name="publisher">
              The publisher is usually a <see cref="T:ExitGames.Messaging.Channels.Channel`1"/>.
            </param>
            <param name="socketSender">
              The socket sender sends the serialized <see cref="T:ExitGames.Messaging.Channels.TopicMessage"/> to a socket.
            </param>
            <param name="serializer">
              The serializer converts a message to a byte array before sending them to the socket.
            </param>
            <param name="hostId">
              The host id is added to each <see cref="T:ExitGames.Messaging.Channels.TopicMessage"/> to enable the <see cref="T:ExitGames.Messaging.Channels.TopicMessageReceiver"/> to filter messages of the same host.
            </param>
        </member>
        <member name="M:ExitGames.Messaging.Channels.TopicPublisher`1.SendToSocket(`0)">
            <summary>
              The <paramref name="message"/> is serialized with the <see cref="T:ExitGames.Messaging.Channels.IMessageSerializer`1"/> and then sent as <see cref="T:ExitGames.Messaging.Channels.TopicMessage"/> to the <see cref="T:ExitGames.Net.Sockets.ISocketSender"/>.
            </summary>
            <param name="message">
              The message.
            </param>
        </member>
        <member name="M:ExitGames.Messaging.Channels.TopicPublisher`1.Publish(`0,System.Guid)">
            <summary>
              publishes the message in the underlying topic 
              and calls <see cref="M:ExitGames.Messaging.Channels.TopicPublisher`1.SendToSocket(`0)"/> if the given hostId is the local host id (see constructor)
            </summary>
            <param name="msg">
              The msg.
            </param>
            <param name="theHostId">
              The host Id.
            </param>
            <returns>
              The publish.
            </returns>
        </member>
        <member name="M:ExitGames.Messaging.Channels.TopicPublisher`1.Publish(`0)">
            <summary>
              publishes the message in the underlying topic and calls <see cref="M:ExitGames.Messaging.Channels.TopicPublisher`1.SendToSocket(`0)"/>
            </summary>
            <param name="msg">
              The msg.
            </param>
            <returns>
              The publish.
            </returns>
        </member>
        <member name="P:ExitGames.Messaging.Channels.TopicPublisher`1.HostId">
            <summary>
              Gets the host id. The host id is added to each <see cref="T:ExitGames.Messaging.Channels.TopicMessage"/> to enable the <see cref="T:ExitGames.Messaging.Channels.TopicMessageReceiver"/> to filter messages on the same host.
            </summary>
        </member>
        <member name="P:ExitGames.Messaging.Channels.TopicPublisher`1.MessageSerializer">
            <summary>
              Gets the message serializer. The serializer converts a message to a byte array before sending them to the socket.
            </summary>
        </member>
        <member name="P:ExitGames.Messaging.Channels.TopicPublisher`1.Topic">
            <summary>
              Gets the topic. The topic is used to distinguish between different message types that are received and sent on the same socket.
            </summary>
        </member>
        <member name="P:ExitGames.Messaging.Channels.TopicPublisher`1.UnderlyingPublisher">
            <summary>
              Gets the underlying publisher which is usally a <see cref="T:ExitGames.Messaging.Channels.Channel`1"/>.
            </summary>
        </member>
        <member name="T:ExitGames.Messaging.Channels.IChannel`1">
            <summary>
              An <see cref="T:ExitGames.Concurrency.Channels.IChannel`1"/> implementing the <see cref="T:ExitGames.Messaging.Channels.IPublisher`1"/> interface.
            </summary>
            <typeparam name="T">
              The message type.
            </typeparam>
        </member>
        <member name="F:ExitGames.Messaging.Channels.TopicPublishChannel`1.log">
            <summary>
              The logger.
            </summary>
        </member>
        <member name="F:ExitGames.Messaging.Channels.TopicPublishChannel`1.channel">
            <summary>
              The wrapped channel.
            </summary>
        </member>
        <member name="M:ExitGames.Messaging.Channels.TopicPublishChannel`1.#ctor(System.String,ExitGames.Concurrency.Channels.IChannel{`0},ExitGames.Net.Sockets.ISocketSender,ExitGames.Messaging.Channels.IMessageSerializer{`0},System.Guid)">
            <summary>
              Initializes a new instance of the <see cref="T:ExitGames.Messaging.Channels.TopicPublishChannel`1"/> class.
            </summary>
            <param name="topic">
              The topic is used to distinguish between different message types that are received and sent on the same socket.
            </param>
            <param name="channel">
              The channel is usually a <see cref="T:ExitGames.Messaging.Channels.Channel`1"/>.
            </param>
            <param name="socketSender">
              The socket sender sends the serialized <see cref="T:ExitGames.Messaging.Channels.TopicMessage"/> to a socket.
            </param>
            <param name="serializer">
              The serializer converts a message to a byte array before sending them to the socket.
            </param>
            <param name="hostId">
              The host id is added to each <see cref="T:ExitGames.Messaging.Channels.TopicMessage"/> to enable the <see cref="T:ExitGames.Messaging.Channels.TopicMessageReceiver"/> to filter messages of the same host.
            </param>
        </member>
        <member name="M:ExitGames.Messaging.Channels.TopicPublishChannel`1.SubscribeOnProducerThreads(ExitGames.Concurrency.Channels.IProducerThreadSubscriber{`0})">
            <summary>
              Subscribes an <see cref="T:ExitGames.Concurrency.Channels.IProducerThreadSubscriber`1"/> that is invoked when <see cref="M:ExitGames.Messaging.Channels.TopicPublisher`1.Publish(`0,System.Guid)">Publish</see> is called.
            </summary>
            <param name="subscriber">
              The subscriber.
            </param>
            <returns>
              A disposable subscription.
            </returns>
        </member>
        <member name="M:ExitGames.Messaging.Channels.TopicPublishChannel`1.ClearSubscribers">
            <summary>
              Removes all subscribers.
            </summary>
        </member>
        <member name="M:ExitGames.Messaging.Channels.TopicPublishChannel`1.Subscribe(ExitGames.Concurrency.Fibers.IFiber,System.Action{`0})">
            <summary>
              Registers a callback on this channel that receives one message at a time.
            </summary>
            <param name = "fiber">
              The fiber executes the callback.
            </param>
            <param name = "receive">
              The callback action.
            </param>
            <returns>
              A disposable subscription.
            </returns>
        </member>
        <member name="M:ExitGames.Messaging.Channels.TopicPublishChannel`1.SubscribeToBatch(ExitGames.Concurrency.Fibers.IFiber,System.Action{System.Collections.Generic.IList{`0}},System.Int32)">
            <summary>
              Registers a callback on this channel that receives a list of messages.
            </summary>
            <param name="fiber">
              The fiber executes the callback.
            </param>
            <param name="receive">
              The callback action.
            </param>
            <param name="intervalInMs">
              The max delay in milliseconds until the callback is invoked after <see cref="M:ExitGames.Messaging.Channels.TopicPublisher`1.Publish(`0,System.Guid)">Publish</see> is called.
            </param>
            <returns>
              A disposable subscription.
            </returns>
        </member>
        <member name="M:ExitGames.Messaging.Channels.TopicPublishChannel`1.SubscribeToKeyedBatch``1(ExitGames.Concurrency.Fibers.IFiber,System.Converter{`0,``0},System.Action{System.Collections.Generic.IDictionary{``0,`0}},System.Int32)">
            <summary>
              Registers a callback on this channel that receives a dictionary of messages.
            </summary>
            <typeparam name="TK">
              The key type.
            </typeparam>
            <param name="fiber">
              The fiber executes the callback.
            </param>
            <param name="keyResolver">
              The key resolver maps messages to keys.
            </param>
            <param name="receive">
              The callback action.
            </param>
            <param name="intervalInMs">
              The max delay in milliseconds until the callback is invoked after <see cref="M:ExitGames.Messaging.Channels.TopicPublisher`1.Publish(`0,System.Guid)">Publish</see> is called.
            </param>
            <returns>
              A disposable subscription.
            </returns>
        </member>
        <member name="M:ExitGames.Messaging.Channels.TopicPublishChannel`1.SubscribeToLast(ExitGames.Concurrency.Fibers.IFiber,System.Action{`0},System.Int32)">
            <summary>
              Registers a callback on this channel that receives the last message after a timeout.
            </summary>
            <param name="fiber">
              The fiber executes the callback.
            </param>
            <param name="receive">
              The callback action.
            </param>
            <param name="intervalInMs">
              The max delay in milliseconds until the callback is invoked after <see cref="M:ExitGames.Messaging.Channels.TopicPublisher`1.Publish(`0,System.Guid)">Publish</see> is called.
            </param>
            <returns>
              A disposable subscription.
            </returns>
        </member>
        <member name="P:ExitGames.Messaging.Channels.TopicPublishChannel`1.UnderlyingChannel">
            <summary>
              Gets the wrapped <see cref="T:ExitGames.Concurrency.Channels.IChannel`1"/>.
            </summary>
        </member>
        <member name="F:ExitGames.Messaging.Channels.TopicChannel`1.log">
            <summary>
              The logger.
            </summary>
        </member>
        <member name="F:ExitGames.Messaging.Channels.TopicChannel`1.subscription">
            <summary>
              The subscription.
            </summary>
        </member>
        <member name="M:ExitGames.Messaging.Channels.TopicChannel`1.#ctor(System.String,ExitGames.Concurrency.Channels.IChannel{`0},ExitGames.Net.Sockets.ISocketSender,ExitGames.Messaging.Channels.TopicMessageReceiver,ExitGames.Messaging.Channels.IMessageSerializer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:ExitGames.Messaging.Channels.TopicChannel`1"/> class.
            </summary>
            <param name="topic">
            The topic.
            </param>
            <param name="channel">
            The channel.
            </param>
            <param name="socketSender">
            The socket sender.
            </param>
            <param name="topicMessageReceiver">
            The topic Message Receiver.
            </param>
            <param name="serializer">
            The message serializer.
            </param>
        </member>
        <member name="M:ExitGames.Messaging.Channels.TopicChannel`1.Finalize">
            <summary>
              Finalizes an instance of the <see cref="T:ExitGames.Messaging.Channels.TopicChannel`1"/> class.
            </summary>
        </member>
        <member name="M:ExitGames.Messaging.Channels.TopicChannel`1.Dispose">
            <summary>
              Releases managed and unmanaged resources.
            </summary>
        </member>
        <member name="M:ExitGames.Messaging.Channels.TopicChannel`1.Dispose(System.Boolean)">
            <summary>
              Releases managed and unmanaged resources.
            </summary>
            <param name="disposing">
              True if called from <see cref="M:ExitGames.Messaging.Channels.TopicChannel`1.Dispose"/>, false if called from destructor.
            </param>
        </member>
        <member name="T:ExitGames.Messaging.Channels.TopicMessageReceiver">
            <summary>
              The <see cref="T:ExitGames.Messaging.Channels.TopicMessageReceiver"/> receives <see cref="T:ExitGames.Messaging.Channels.TopicMessage"/>s from an <see cref="T:ExitGames.Net.Sockets.ISocketReceiver"/>.
            </summary>
        </member>
        <member name="F:ExitGames.Messaging.Channels.TopicMessageReceiver.log">
            <summary>
              The logger.
            </summary>
        </member>
        <member name="F:ExitGames.Messaging.Channels.TopicMessageReceiver.hostId">
            <summary>
              The local host id.
            </summary>
        </member>
        <member name="F:ExitGames.Messaging.Channels.TopicMessageReceiver.receiver">
            <summary>
              The socket receiver.
            </summary>
        </member>
        <member name="M:ExitGames.Messaging.Channels.TopicMessageReceiver.#ctor(ExitGames.Net.Sockets.ISocketReceiver,System.Guid)">
            <summary>
              Initializes a new instance of the <see cref="T:ExitGames.Messaging.Channels.TopicMessageReceiver"/> class.
            </summary>
            <param name="socketReceiver">
              The socket receiver.
            </param>
            <param name="hostId">
              The host id is used to filter message received from the local host.
            </param>
        </member>
        <member name="M:ExitGames.Messaging.Channels.TopicMessageReceiver.Subscribe``1(System.String,ExitGames.Concurrency.Channels.IPublisher{``0},ExitGames.Messaging.Channels.IMessageSerializer{``0})">
            <summary>
              Creates a new <see cref="T:ExitGames.Messaging.Channels.TopicSubscription`1"/>.
            </summary>
            <typeparam name="T">
              The message type.
            </typeparam>
            <param name="topic">
              The topic.
            </param>
            <param name="targetPublisher">
              The target channel.
            </param>
            <param name="serializer">
              The message deserializer.
            </param>
            <returns>
              A new <see cref="T:ExitGames.Messaging.Channels.TopicSubscription`1"/>.
            </returns>
        </member>
        <member name="M:ExitGames.Messaging.Channels.TopicMessageReceiver.Dispose">
            <summary>
              Removes event handler from the socket receiver.
            </summary>
        </member>
        <member name="M:ExitGames.Messaging.Channels.TopicMessageReceiver.SocketReceiver_OnReceive(System.Object,ExitGames.Net.Sockets.SocketReceiveEventArgs)">
            <summary>
              Callback from the <see cref="E:ExitGames.Net.Sockets.ISocketReceiver.Receive"/> event.
              <see cref="T:ExitGames.Messaging.Channels.TopicMessage"/>s with the same <see cref="P:ExitGames.Messaging.Channels.TopicMessageReceiver.HostId"/> are ignored; 
              all other messages are pubished with the <see cref="E:ExitGames.Messaging.Channels.TopicMessageReceiver.MessageReceived"/> event.
            </summary>
            <param name="sender">
              The <see cref="T:ExitGames.Net.Sockets.ISocketReceiver"/>.
            </param>
            <param name="e">
              The event args.
            </param>
        </member>
        <member name="E:ExitGames.Messaging.Channels.TopicMessageReceiver.MessageReceived">
            <summary>
              This event is invoked when a new <see cref="T:ExitGames.Messaging.Channels.TopicMessage"/> is received.
            </summary>
        </member>
        <member name="P:ExitGames.Messaging.Channels.TopicMessageReceiver.HostId">
            <summary>
              Gets the local host id. Received messages with the same host id are ignored.
            </summary>
        </member>
        <member name="T:ExitGames.Messaging.Channels.TopicChannelFactory`1">
            <summary>
              A factor for <see cref="T:ExitGames.Messaging.Channels.TopicChannel`1"/>s.
            </summary>
            <typeparam name="T">
              The message type.
            </typeparam>
            <remarks>
              All instance members are thread safe.
            </remarks>
        </member>
        <member name="T:ExitGames.Threading.SimpleBaseFactory`2">
            <summary>
              A base class for a simple factory using a <see cref="T:System.Threading.ReaderWriterLockSlim"/>.
            </summary>
            <typeparam name="TKey">
              The type of the key.
            </typeparam>
            <typeparam name="TValue">
              The type of the value.
            </typeparam>
        </member>
        <member name="F:ExitGames.Threading.SimpleBaseFactory`2.items">
            <summary>
              The items.
            </summary>
        </member>
        <member name="F:ExitGames.Threading.SimpleBaseFactory`2.readerWriterLock">
            <summary>
              The rw lock.
            </summary>
        </member>
        <member name="M:ExitGames.Threading.SimpleBaseFactory`2.Finalize">
            <summary>
              Finalizes an instance of the <see cref="T:ExitGames.Threading.SimpleBaseFactory`2"/> class.
            </summary>
        </member>
        <member name="M:ExitGames.Threading.SimpleBaseFactory`2.Add(`0,`1)">
            <summary>
              Adds a kay-value pair.
            </summary>
            <param name = "key">
              The key.
            </param>
            <param name = "value">
              The value.
            </param>
            <returns>
              True on success, false if the key already exists.
            </returns>
        </member>
        <member name="M:ExitGames.Threading.SimpleBaseFactory`2.Exists(`0,`1@)">
            <summary>
              Gets the value associated with the specified key.
            </summary>
            <param name="key">
              The key of the value to get. 
            </param>
            <param name="value">
              When this method returns, contains the value associated with the specified key, if the key is found; 
              otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized.
            </param>
            <returns>
              True if an element with the specified key was found; otherwise, false. 
            </returns>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="key"/> is null.
            </exception>
        </member>
        <member name="M:ExitGames.Threading.SimpleBaseFactory`2.Get(`0)">
            <summary>
              Gets the value associated with the specified key.
              If the key does not exist in the dictionary a value is loaded with the <see cref="M:ExitGames.Threading.SimpleBaseFactory`2.CreateItem(`0)"/> method.
            </summary>
            <param name="key">
              The key of the value to get. 
            </param>
            <returns>
              The value.
            </returns>
        </member>
        <member name="M:ExitGames.Threading.SimpleBaseFactory`2.Remove(`0)">
            <summary>
              Removes the value with the specified key.
            </summary>
            <param name = "key">
              The key of the element to remove.
            </param>
            <returns>
              True if the element is successfully found and removed; otherwise, false. 
              This method returns false if key is not found.
            </returns>
        </member>
        <member name="M:ExitGames.Threading.SimpleBaseFactory`2.Reset">
            <summary>
              Calls <see cref="M:ExitGames.Threading.SimpleBaseFactory`2.DisposeItem(`0,`1)"/> for each item and clears the dictionary.
            </summary>
        </member>
        <member name="M:ExitGames.Threading.SimpleBaseFactory`2.Dispose">
            <summary>
              Releases all resources used by the current instance.
            </summary>
        </member>
        <member name="M:ExitGames.Threading.SimpleBaseFactory`2.CreateItem(`0)">
            <summary>
              This method creates / loads a value for the key.
            </summary>
            <param name = "key">
              The key.
            </param>
            <returns>
              The value.
            </returns>
        </member>
        <member name="M:ExitGames.Threading.SimpleBaseFactory`2.Dispose(System.Boolean)">
            <summary>
              Releases all resources used by the current instance.
            </summary>
            <param name="disposing">
              True if called from <see cref="M:ExitGames.Threading.SimpleBaseFactory`2.Dispose"/>.
            </param>
        </member>
        <member name="M:ExitGames.Threading.SimpleBaseFactory`2.DisposeItem(`0,`1)">
            <summary>
              Called when a key-value pair is removed.
            </summary>
            <param name = "key">
              The removed key.
            </param>
            <param name = "value">
              The removed value.
            </param>
        </member>
        <member name="P:ExitGames.Threading.SimpleBaseFactory`2.Items">
            <summary>
              Gets a reference to the underlying dictionary that contains all existing instances.
            </summary>
            <remarks>
              Access to this dictionary needs to be syncronized with <see cref="T:ExitGames.Threading.ReadLock"/> or <see cref="T:ExitGames.Threading.WriteLock"/>.
            </remarks>
        </member>
        <member name="P:ExitGames.Threading.SimpleBaseFactory`2.ReaderWriterLock">
            <summary>
              Gets the used <see cref="T:System.Threading.ReaderWriterLockSlim"/>.
            </summary>
        </member>
        <member name="F:ExitGames.Messaging.Channels.TopicChannelFactory`1.disposeSocket">
            <summary>
              Indicates whether to dispose the socket at dispose.
            </summary>
        </member>
        <member name="F:ExitGames.Messaging.Channels.TopicChannelFactory`1.hostId">
            <summary>
              The local host id.
            </summary>
        </member>
        <member name="F:ExitGames.Messaging.Channels.TopicChannelFactory`1.serializer">
            <summary>
              The message serializer.
            </summary>
        </member>
        <member name="F:ExitGames.Messaging.Channels.TopicChannelFactory`1.socketReceiver">
            <summary>
              The used socket receiver.
            </summary>
        </member>
        <member name="F:ExitGames.Messaging.Channels.TopicChannelFactory`1.socketSender">
            <summary>
              The used socket sender.
            </summary>
        </member>
        <member name="F:ExitGames.Messaging.Channels.TopicChannelFactory`1.topicSubscriber">
            <summary>
              The receiver of all <see cref="T:ExitGames.Messaging.Channels.TopicMessage"/>s.
            </summary>
        </member>
        <member name="M:ExitGames.Messaging.Channels.TopicChannelFactory`1.#ctor(ExitGames.Messaging.Channels.IMessageSerializer{`0},ExitGames.Net.Sockets.ISocketSender,ExitGames.Net.Sockets.ISocketReceiver)">
            <summary>
              Initializes a new instance of the <see cref="T:ExitGames.Messaging.Channels.TopicChannelFactory`1"/> class.
            </summary>
            <param name="serializer">
              A thread safe message serializer.
            </param>
            <param name="sender">
              A socket sender.
            </param>
            <param name="receiver">
              A socket receiver.
            </param>
        </member>
        <member name="M:ExitGames.Messaging.Channels.TopicChannelFactory`1.#ctor(ExitGames.Messaging.Channels.IMessageSerializer{`0},System.String,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:ExitGames.Messaging.Channels.TopicChannelFactory`1"/> class.
            </summary>
            <param name="serializer">
              A thread safe message serializer.
            </param>
            <param name="ip">
              A multicast IP.
            </param>
            <param name="port">
              A multicast port.
            </param>
        </member>
        <member name="M:ExitGames.Messaging.Channels.TopicChannelFactory`1.#ctor(ExitGames.Messaging.Channels.IMessageSerializer{`0},System.String,System.Int32,System.String)">
            <summary>
              Initializes a new instance of the <see cref="T:ExitGames.Messaging.Channels.TopicChannelFactory`1"/> class.
            </summary>
            <param name="serializer">
              A thread safe message serializer.
            </param>
            <param name="ip">
              A multicast IP.
            </param>
            <param name="port">
              A multicast port.
            </param>
            <param name="bindInterface">
              An interface to bind to. It is important that multicast receiver and sender bind to interfaces in the same subnet.
            </param>
        </member>
        <member name="M:ExitGames.Messaging.Channels.TopicChannelFactory`1.Exists(System.String,ExitGames.Concurrency.Channels.IChannel{`0}@)">
            <summary>
              Checks whether a <see cref="T:ExitGames.Concurrency.Channels.IChannel`1"/> for a topic exists.
            </summary>
            <param name="topic">
              The topic.
            </param>
            <param name="value">
              The return value.
            </param>
            <returns>
              True if a <see cref="T:ExitGames.Concurrency.Channels.IChannel`1"/> for the given topic was returned.
            </returns>
        </member>
        <member name="M:ExitGames.Messaging.Channels.TopicChannelFactory`1.CreateItem(System.String)">
            <summary>
              Create a <see cref="T:ExitGames.Messaging.Channels.TopicChannel`1"/> that wraps a <see cref="T:ExitGames.Concurrency.Channels.Channel`1"/>.
            </summary>
            <param name="topic">
              The topic.
            </param>
            <returns>
              A new <see cref="T:ExitGames.Messaging.Channels.TopicChannel`1"/>.
            </returns>
        </member>
        <member name="M:ExitGames.Messaging.Channels.TopicChannelFactory`1.Dispose(System.Boolean)">
            <summary>
              Disposes the socket sender and receiver.
            </summary>
            <param name = "disposing">
              The disposing.
            </param>
        </member>
        <member name="M:ExitGames.Messaging.Channels.TopicChannelFactory`1.DisposeItem(System.String,ExitGames.Messaging.Channels.TopicChannel{`0})">
            <summary>
              Dispose a <see cref="T:ExitGames.Messaging.Channels.TopicChannel`1"/>.
            </summary>
            <param name="topic">
              The topic.
            </param>
            <param name="value">
              The channel.
            </param>
        </member>
        <member name="P:ExitGames.Messaging.Channels.TopicChannelFactory`1.HostId">
            <summary>
              Gets the local host id. This id is used to filter messages received from the local host.
            </summary>
        </member>
        <member name="P:ExitGames.Messaging.Channels.TopicChannelFactory`1.MessageSerializer">
            <summary>
              Gets the message de-/serializer.
            </summary>
        </member>
        <member name="T:ExitGames.Messaging.Channels.TopicSubscription`1">
            <summary>
            A topic subscription receives <see cref="T:ExitGames.Messaging.Channels.TopicMessage"/>s and filters them by a topic string.
            The payload of the remainging messages are deserialized with a <see cref="T:ExitGames.Messaging.Channels.IMessageSerializer`1"/> and published on a <see cref="T:ExitGames.Concurrency.Channels.IPublisher`1"/> (typically a <see cref="T:ExitGames.Concurrency.Channels.Channel`1"/>).
            </summary>
            <typeparam name="T">
            The message type.
            </typeparam>
        </member>
        <member name="F:ExitGames.Messaging.Channels.TopicSubscription`1.log">
            <summary>
            The logger.
            </summary>
        </member>
        <member name="F:ExitGames.Messaging.Channels.TopicSubscription`1.messageReceiver">
            <summary>
            The topic message receiver.
            </summary>
        </member>
        <member name="F:ExitGames.Messaging.Channels.TopicSubscription`1.targetPublisher">
            <summary>
            The target publisher.
            </summary>
        </member>
        <member name="F:ExitGames.Messaging.Channels.TopicSubscription`1.serializer">
            <summary>
            The message serializer.
            </summary>
        </member>
        <member name="F:ExitGames.Messaging.Channels.TopicSubscription`1.topic">
            <summary>
            The topic.
            </summary>
        </member>
        <member name="M:ExitGames.Messaging.Channels.TopicSubscription`1.#ctor(ExitGames.Messaging.Channels.TopicMessageReceiver,System.String,ExitGames.Concurrency.Channels.IPublisher{`0},ExitGames.Messaging.Channels.IMessageSerializer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:ExitGames.Messaging.Channels.TopicSubscription`1"/> class.
            </summary>
            <param name="messageMessageReceiver">
            The topic message receiver.
            </param>
            <param name="topic">
            The topic that <see cref="T:ExitGames.Messaging.Channels.TopicMessage"/>s are filtered with.
            </param>
            <param name="targetPublisher">
            The target to publish the received messages on.
            </param>
            <param name="serializer">
            The message serializer.
            </param>
        </member>
        <member name="M:ExitGames.Messaging.Channels.TopicSubscription`1.Dispose">
            <summary>
            Stops receiving <see cref="T:ExitGames.Messaging.Channels.TopicMessage"/>s.
            </summary>
        </member>
        <member name="M:ExitGames.Messaging.Channels.TopicSubscription`1.TopicMessageReceiver_OnMessageReceived(ExitGames.Messaging.Channels.TopicMessage)">
            <summary>
            Callback for event <see cref="E:ExitGames.Messaging.Channels.TopicMessageReceiver.MessageReceived"/>.
            <see cref="T:ExitGames.Messaging.Channels.TopicMessage"/>s with a similar <see cref="P:ExitGames.Messaging.Channels.TopicSubscription`1.Topic"/> are deserialized with the <see cref="T:ExitGames.Messaging.Channels.IMessageSerializer`1"/> and then <see cref="M:ExitGames.Concurrency.Channels.IPublisher`1.Publish(`0)">published</see> with the <see cref="P:ExitGames.Messaging.Channels.TopicSubscription`1.Target">target publisher</see>.
            </summary>
            <param name="message">
            The received <see cref="T:ExitGames.Messaging.Channels.TopicMessage"/>.
            </param>
        </member>
        <member name="P:ExitGames.Messaging.Channels.TopicSubscription`1.Source">
            <summary>
            Gets the source of the <see cref="T:ExitGames.Messaging.Channels.TopicMessage"/>s.
            </summary>
        </member>
        <member name="P:ExitGames.Messaging.Channels.TopicSubscription`1.Target">
            <summary>
            Gets the target for the received messages.
            </summary>
        </member>
        <member name="P:ExitGames.Messaging.Channels.TopicSubscription`1.Topic">
            <summary>
            Gets the topic to filter messages with.
            </summary>
        </member>
        <member name="T:ExitGames.Net.Sockets.ISocketSender">
            <summary>
            Interface for a class that sends data to a socket.
            </summary>
        </member>
        <member name="M:ExitGames.Net.Sockets.ISocketSender.Send(System.Byte[])">
            <summary>
            Sends a byte array to the socket.
            </summary>
            <param name="data">
            The data.
            </param>
        </member>
        <member name="M:ExitGames.Net.Sockets.ISocketSender.Send(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sends a byte array to the socket.
            </summary>
            <param name="data">
            The data.
            </param>
            <param name="offset">
            The offset.
            </param>
            <param name="length">
            The length.
            </param>
        </member>
        <member name="M:ExitGames.Net.Sockets.ISocketSender.Send(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})">
            <summary>
            Sends a list of <see cref="T:System.ArraySegment`1"/> of type byte to the socket.
            </summary>
            <param name="data">
            The data.
            </param>
        </member>
        <member name="P:ExitGames.Net.Sockets.ISocketSender.Connected">
            <summary>
            Gets a value indicating whether the <see cref="T:ExitGames.Net.Sockets.ISocketSender"/> is connected 
            to a remote host as of the last Send operation.
            </summary>
        </member>
        <member name="P:ExitGames.Net.Sockets.ISocketSender.EndPoint">
            <summary>
            Gets the remote end point.
            </summary>
            <value>
            The <see cref="P:ExitGames.Net.Sockets.ISocketSender.EndPoint"/> to which the implementation class sends the data.
            </value>
        </member>
        <member name="P:ExitGames.Net.Sockets.ISocketSender.TotalBytesSent">
            <summary>
            Gets the total number of sent bytes.
            </summary>
            <value>
            The total number of sent bytes.
            </value>
        </member>
        <member name="T:ExitGames.Net.Sockets.Stub.StubSender">
            <summary>
            An <see cref="T:ExitGames.Net.Sockets.ISocketSender"/> implementation for unit testing.
            </summary>
        </member>
        <member name="M:ExitGames.Net.Sockets.Stub.StubSender.#ctor(System.Net.IPEndPoint)">
            <summary>
            Initializes a new instance of the <see cref="T:ExitGames.Net.Sockets.Stub.StubSender"/> class.
            </summary>
            <param name="endPoint">
            The end point.
            </param>
        </member>
        <member name="M:ExitGames.Net.Sockets.Stub.StubSender.#ctor(System.Net.IPAddress,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ExitGames.Net.Sockets.Stub.StubSender"/> class.
            </summary>
            <param name="address">
            The IP address.
            </param>
            <param name="port">
            The port.
            </param>
        </member>
        <member name="M:ExitGames.Net.Sockets.Stub.StubSender.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:ExitGames.Net.Sockets.Stub.StubSender"/> class. 
            </summary>
        </member>
        <member name="M:ExitGames.Net.Sockets.Stub.StubSender.Start">
            <summary>
            Connects to the <see cref="P:ExitGames.Net.Sockets.Stub.StubSender.EndPoint"/>.
            </summary>
        </member>
        <member name="M:ExitGames.Net.Sockets.Stub.StubSender.Dispose">
            <summary>
            Disposes all managed and unmanaged resources.
            </summary>
        </member>
        <member name="M:ExitGames.Net.Sockets.Stub.StubSender.Send(System.Byte[])">
            <summary>
            Sends a byte array.
            </summary>
            <param name="data">
            The data.
            </param>
        </member>
        <member name="M:ExitGames.Net.Sockets.Stub.StubSender.Send(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sends a byte array.
            </summary>
            <param name="data">
            The data.
            </param>
            <param name="offset">
            The offset.
            </param>
            <param name="length">
            The length.
            </param>
        </member>
        <member name="M:ExitGames.Net.Sockets.Stub.StubSender.Send(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})">
            <summary>
            Sends a list of <see cref="T:System.ArraySegment`1"/> of byte.
            </summary>
            <param name="data">
            The data.
            </param>
        </member>
        <member name="M:ExitGames.Net.Sockets.Stub.StubSender.Dispose(System.Boolean)">
            <summary>
            Closes the <see cref="T:System.Net.Sockets.UdpClient"/>.
            </summary>
            <param name="disposing">
            True if called from <see cref="M:ExitGames.Net.Sockets.Stub.StubSender.Dispose"/>.
            </param>
        </member>
        <member name="P:ExitGames.Net.Sockets.Stub.StubSender.Connected">
            <summary>
            Gets a value indicating whether the <see cref="T:ExitGames.Net.Sockets.ISocketSender"/> is connected 
            to a remote host as of the last Send operation.
            </summary>
        </member>
        <member name="P:ExitGames.Net.Sockets.Stub.StubSender.EndPoint">
            <summary>
              Gets the endpoint address to which the underling socket is associated.
            </summary>
        </member>
        <member name="P:ExitGames.Net.Sockets.Stub.StubSender.TotalBytesSent">
            <summary>
              Gets the number of bytes sent by this instance.
            </summary>
        </member>
        <member name="T:ExitGames.Net.Sockets.Stub.StubReceiver">
            <summary>
              An <see cref="T:ExitGames.Net.Sockets.ISocketReceiver"/> implementation for unit testing.
            </summary>
        </member>
        <member name="T:ExitGames.Net.Sockets.ISocketReceiver">
            <summary>
            Interface for a class that receives data from a socket.
            </summary>
        </member>
        <member name="E:ExitGames.Net.Sockets.ISocketReceiver.Receive">
            <summary>
            Event that is invoked when new data is received.
            </summary>
        </member>
        <member name="P:ExitGames.Net.Sockets.ISocketReceiver.EndPoint">
            <summary>
            Gets the remote end point.
            </summary>
            <value>
            The <see cref="P:ExitGames.Net.Sockets.ISocketReceiver.EndPoint"/> from which the implementation class receives the data.
            </value>
        </member>
        <member name="P:ExitGames.Net.Sockets.ISocketReceiver.TotalBytesReceived">
            <summary>
            Gets the total number of resecived bytes.
            </summary>
            <value>
            The total number of received bytes.
            </value>
        </member>
        <member name="M:ExitGames.Net.Sockets.Stub.StubReceiver.#ctor(System.Net.IPEndPoint)">
            <summary>
              Initializes a new instance of the <see cref="T:ExitGames.Net.Sockets.Stub.StubReceiver"/> class.
            </summary>
            <param name="endPoint">
              The IP end point.
            </param>
        </member>
        <member name="M:ExitGames.Net.Sockets.Stub.StubReceiver.#ctor(System.Net.IPAddress,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:ExitGames.Net.Sockets.Stub.StubReceiver"/> class.
            </summary>
            <param name="address">
              The IP address.
            </param>
            <param name="port">
              The port.
            </param>
        </member>
        <member name="M:ExitGames.Net.Sockets.Stub.StubReceiver.Finalize">
            <summary>
              Finalizes an instance of the <see cref="T:ExitGames.Net.Sockets.Stub.StubReceiver"/> class.
            </summary>
        </member>
        <member name="M:ExitGames.Net.Sockets.Stub.StubReceiver.Start">
            <summary>
              Starts the STUB receiver.
            </summary>
        </member>
        <member name="M:ExitGames.Net.Sockets.Stub.StubReceiver.Dispose">
            <summary>
              Closes the <see cref="T:ExitGames.Net.Sockets.Stub.StubReceiver"/>.
            </summary>
        </member>
        <member name="M:ExitGames.Net.Sockets.Stub.StubReceiver.Dispose(System.Boolean)">
            <summary>
              Closes the <see cref="T:System.Net.Sockets.UdpClient"/>.
            </summary>
            <param name="disposing">
              True if called from <see cref="M:ExitGames.Net.Sockets.Stub.StubReceiver.Dispose"/>.
            </param>
        </member>
        <member name="M:ExitGames.Net.Sockets.Stub.StubReceiver.ReceiveCallback(System.Net.EndPoint,System.Byte[])">
            <summary>
              Call when something was received.
            </summary>
        </member>
        <member name="E:ExitGames.Net.Sockets.Stub.StubReceiver.Error">
            <summary>
              This event is invoked if an unexpected exception is thrown.
            </summary>
        </member>
        <member name="E:ExitGames.Net.Sockets.Stub.StubReceiver.Receive">
            <summary>
              This event is invoked if a package is received.
            </summary>
        </member>
        <member name="P:ExitGames.Net.Sockets.Stub.StubReceiver.EndPoint">
            <summary>
              Gets the IP end point.
            </summary>
        </member>
        <member name="P:ExitGames.Net.Sockets.Stub.StubReceiver.TotalBytesReceived">
            <summary>
              Gets the total number of bytes received.
            </summary>
        </member>
        <member name="T:ExitGames.Net.Sockets.Udp.UdpReceiver">
            <summary>
              An <see cref="T:ExitGames.Net.Sockets.ISocketReceiver"/> implementation for UDP.
            </summary>
        </member>
        <member name="F:ExitGames.Net.Sockets.Udp.UdpReceiver.udpClient">
            <summary>
              The used <see cref="T:System.Net.Sockets.UdpClient"/>.
            </summary>
        </member>
        <member name="F:ExitGames.Net.Sockets.Udp.UdpReceiver.bytesReceived">
            <summary>
              The total number of bytes received.
            </summary>
        </member>
        <member name="M:ExitGames.Net.Sockets.Udp.UdpReceiver.#ctor(System.Net.IPEndPoint)">
            <summary>
              Initializes a new instance of the <see cref="T:ExitGames.Net.Sockets.Udp.UdpReceiver"/> class.
            </summary>
            <param name="endPoint">
              The IP end point.
            </param>
        </member>
        <member name="M:ExitGames.Net.Sockets.Udp.UdpReceiver.#ctor(System.Net.IPAddress,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:ExitGames.Net.Sockets.Udp.UdpReceiver"/> class.
            </summary>
            <param name="address">
              The IP address.
            </param>
            <param name="port">
              The port.
            </param>
        </member>
        <member name="M:ExitGames.Net.Sockets.Udp.UdpReceiver.Finalize">
            <summary>
              Finalizes an instance of the <see cref="T:ExitGames.Net.Sockets.Udp.UdpReceiver"/> class.
            </summary>
        </member>
        <member name="M:ExitGames.Net.Sockets.Udp.UdpReceiver.Start">
            <summary>
              Starts the UDP receiver.
            </summary>
        </member>
        <member name="M:ExitGames.Net.Sockets.Udp.UdpReceiver.Dispose">
            <summary>
              Closes the <see cref="T:System.Net.Sockets.UdpClient"/>.
            </summary>
        </member>
        <member name="M:ExitGames.Net.Sockets.Udp.UdpReceiver.Dispose(System.Boolean)">
            <summary>
              Closes the <see cref="T:System.Net.Sockets.UdpClient"/>.
            </summary>
            <param name="disposing">
              True if called from <see cref="M:ExitGames.Net.Sockets.Udp.UdpReceiver.Dispose"/>.
            </param>
        </member>
        <member name="M:ExitGames.Net.Sockets.Udp.UdpReceiver.ReceiveCallback(System.IAsyncResult)">
            <summary>
              Called when something was received.
            </summary>
            <param name = "asyncResult">
              The async result.
            </param>
        </member>
        <member name="E:ExitGames.Net.Sockets.Udp.UdpReceiver.Error">
            <summary>
              This event is invoked if an unexpected exception is thrown.
            </summary>
        </member>
        <member name="E:ExitGames.Net.Sockets.Udp.UdpReceiver.Receive">
            <summary>
              This event is invoked if a package is received.
            </summary>
        </member>
        <member name="P:ExitGames.Net.Sockets.Udp.UdpReceiver.EndPoint">
            <summary>
              Gets the IP end point.
            </summary>
        </member>
        <member name="P:ExitGames.Net.Sockets.Udp.UdpReceiver.TotalBytesReceived">
            <summary>
              Gets the total number of bytes received.
            </summary>
        </member>
        <member name="T:ExitGames.Net.Sockets.Udp.UdpSender">
            <summary>
            An <see cref="T:ExitGames.Net.Sockets.ISocketSender"/> implementation for UDP.
            </summary>
        </member>
        <member name="F:ExitGames.Net.Sockets.Udp.UdpSender.udpClient">
            <summary>
            The used <see cref="T:System.Net.Sockets.UdpClient"/>.
            </summary>
        </member>
        <member name="F:ExitGames.Net.Sockets.Udp.UdpSender.bytesSent">
            <summary>
            The total number of bytes sent.
            </summary>
        </member>
        <member name="M:ExitGames.Net.Sockets.Udp.UdpSender.#ctor(System.Net.IPEndPoint)">
            <summary>
            Initializes a new instance of the <see cref="T:ExitGames.Net.Sockets.Udp.UdpSender"/> class.
            </summary>
            <param name="endPoint">
            The end point.
            </param>
        </member>
        <member name="M:ExitGames.Net.Sockets.Udp.UdpSender.#ctor(System.Net.IPAddress,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ExitGames.Net.Sockets.Udp.UdpSender"/> class.
            </summary>
            <param name="address">
            The IP address.
            </param>
            <param name="port">
            The port.
            </param>
        </member>
        <member name="M:ExitGames.Net.Sockets.Udp.UdpSender.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:ExitGames.Net.Sockets.Udp.UdpSender"/> class. 
            </summary>
        </member>
        <member name="M:ExitGames.Net.Sockets.Udp.UdpSender.Start">
            <summary>
            Connects to the <see cref="P:ExitGames.Net.Sockets.Udp.UdpSender.EndPoint"/>.
            </summary>
        </member>
        <member name="M:ExitGames.Net.Sockets.Udp.UdpSender.Dispose">
            <summary>
            Disposes all managed and unmanaged resources.
            </summary>
        </member>
        <member name="M:ExitGames.Net.Sockets.Udp.UdpSender.Send(System.Byte[])">
            <summary>
            Sends a byte array.
            </summary>
            <param name="data">
            The data.
            </param>
        </member>
        <member name="M:ExitGames.Net.Sockets.Udp.UdpSender.Send(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sends a byte array.
            </summary>
            <param name="data">
            The data.
            </param>
            <param name="offset">
            The offset.
            </param>
            <param name="length">
            The length.
            </param>
        </member>
        <member name="M:ExitGames.Net.Sockets.Udp.UdpSender.Send(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})">
            <summary>
            Sends a list of <see cref="T:System.ArraySegment`1"/> of byte.
            </summary>
            <param name="data">
            The data.
            </param>
        </member>
        <member name="M:ExitGames.Net.Sockets.Udp.UdpSender.Dispose(System.Boolean)">
            <summary>
            Closes the <see cref="T:System.Net.Sockets.UdpClient"/>.
            </summary>
            <param name="disposing">
            True if called from <see cref="M:ExitGames.Net.Sockets.Udp.UdpSender.Dispose"/>.
            </param>
        </member>
        <member name="P:ExitGames.Net.Sockets.Udp.UdpSender.Connected">
            <summary>
            Gets a value indicating whether the <see cref="T:ExitGames.Net.Sockets.ISocketSender"/> is connected 
            to a remote host as of the last Send operation.
            </summary>
        </member>
        <member name="P:ExitGames.Net.Sockets.Udp.UdpSender.EndPoint">
            <summary>
              Gets the endpoint address to which the underling socket is associated.
            </summary>
        </member>
        <member name="P:ExitGames.Net.Sockets.Udp.UdpSender.TotalBytesSent">
            <summary>
              Gets the number of bytes sent by this instance.
            </summary>
        </member>
        <member name="T:ExitGames.Threading.CachedSingletonFactory.CachedSingletonFactoryAbsolute`2">
            <summary>
            A <see cref="T:ExitGames.Threading.CachedSingletonFactory.SynchronizedCachedSingletonFactory`2"/> for absolute caching.
            </summary>
            <typeparam name="TKey">
            The type of the keys.
            </typeparam>
            <typeparam name="TValue">
            The type of the values.
            </typeparam>
        </member>
        <member name="T:ExitGames.Threading.CachedSingletonFactory.SynchronizedCachedSingletonFactory`2">
            <summary>
              A <see cref="T:ExitGames.Threading.SynchronizedSingletonFactory`2"/> that uses the ASP.NET cache.
              It offers limited lifetime for items and requires no locking to access items that are cached.
              The subclasses support <see cref="T:ExitGames.Threading.CachedSingletonFactory.CachedSingletonFactorySliding`2">sliding</see> and <see cref="T:ExitGames.Threading.CachedSingletonFactory.CachedSingletonFactoryAbsolute`2">absolute</see> timeouts.
            </summary>
            <typeparam name="TKey">
              The type of the key.
            </typeparam>
            <typeparam name="TValue">
              The type of the value.
            </typeparam>
        </member>
        <member name="T:ExitGames.Threading.SynchronizedSingletonFactory`2">
            <summary>
              This class is used to create instances that are unique per key in a multi-threaded environment.
              It uses a <see cref="T:System.Threading.ReaderWriterLockSlim"/> for read and write access to the <see cref="P:ExitGames.Threading.SynchronizedSingletonFactory`2.Instances"/>. 
              Instance creations are synchronized with a <see cref="T:System.Threading.Monitor"/> on an object that is unique per key.
              This approach is designed to minimize the impact of long running instance creations on other threads.
            </summary>
            <typeparam name="TKey">
              The type of key.
            </typeparam>
            <typeparam name="TValue">
              The type of value.
            </typeparam>
            <remarks>
              Instance members are thread safe unless specified otherwise.
            </remarks>
        </member>
        <member name="F:ExitGames.Threading.SynchronizedSingletonFactory`2.instances">
            <summary>
              A dictionary for all instances.
            </summary>
        </member>
        <member name="F:ExitGames.Threading.SynchronizedSingletonFactory`2.lockTimeout">
            <summary>
              The maximum timeout to wait for a critical section.
            </summary>
        </member>
        <member name="F:ExitGames.Threading.SynchronizedSingletonFactory`2.readerWriterLock">
            <summary>
              The reader writer lock for synchronization.
            </summary>
        </member>
        <member name="F:ExitGames.Threading.SynchronizedSingletonFactory`2.syncInstances">
            <summary>
              A dictionary for sync roots per key.
            </summary>
        </member>
        <member name="F:ExitGames.Threading.SynchronizedSingletonFactory`2.defaultCreateMethod">
            <summary>
              The default create method.
            </summary>
        </member>
        <member name="M:ExitGames.Threading.SynchronizedSingletonFactory`2.#ctor(ExitGames.Threading.CreateMethodDelegate{`0,`1},System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:ExitGames.Threading.SynchronizedSingletonFactory`2"/> class.
            </summary>
            <param name="defaultCreateMethod">
              The default create method.
            </param>
            <param name="lockTimeout">
              The max timeout to wait to enter a critical section.
            </param>
        </member>
        <member name="M:ExitGames.Threading.SynchronizedSingletonFactory`2.Add(`0,`1)">
            <summary>
              Adds a value if the key has not been added before.
            </summary>
            <param name = "key">
              The key.
            </param>
            <param name = "value">
              The value.
            </param>
            <returns>
              True if the value was added.
            </returns>
        </member>
        <member name="M:ExitGames.Threading.SynchronizedSingletonFactory`2.ForAll(System.Action{`1})">
            <summary>
              This method iterates over a copy of <see cref="P:ExitGames.Threading.SynchronizedSingletonFactory`2.Instances"/> and executes the <paramref name="action"/> on each item.
            </summary>
            <param name="action">
              The action.
            </param>
        </member>
        <member name="M:ExitGames.Threading.SynchronizedSingletonFactory`2.ForAll``1(System.Func{`1,``0},System.Func{``0,``0,``0},``0)">
            <summary>
              This method iterates over a copy of <see cref="P:ExitGames.Threading.SynchronizedSingletonFactory`2.Instances"/>.
              The <paramref name="selector"/> parameter selects a value of each instance.
              These values are combined with the <paramref name="aggregateFunction"/>.
            </summary>
            <param name="selector">
              The action that maps a value to each instance.
            </param>
            <param name="aggregateFunction">
              The function that combines all <paramref name="selector"/> results.
            </param>
            <param name="seed">
              The result value to start with.
            </param>
            <typeparam name="TResult">
              The type of the result value.
            </typeparam>
            <returns>
              An aggregegated value from all instances.
            </returns>
        </member>
        <member name="M:ExitGames.Threading.SynchronizedSingletonFactory`2.Get(`0,ExitGames.Threading.CreateMethodDelegate{`0,`1})">
            <summary>
              Gets an existing value for a key or creates a new one.
            </summary>
            <param name="key">
              The key.
            </param>
            <param name="createMethod">
              The creation method.
            </param>
            <returns>
              The value.
            </returns>
            <remarks>
              The default implementation uses the <see cref="M:ExitGames.Threading.SynchronizedSingletonFactory`2.GetBlockingInstance(`0,ExitGames.Threading.CreateMethodDelegate{`0,`1})">GetBlockingInstance</see> algorithm.
              Override to change behavior to
              <see cref="M:ExitGames.Threading.SynchronizedSingletonFactory`2.GetNonBlocking(`0,ExitGames.Threading.CreateMethodDelegate{`0,`1})">GetNonBlocking</see> 
              or
              <see cref="M:ExitGames.Threading.SynchronizedSingletonFactory`2.GetBlockingOverall(`0,ExitGames.Threading.CreateMethodDelegate{`0,`1})">GetBlockingOverall</see>
            </remarks>
        </member>
        <member name="M:ExitGames.Threading.SynchronizedSingletonFactory`2.Get(`0)">
            <summary>
              Gets an existing value for a key or creates a new one with the default <see cref="P:ExitGames.Threading.SynchronizedSingletonFactory`2.CreateMethod"/>.
            </summary>
            <param name="key">
              The key.
            </param>
            <returns>
              The value for the key.
            </returns>
        </member>
        <member name="M:ExitGames.Threading.SynchronizedSingletonFactory`2.GetBlockingInstance(`0,ExitGames.Threading.CreateMethodDelegate{`0,`1})">
            <summary>
              Gets an existing value for a key or creates a new one.
              The creation of a new instance is guarded with a sync root that is unique per key.
              This algorithm is ideal for creation methods that do not return fast.
            </summary>
            <param name = "key">
              The key.
            </param>
            <param name = "createMethod">
              The creation method.
            </param>
            <returns>
              The value.
            </returns>
        </member>
        <member name="M:ExitGames.Threading.SynchronizedSingletonFactory`2.GetBlockingInstance(`0)">
            <summary>
              Gets an existing value for a key or creates a new one with the default <see cref="P:ExitGames.Threading.SynchronizedSingletonFactory`2.CreateMethod"/>.
              The creation of a new instance is guarded with a sync root that is unique per key.
              This algorithm is ideal for creation methods that do not return fast.
            </summary>
            <param name="key">
              The key.
            </param>
            <returns>
              The value.
            </returns>
        </member>
        <member name="M:ExitGames.Threading.SynchronizedSingletonFactory`2.GetBlockingOverall(`0,ExitGames.Threading.CreateMethodDelegate{`0,`1})">
            <summary>
              Gets an existing value for a key or creates a new one.
              The creation of a new instance is guarded with a global <see cref="M:ExitGames.Threading.SynchronizedSingletonFactory`2.WriterLock"/>.
              This algorithm is ideal for creation methods that return very fast.
            </summary>
            <param name="key">
              The key.
            </param>
            <param name="createMethod">
              The creation method.
            </param>
            <returns>
              The value.
            </returns>
        </member>
        <member name="M:ExitGames.Threading.SynchronizedSingletonFactory`2.GetBlockingOverall(`0)">
            <summary>
              Gets an existing value for a key or creates a new one with the default <see cref="P:ExitGames.Threading.SynchronizedSingletonFactory`2.CreateMethod"/>.
              The creation of a new instance is guarded with a global <see cref="M:ExitGames.Threading.SynchronizedSingletonFactory`2.WriterLock"/>.
              This algorithm is ideal for creation methods that return very fast.
            </summary>
            <param name="key">
              The key.
            </param>
            <returns>
              The value.
            </returns>
        </member>
        <member name="M:ExitGames.Threading.SynchronizedSingletonFactory`2.GetNonBlocking(`0,ExitGames.Threading.CreateMethodDelegate{`0,`1})">
            <summary>
              Gets an existing value for a key or creates a new one.
              The creation of a new instance is not guarded. This introduces a risk that the creation method is called multiple times for the same key at the same time. Only one of the created values is added.
              This algorithm is ideal for creation methods that are either not likely to be called multiple times at the same time or that have an unpredictable execution time and a low usage of local reosurces.
            </summary>
            <param name = "key">
              The key.
            </param>
            <param name = "createMethod">
              The creation method.
            </param>
            <returns>
              The value.
            </returns>
        </member>
        <member name="M:ExitGames.Threading.SynchronizedSingletonFactory`2.GetNonBlocking(`0)">
            <summary>
              Gets an existing value for a key or creates a new one with the default <see cref="P:ExitGames.Threading.SynchronizedSingletonFactory`2.CreateMethod"/>.
              The creation of a new instance is not guarded. This introduces a risk that the creation method is called multiple times for the same key at the same time. Only one of the created values is added.
              This algorithm is ideal for creation methods that are either not likely to be called multiple times at the same time or that have an unpredictable execution time and a low usage of local reosurces.
            </summary>
            <param name="key">
              The key.
            </param>
            <returns>
              The value.
            </returns>
        </member>
        <member name="M:ExitGames.Threading.SynchronizedSingletonFactory`2.Remove(`0)">
            <summary>
              Removes a value from the <see cref="P:ExitGames.Threading.SynchronizedSingletonFactory`2.Instances"/>.
            </summary>
            <param name="key">
              The key.
            </param>
            <returns>
              True if key was found and removed, otherwise false.
            </returns>
        </member>
        <member name="M:ExitGames.Threading.SynchronizedSingletonFactory`2.TryGet(`0,`1@)">
            <summary>
              Tries to get an existing value for the key.
            </summary>
            <param name = "key">
              The key.
            </param>
            <param name = "value">
              The value.
            </param>
            <returns>
              True if a value was found, otherwise false.
            </returns>
        </member>
        <member name="M:ExitGames.Threading.SynchronizedSingletonFactory`2.DoAdd(`0,`1)">
            <summary>
              Adds a value to the <see cref="P:ExitGames.Threading.SynchronizedSingletonFactory`2.Instances"/>. Calling methods need to guard the <see cref="P:ExitGames.Threading.SynchronizedSingletonFactory`2.Instances"/> with a <see cref="M:ExitGames.Threading.SynchronizedSingletonFactory`2.WriterLock"/>.
              Calling methods are: <see cref="M:ExitGames.Threading.SynchronizedSingletonFactory`2.Add(`0,`1)"/>,
              <see cref="M:ExitGames.Threading.SynchronizedSingletonFactory`2.GetBlockingInstance(`0,ExitGames.Threading.CreateMethodDelegate{`0,`1})">GetBlockingInstance</see>,
              <see cref="M:ExitGames.Threading.SynchronizedSingletonFactory`2.GetNonBlocking(`0,ExitGames.Threading.CreateMethodDelegate{`0,`1})">GetNonBlocking</see> and
              <see cref="M:ExitGames.Threading.SynchronizedSingletonFactory`2.GetBlockingOverall(`0,ExitGames.Threading.CreateMethodDelegate{`0,`1})">GetBlockingOverall</see>.
            </summary>
            <param name="key">
              The key.
            </param>
            <param name="value">
              The value.
            </param>
        </member>
        <member name="M:ExitGames.Threading.SynchronizedSingletonFactory`2.ReaderLock">
            <summary>
              Enters a critical read section.
              Exit the critical section by disposing the return value.
            </summary>
            <returns>
              A disposable read lock. 
            </returns>
            <exception cref="T:ExitGames.Threading.LockTimeoutException">
              A read lock could not be obtained within the <see cref="P:ExitGames.Threading.SynchronizedSingletonFactory`2.LockTimeout"/>.
            </exception>
        </member>
        <member name="M:ExitGames.Threading.SynchronizedSingletonFactory`2.WriterLock">
            <summary>
              Enters a critical write section.
              Exit the critical section by disposing the return value.
            </summary>
            <returns>
              A disposable write lock. 
            </returns>
            <exception cref="T:ExitGames.Threading.LockTimeoutException">
              A write lock could not be obtained within the <see cref="P:ExitGames.Threading.SynchronizedSingletonFactory`2.LockTimeout"/>.
            </exception>
        </member>
        <member name="M:ExitGames.Threading.SynchronizedSingletonFactory`2.GetBlockingInstance(`0,ExitGames.Threading.CreateMethodDelegate{`0,`1},System.Object,`1@)">
            <summary>
              Helper method of <see cref="M:ExitGames.Threading.SynchronizedSingletonFactory`2.GetBlockingInstance(`0,ExitGames.Threading.CreateMethodDelegate{`0,`1})">GetBlockingInstance</see> that creates the instance.
            </summary>
            <param name="key">
              The key.
            </param>
            <param name="createMethod">
              The creation method method.
            </param>
            <param name="syncObject">
              The sync object for the key.
            </param>
            <param name="result">
              The result value.
            </param>
        </member>
        <member name="P:ExitGames.Threading.SynchronizedSingletonFactory`2.Count">
            <summary>
              Gets the number of added values.
            </summary>
        </member>
        <member name="P:ExitGames.Threading.SynchronizedSingletonFactory`2.CreateMethod">
            <summary>
              Gets or sets the default creation method for values.
            </summary>
        </member>
        <member name="P:ExitGames.Threading.SynchronizedSingletonFactory`2.Instances">
            <summary>
              Gets a reference to the underlying dictionary that contains all existing instances.
            </summary>
            <remarks>
              Access to this dictionary needs to be syncronized with <see cref="T:ExitGames.Threading.ReadLock"/> or <see cref="T:ExitGames.Threading.WriteLock"/>.
            </remarks>
        </member>
        <member name="P:ExitGames.Threading.SynchronizedSingletonFactory`2.LockTimeout">
            <summary>
              Gets the maxium timeout for critical sections.
            </summary>
        </member>
        <member name="F:ExitGames.Threading.CachedSingletonFactory.SynchronizedCachedSingletonFactory`2.log">
            <summary>
              The logger.
            </summary>
        </member>
        <member name="F:ExitGames.Threading.CachedSingletonFactory.SynchronizedCachedSingletonFactory`2.aspNetCacheKeys">
            <summary>
              The asp net cache keys.
            </summary>
        </member>
        <member name="F:ExitGames.Threading.CachedSingletonFactory.SynchronizedCachedSingletonFactory`2.cache">
            <summary>
              The asp net cache.
            </summary>
        </member>
        <member name="F:ExitGames.Threading.CachedSingletonFactory.SynchronizedCachedSingletonFactory`2.prefix">
            <summary>
              The cache key prefix.
            </summary>
        </member>
        <member name="F:ExitGames.Threading.CachedSingletonFactory.SynchronizedCachedSingletonFactory`2.readerWriterLock">
            <summary>
              The rw lock.
            </summary>
        </member>
        <member name="F:ExitGames.Threading.CachedSingletonFactory.SynchronizedCachedSingletonFactory`2.cacheTimeSpan">
            <summary>
              The cache time span.
            </summary>
        </member>
        <member name="M:ExitGames.Threading.CachedSingletonFactory.SynchronizedCachedSingletonFactory`2.#ctor(ExitGames.Threading.CreateMethodDelegate{`0,`1},System.Action{`0,`1},System.TimeSpan,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:ExitGames.Threading.CachedSingletonFactory.SynchronizedCachedSingletonFactory`2"/> class.
            </summary>
            <param name="defaultCreateMethod">
              The default creattion method.
            </param>
            <param name="removeCallback">
              The callback that is called when an item is removed.
            </param>
            <param name="cacheTimeSpan">
              The caching time.
            </param>
            <param name="lockTimeout">
              The max wait time to avoid dead locks.
            </param>
        </member>
        <member name="M:ExitGames.Threading.CachedSingletonFactory.SynchronizedCachedSingletonFactory`2.Get(`0,ExitGames.Threading.CreateMethodDelegate{`0,`1})">
            <summary>
              Gets an existing value for a key or creates a new one.
            </summary>
            <param name="key">
              The key.
            </param>
            <param name="createMethod">
              The creation method.
            </param>
            <returns>
              The value.
            </returns>
            <remarks>
              The default implementation uses the <see cref="M:ExitGames.Threading.CachedSingletonFactory.SynchronizedCachedSingletonFactory`2.GetBlockingInstance(`0,ExitGames.Threading.CreateMethodDelegate{`0,`1})">GetBlockingInstance</see> algorithm.
              Override to change the behavior to
              <see cref="M:ExitGames.Threading.CachedSingletonFactory.SynchronizedCachedSingletonFactory`2.GetNonBlocking(`0,ExitGames.Threading.CreateMethodDelegate{`0,`1})">GetNonBlocking</see> 
              or
              <see cref="M:ExitGames.Threading.CachedSingletonFactory.SynchronizedCachedSingletonFactory`2.GetBlockingOverall(`0,ExitGames.Threading.CreateMethodDelegate{`0,`1})">GetBlockingOverall</see>
            </remarks>
        </member>
        <member name="M:ExitGames.Threading.CachedSingletonFactory.SynchronizedCachedSingletonFactory`2.Get(`0)">
            <summary>
              Gets an existing value for a key or creates a new one with the default <see cref="P:ExitGames.Threading.CachedSingletonFactory.SynchronizedCachedSingletonFactory`2.DoCreateMethod"/>.
            </summary>
            <param name="key">
              The key.
            </param>
            <returns>
              The value for the key.
            </returns>
        </member>
        <member name="M:ExitGames.Threading.CachedSingletonFactory.SynchronizedCachedSingletonFactory`2.GetBlockingInstance(`0)">
            <summary>
              Gets an existing value for a key or creates a new one with the default <see cref="P:ExitGames.Threading.CachedSingletonFactory.SynchronizedCachedSingletonFactory`2.DoCreateMethod"/>.
              The creation of a new instance is guarded with a sync root that is unique per key.
              This algorithm is ideal for creation methods that do not return fast.
            </summary>
            <param name="key">
              The key.
            </param>
            <returns>
              The value.
            </returns>
        </member>
        <member name="M:ExitGames.Threading.CachedSingletonFactory.SynchronizedCachedSingletonFactory`2.GetBlockingInstance(`0,ExitGames.Threading.CreateMethodDelegate{`0,`1})">
            <summary>
              Gets an existing value for a key or creates a new one.
              The creation of a new instance is guarded with a sync root that is unique per key.
              This algorithm is ideal for creation methods that do not return fast.
            </summary>
            <param name = "key">
              The key.
            </param>
            <param name = "createMethod">
              The creation method.
            </param>
            <returns>
              The value.
            </returns>
        </member>
        <member name="M:ExitGames.Threading.CachedSingletonFactory.SynchronizedCachedSingletonFactory`2.GetBlockingOverall(`0)">
            <summary>
              Gets an existing value for a key or creates a new one with the default <see cref="P:ExitGames.Threading.CachedSingletonFactory.SynchronizedCachedSingletonFactory`2.DoCreateMethod"/>.
              The creation of a new instance is guarded with a global <see cref="M:ExitGames.Threading.SynchronizedSingletonFactory`2.WriterLock"/>.
              This algorithm is ideal for creation methods that return very fast.
            </summary>
            <param name="key">
              The key.
            </param>
            <returns>
              The value.
            </returns>
        </member>
        <member name="M:ExitGames.Threading.CachedSingletonFactory.SynchronizedCachedSingletonFactory`2.GetBlockingOverall(`0,ExitGames.Threading.CreateMethodDelegate{`0,`1})">
            <summary>
              Gets an existing value for a key or creates a new one.
              The creation of a new instance is guarded with a global <see cref="M:ExitGames.Threading.SynchronizedSingletonFactory`2.WriterLock"/>.
              This algorithm is ideal for creation methods that return very fast.
            </summary>
            <param name="key">
              The key.
            </param>
            <param name="createMethod">
              The creation method.
            </param>
            <returns>
              The value.
            </returns>
        </member>
        <member name="M:ExitGames.Threading.CachedSingletonFactory.SynchronizedCachedSingletonFactory`2.GetNonBlocking(`0)">
            <summary>
              Gets an existing value for a key or creates a new one with the default <see cref="P:ExitGames.Threading.CachedSingletonFactory.SynchronizedCachedSingletonFactory`2.DoCreateMethod"/>.
              The creation of a new instance is not guarded. This introduces a risk that the creation method is called multiple times for the same key at the same time. Only one of the created values is added.
              This algorithm is ideal for creation methods that are either not likely to be called multiple times at the same time or that have an unpredictable execution time and a low usage of local reosurces.
            </summary>
            <param name="key">
              The key.
            </param>
            <returns>
              The value.
            </returns>
        </member>
        <member name="M:ExitGames.Threading.CachedSingletonFactory.SynchronizedCachedSingletonFactory`2.GetNonBlocking(`0,ExitGames.Threading.CreateMethodDelegate{`0,`1})">
            <summary>
              Gets an existing value for a key or creates a new one.
              The creation of a new instance is not guarded. This introduces a risk that the creation method is called multiple times for the same key at the same time. Only one of the created values is added.
              This algorithm is ideal for creation methods that are either not likely to be called multiple times at the same time or that have an unpredictable execution time and a low usage of local reosurces.
            </summary>
            <param name = "key">
              The key.
            </param>
            <param name = "createMethod">
              The creation method.
            </param>
            <returns>
              The value.
            </returns>
        </member>
        <member name="M:ExitGames.Threading.CachedSingletonFactory.SynchronizedCachedSingletonFactory`2.Remove(ExitGames.Threading.CachedSingletonFactory.CacheKey{`0,`1})">
            <summary>
              Removes a value from the cache and from the <see cref="P:ExitGames.Threading.SynchronizedSingletonFactory`2.Instances"/>.
            </summary>
            <param name="key">
              The key.
            </param>
            <returns>
              True if key was found and removed, otherwise false.
            </returns>
        </member>
        <member name="M:ExitGames.Threading.CachedSingletonFactory.SynchronizedCachedSingletonFactory`2.Remove(`0)">
            <summary>
              Removes a value from the cache and from the <see cref="P:ExitGames.Threading.SynchronizedSingletonFactory`2.Instances"/>.
            </summary>
            <param name="key">
              The key.
            </param>
            <returns>
              True if key was found and removed, otherwise false.
            </returns>
        </member>
        <member name="M:ExitGames.Threading.CachedSingletonFactory.SynchronizedCachedSingletonFactory`2.TryGet(ExitGames.Threading.CachedSingletonFactory.CacheKey{`0,`1},ExitGames.Threading.CachedSingletonFactory.CacheValue{`0,`1}@)">
            <summary>
              Tries to get an existing value for the key.
            </summary>
            <param name = "key">
              The key.
            </param>
            <param name = "value">
              The value.
            </param>
            <returns>
              True if a value was found, otherwise false.
            </returns>
        </member>
        <member name="M:ExitGames.Threading.CachedSingletonFactory.SynchronizedCachedSingletonFactory`2.TryGet(`0,`1@)">
            <summary>
              Tries to get an existing value for the key.
            </summary>
            <param name = "key">
              The key.
            </param>
            <param name = "value">
              The value.
            </param>
            <returns>
              True if a value was found, otherwise false.
            </returns>
        </member>
        <member name="M:ExitGames.Threading.CachedSingletonFactory.SynchronizedCachedSingletonFactory`2.DoAdd(ExitGames.Threading.CachedSingletonFactory.CacheKey{`0,`1},ExitGames.Threading.CachedSingletonFactory.CacheValue{`0,`1})">
            <summary>
              Adds a value to the <see cref="P:ExitGames.Threading.SynchronizedSingletonFactory`2.Instances"/> and the cache. 
              Calling methods need to guard the <see cref="P:ExitGames.Threading.SynchronizedSingletonFactory`2.Instances"/> with a <see cref="M:ExitGames.Threading.SynchronizedSingletonFactory`2.WriterLock"/>.
              Calling methods are: <see cref="M:ExitGames.Threading.SynchronizedSingletonFactory`2.Add(`0,`1)"/>,
              <see cref="M:ExitGames.Threading.CachedSingletonFactory.SynchronizedCachedSingletonFactory`2.GetBlockingInstance(`0,ExitGames.Threading.CreateMethodDelegate{`0,`1})">GetBlockingInstance</see>,
              <see cref="M:ExitGames.Threading.CachedSingletonFactory.SynchronizedCachedSingletonFactory`2.GetNonBlocking(`0,ExitGames.Threading.CreateMethodDelegate{`0,`1})">GetNonBlocking</see> and
              <see cref="M:ExitGames.Threading.CachedSingletonFactory.SynchronizedCachedSingletonFactory`2.GetBlockingOverall(`0,ExitGames.Threading.CreateMethodDelegate{`0,`1})">GetBlockingOverall</see>.
            </summary>
            <param name="key">
              The key.
            </param>
            <param name="value">
              The value.
            </param>
        </member>
        <member name="M:ExitGames.Threading.CachedSingletonFactory.SynchronizedCachedSingletonFactory`2.InsertIntoCache(System.String,ExitGames.Threading.CachedSingletonFactory.CacheValue{`0,`1},System.TimeSpan,System.Web.Caching.CacheItemRemovedCallback)">
            <summary>
              Inserts an item into the asp net cache. The subclass determines whether to use sliding or absolute caching.
            </summary>
            <param name = "key">
              The key.
            </param>
            <param name = "instance">
              The instance.
            </param>
            <param name = "cacheTimeSpan">
              The cache time span.
            </param>
            <param name = "callback">
              The remove callback.
            </param>
        </member>
        <member name="M:ExitGames.Threading.CachedSingletonFactory.SynchronizedCachedSingletonFactory`2.Create(ExitGames.Threading.CachedSingletonFactory.CacheKey{`0,`1},ExitGames.Threading.CachedSingletonFactory.CacheValue{`0,`1}@)">
            <summary>
              Creates a new <see cref="T:ExitGames.Threading.CachedSingletonFactory.CacheValue`2"/>.
            </summary>
            <param name="key">
              The key.
            </param>
            <param name="value">
              The value.
            </param>
            <returns>
              True if a value was created
            </returns>
        </member>
        <member name="M:ExitGames.Threading.CachedSingletonFactory.SynchronizedCachedSingletonFactory`2.CreateCacheKey(`0,ExitGames.Threading.CreateMethodDelegate{`0,`1})">
            <summary>
              Creates a new cache key.
            </summary>
            <param name="key">
              The key.
            </param>
            <param name="createMethod">
              The default create method.
            </param>
            <returns>
              A <see cref="T:ExitGames.Threading.CachedSingletonFactory.CacheKey`2"/>.
            </returns>
        </member>
        <member name="M:ExitGames.Threading.CachedSingletonFactory.SynchronizedCachedSingletonFactory`2.OnCacheItemRemoved(System.String,System.Object,System.Web.Caching.CacheItemRemovedReason)">
            <summary>
              Callback when an item was removed from cache.
            </summary>
            <param name = "key">
              The key.
            </param>
            <param name = "value">
              The value.
            </param>
            <param name = "reason">
              The reason.
            </param>
        </member>
        <member name="M:ExitGames.Threading.CachedSingletonFactory.SynchronizedCachedSingletonFactory`2.RemoveCacheKey(`0)">
            <summary>
              Removes a key.
            </summary>
            <param name = "key">
              The key.
            </param>
        </member>
        <member name="M:ExitGames.Threading.CachedSingletonFactory.SynchronizedCachedSingletonFactory`2.SetCacheKey(`0,ExitGames.Threading.CachedSingletonFactory.CacheKey{`0,`1})">
            <summary>
              Sets a cache key.
            </summary>
            <param name = "key">
              The key.
            </param>
            <param name = "cacheKey">
              The cache key.
            </param>
        </member>
        <member name="M:ExitGames.Threading.CachedSingletonFactory.SynchronizedCachedSingletonFactory`2.TryGetCacheKey(`0,ExitGames.Threading.CachedSingletonFactory.CacheKey{`0,`1}@)">
            <summary>
             Try to get a cache key.
            </summary>
            <param name = "key">
             The key.
            </param>
            <param name = "cacheKey">
             The cache key.
            </param>
            <returns>
             True on success.
            </returns>
        </member>
        <member name="P:ExitGames.Threading.CachedSingletonFactory.SynchronizedCachedSingletonFactory`2.CacheTimeOut">
            <summary>
              Gets or sets the caching timeout.
            </summary>
        </member>
        <member name="P:ExitGames.Threading.CachedSingletonFactory.SynchronizedCachedSingletonFactory`2.DoCreateMethod">
            <summary>
              Gets or sets the default creation method.
            </summary>
        </member>
        <member name="P:ExitGames.Threading.CachedSingletonFactory.SynchronizedCachedSingletonFactory`2.RemoveCallback">
            <summary>
              Gets or sets the callback for removed items.
            </summary>
        </member>
        <member name="P:ExitGames.Threading.CachedSingletonFactory.SynchronizedCachedSingletonFactory`2.Cache">
            <summary>
              Gets the asp net cache.
            </summary>
        </member>
        <member name="F:ExitGames.Threading.CachedSingletonFactory.CachedSingletonFactoryAbsolute`2.log">
            <summary>
            The logger.
            </summary>
        </member>
        <member name="M:ExitGames.Threading.CachedSingletonFactory.CachedSingletonFactoryAbsolute`2.#ctor(ExitGames.Threading.CreateMethodDelegate{`0,`1},System.Action{`0,`1},System.TimeSpan,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ExitGames.Threading.CachedSingletonFactory.CachedSingletonFactoryAbsolute`2"/> class. 
            </summary>
            <param name="defaultCreateMethod">
            The default create method.
            </param>
            <param name="removeCallback">
            The remove callback.
            </param>
            <param name="cacheTimeSpan">
            The cache time span.
            </param>
            <param name="lockTimeout">
            The lock timeout in ms.
            </param>
        </member>
        <member name="M:ExitGames.Threading.CachedSingletonFactory.CachedSingletonFactoryAbsolute`2.InsertIntoCache(System.String,ExitGames.Threading.CachedSingletonFactory.CacheValue{`0,`1},System.TimeSpan,System.Web.Caching.CacheItemRemovedCallback)">
            <summary>
            Inserts an item into the asp net cache with absolute caching.
            </summary>
            <param name="key">
            The key.
            </param>
            <param name="instance">
            The instance.
            </param>
            <param name="cacheTimeSpan">
            The total time to keep the instance in cache.
            </param>
            <param name="callback">
            The remove callback.
            </param>
        </member>
        <member name="P:ExitGames.Threading.CachedSingletonFactory.CachedSingletonFactoryAbsolute`2.CacheTimeOut">
            <summary>
            Gets or sets the absolute cache timeout.
            Zero values are converted to 1 second.
            </summary>
        </member>
        <member name="T:ExitGames.Threading.CachedSingletonFactory.CachedSingletonFactorySliding`2">
            <summary>
              A <see cref="T:ExitGames.Threading.CachedSingletonFactory.SynchronizedCachedSingletonFactory`2"/> for sliding caching.
            </summary>
            <typeparam name="TKey">
              The type of the keys.
            </typeparam>
            <typeparam name="TValue">
              The type of the values.
            </typeparam>
        </member>
        <member name="F:ExitGames.Threading.CachedSingletonFactory.CachedSingletonFactorySliding`2.log">
            <summary>
              The logger.
            </summary>
        </member>
        <member name="M:ExitGames.Threading.CachedSingletonFactory.CachedSingletonFactorySliding`2.#ctor(ExitGames.Threading.CreateMethodDelegate{`0,`1},System.Action{`0,`1},System.TimeSpan,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:ExitGames.Threading.CachedSingletonFactory.CachedSingletonFactorySliding`2"/> class.
            </summary>
            <param name="defaultCreateMethod">
              The default create method.
            </param>
            <param name="removeCallback">
              The remove callback.
            </param>
            <param name="cacheTimeSpan">
              The cache time span.
            </param>
            <param name="lockTimeout">
              The lock timeout in ms.
            </param>
        </member>
        <member name="M:ExitGames.Threading.CachedSingletonFactory.CachedSingletonFactorySliding`2.InsertIntoCache(System.String,ExitGames.Threading.CachedSingletonFactory.CacheValue{`0,`1},System.TimeSpan,System.Web.Caching.CacheItemRemovedCallback)">
            <summary>
              Inserts an item into the cache with a sliding timeout.
            </summary>
            <param name = "key">
              The key.
            </param>
            <param name = "instance">
              The instance.
            </param>
            <param name = "cacheTimeSpan">
              The cache time span.
            </param>
            <param name = "callback">
              The remove callback.
            </param>
        </member>
        <member name="P:ExitGames.Threading.CachedSingletonFactory.CachedSingletonFactorySliding`2.CacheTimeOut">
            <summary>
              Gets or sets the time until items are removed from the cache after the last access.
            </summary>
        </member>
        <member name="T:ExitGames.Threading.CachedSingletonFactory.CacheKey`2">
            <summary>
            A key used by the <see cref="T:ExitGames.Threading.CachedSingletonFactory.SynchronizedCachedSingletonFactory`2"/>.
            </summary>
            <typeparam name="TKey">
            The type of keys the factory uses.
            </typeparam>
            <typeparam name="TValue">
            The type of values the factory uses.
            </typeparam>
        </member>
        <member name="F:ExitGames.Threading.CachedSingletonFactory.CacheKey`2.AspCacheKey">
            <summary>
            THe asp net cache key.
            </summary>
        </member>
        <member name="F:ExitGames.Threading.CachedSingletonFactory.CacheKey`2.CreateMethod">
            <summary>
            The creation method.
            </summary>
        </member>
        <member name="F:ExitGames.Threading.CachedSingletonFactory.CacheKey`2.Key">
            <summary>
            The key.
            </summary>
        </member>
        <member name="M:ExitGames.Threading.CachedSingletonFactory.CacheKey`2.#ctor(System.String,`0,ExitGames.Threading.CreateMethodDelegate{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:ExitGames.Threading.CachedSingletonFactory.CacheKey`2"/> struct. 
            </summary>
            <param name="cacheKey">
            The cache key.
            </param>
            <param name="key">
            The key.
            </param>
            <param name="createMethod">
            The creation method.
            </param>
        </member>
        <member name="M:ExitGames.Threading.CachedSingletonFactory.CacheKey`2.Equals(System.Object)">
            <summary>
            Compares the keys of two <see cref="T:ExitGames.Threading.CachedSingletonFactory.CacheKey`2"/> instances.
            </summary>
            <param name="obj">
            The obj.
            </param>
            <returns>
            True if keys equal.
            </returns>
            <exception cref="T:System.InvalidCastException">
            <paramref name="obj"/> is not a <see cref="T:ExitGames.Threading.CachedSingletonFactory.CacheKey`2"/>.
            </exception>
        </member>
        <member name="M:ExitGames.Threading.CachedSingletonFactory.CacheKey`2.GetHashCode">
            <summary>
            Gets the hash code of the key.
            </summary>
            <returns>
            The hash code of the key.
            </returns>
        </member>
        <member name="M:ExitGames.Threading.CachedSingletonFactory.CacheKey`2.ToString">
            <summary>
            Returns a string representation of the instance.
            </summary>
            <returns>
            A string representation of the instance.
            </returns>
        </member>
        <member name="T:ExitGames.Threading.CachedSingletonFactory.CacheValue`2">
            <summary>
            A value used by the <see cref="T:ExitGames.Threading.CachedSingletonFactory.SynchronizedCachedSingletonFactory`2"/>.
            </summary>
            <typeparam name="TKey">
            The type of keys the factory uses.
            </typeparam>
            <typeparam name="TValue">
            The type of values the factory uses.
            </typeparam>
        </member>
        <member name="F:ExitGames.Threading.CachedSingletonFactory.CacheValue`2.Key">
            <summary>
            The cache key.
            </summary>
        </member>
        <member name="F:ExitGames.Threading.CachedSingletonFactory.CacheValue`2.Value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="M:ExitGames.Threading.CachedSingletonFactory.CacheValue`2.#ctor(ExitGames.Threading.CachedSingletonFactory.CacheKey{`0,`1},`1)">
            <summary>
            Initializes a new instance of the <see cref="T:ExitGames.Threading.CachedSingletonFactory.CacheValue`2"/> struct. 
            </summary>
            <param name="key">
            The key.
            </param>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="M:ExitGames.Threading.CachedSingletonFactory.CacheValue`2.Equals(System.Object)">
            <summary>
            Compares the values of two <see cref="T:ExitGames.Threading.CachedSingletonFactory.CacheValue`2"/> instances.
            </summary>
            <param name="obj">
            The obj.
            </param>
            <returns>
            True if values are equal.
            </returns>
            <exception cref="T:System.InvalidCastException">
            <paramref name="obj"/> is not a <see cref="T:ExitGames.Threading.CachedSingletonFactory.CacheValue`2"/>.
            </exception>
        </member>
        <member name="M:ExitGames.Threading.CachedSingletonFactory.CacheValue`2.GetHashCode">
            <summary>
            Gets the hash code of the value.
            </summary>
            <returns>
            The hash code of the value.
            </returns>
        </member>
        <member name="M:ExitGames.Threading.CachedSingletonFactory.CacheValue`2.ToString">
            <summary>
            Returns a string representation of the instance.
            </summary>
            <returns>
            A string representation of the instance.
            </returns>
        </member>
        <member name="T:ExitGames.Threading.FailSafeBatchExecutor">
            <summary>
            An <see cref="T:ExitGames.Concurrency.Core.IExecutor"/> that can be used for a <see cref="T:ExitGames.Concurrency.Fibers.PoolFiber"/> to catch and log or forward exceptions that happen during execution.
            </summary>
        </member>
        <member name="F:ExitGames.Threading.FailSafeBatchExecutor.log">
            <summary>
            The logger.
            </summary>
        </member>
        <member name="F:ExitGames.Threading.FailSafeBatchExecutor.exceptionHandler">
            <summary>
            The exception handler.
            </summary>
        </member>
        <member name="F:ExitGames.Threading.FailSafeBatchExecutor.running">
            <summary>
            Indicates whether the executor is running.
            </summary>
        </member>
        <member name="M:ExitGames.Threading.FailSafeBatchExecutor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ExitGames.Threading.FailSafeBatchExecutor"/> class that logs all exceptions to a <see cref="T:ExitGames.Logging.ILogger"/>.
            </summary>
        </member>
        <member name="M:ExitGames.Threading.FailSafeBatchExecutor.#ctor(System.Action{System.Exception})">
            <summary>
            Initializes a new instance of the <see cref="T:ExitGames.Threading.FailSafeBatchExecutor"/> class that forwards all exceptions to a custom exception handler.
            </summary>
            <param name="exceptionHandler">
            The exception handler.
            </param>
        </member>
        <member name="M:ExitGames.Threading.FailSafeBatchExecutor.Execute(System.Collections.Generic.List{System.Action})">
            <summary>
            Exexutes a list of actions with <see cref="M:ExitGames.Threading.FailSafeBatchExecutor.Execute(System.Action)"/>.
            </summary>
            <param name="actionList">
            The action list.
            </param>
        </member>
        <member name="M:ExitGames.Threading.FailSafeBatchExecutor.Execute(System.Action)">
            <summary>
            Executes an action and forwards exceptions to the assigned exception handler.
            </summary>
            <param name="action">
            The action.
            </param>
        </member>
        <member name="P:ExitGames.Threading.FailSafeBatchExecutor.IsEnabled">
            <summary>
            Gets or sets a value indicating whether the executor is enabled.
            When disabled, actions will be ignored by executor. The executor is typically disabled at shutdown
            to prevent any pending actions from being executed. 
            </summary>
        </member>
        <member name="F:ExitGames.Threading.ExtendedFailSafeExecutor.InitialListSize">
            <summary>
            initial size of bufferedActions list
            </summary>
        </member>
        <member name="F:ExitGames.Threading.ExtendedFailSafeExecutor.log">
            <summary>
            The logger.
            </summary>
        </member>
        <member name="M:ExitGames.Threading.ExtendedFailSafeExecutor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ExitGames.Threading.ExtendedFailSafeExecutor"/> class that logs all exceptions to a <see cref="T:ExitGames.Logging.ILogger"/>.
            </summary>
        </member>
        <member name="M:ExitGames.Threading.ExtendedFailSafeExecutor.#ctor(System.Action{System.Exception})">
            <summary>
            Initializes a new instance of the <see cref="T:ExitGames.Threading.ExtendedFailSafeExecutor"/> class that forwards all exceptions to a custom exception handler.
            </summary>
            <param name="exceptionHandler">
            The exception handler.
            </param>
        </member>
        <member name="T:ExitGames.Threading.LockTimeoutException">
            <summary>
              This exception type is thrown if a timeout occurs when creating an instance of <see cref="T:ExitGames.Threading.Lock"/>, <see cref="T:ExitGames.Threading.ReadLock"/>, <see cref="T:ExitGames.Threading.WriteLock"/> or <see cref="T:ExitGames.Threading.UpgradeableReadLock"/>.
            </summary>
        </member>
        <member name="T:ExitGames.Threading.ReadLock">
            <summary>
              This <see cref="T:System.IDisposable"/> uses the <see cref="T:System.Threading.ReaderWriterLockSlim"/> for critical sections that allow one writer and multiple reader. 
              The counter parts are <see cref="T:ExitGames.Threading.WriteLock"/> and <see cref="T:ExitGames.Threading.UpgradeableReadLock"/>.
              It is used to replaces try-finally blocks with "using" statements.
            </summary>
            <example>
              <code>
                using (ReadLock.Enter(rwLock))
                {
                // critical section here
                }
              </code>
            </example>
        </member>
        <member name="F:ExitGames.Threading.ReadLock.syncObject">
            <summary>
              The reader writer lock.
            </summary>
        </member>
        <member name="M:ExitGames.Threading.ReadLock.#ctor(System.Threading.ReaderWriterLockSlim)">
            <summary>
              Initializes a new instance of the <see cref="T:ExitGames.Threading.ReadLock"/> struct.
            </summary>
            <param name="syncObject">
              The reader writer lock
            </param>
        </member>
        <member name="M:ExitGames.Threading.ReadLock.#ctor(System.Threading.ReaderWriterLockSlim,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:ExitGames.Threading.ReadLock"/> struct.
            </summary>
            <param name="syncObject">
              The reader writer lock
            </param>
            <param name="millisecondsTimeout">
              The timeout for <see cref="M:System.Threading.ReaderWriterLockSlim.TryEnterReadLock(System.Int32)"/> in milliseconds.
            </param>
            <exception cref="T:ExitGames.Threading.LockTimeoutException">
              <see cref="M:System.Threading.ReaderWriterLockSlim.TryEnterReadLock(System.Int32)"/> returned false.
            </exception>
        </member>
        <member name="M:ExitGames.Threading.ReadLock.Enter(System.Threading.ReaderWriterLockSlim)">
            <summary>
              Enters a critical section with <see cref="M:System.Threading.ReaderWriterLockSlim.EnterReadLock"/> and returns a new instance of <see cref="T:ExitGames.Threading.ReadLock"/>.
            </summary>
            <param name="syncObject">
              The reader writer lock.
            </param>
            <returns>
              A <see cref="T:ExitGames.Threading.ReadLock"/> that can be disposed to call <see cref="M:System.Threading.ReaderWriterLockSlim.ExitReadLock"/>. 
            </returns>
        </member>
        <member name="M:ExitGames.Threading.ReadLock.TryEnter(System.Threading.ReaderWriterLockSlim,System.Int32)">
            <summary>
              Enters a critical section with <see cref="M:System.Threading.ReaderWriterLockSlim.TryEnterReadLock(System.Int32)"/> and returns a new instance of <see cref="T:ExitGames.Threading.ReadLock"/>.
            </summary>
            <param name="syncObject">
              The reader writer lock.
            </param>
            <param name="millisecondsTimeout">
              The timeout for <see cref="M:System.Threading.ReaderWriterLockSlim.TryEnterReadLock(System.Int32)"/> in milliseconds.
            </param>
            <returns>
              A <see cref="T:ExitGames.Threading.WriteLock"/> that can be disposed to call <see cref="M:System.Threading.ReaderWriterLockSlim.ExitReadLock"/>. 
            </returns>
            <exception cref="T:ExitGames.Threading.LockTimeoutException">
              <see cref="M:System.Threading.ReaderWriterLockSlim.TryEnterReadLock(System.Int32)"/> returned false.
            </exception>
        </member>
        <member name="M:ExitGames.Threading.ReadLock.Dispose">
            <summary>
              Calls <see cref="M:System.Threading.ReaderWriterLockSlim.ExitReadLock"/>.
            </summary>
        </member>
        <member name="T:ExitGames.Messaging.Channels.SubscriptionContainer">
            <summary>
              A container for <see cref="T:ExitGames.Messaging.Channels.IChannel`1"/> subscriptions with a topic.
            </summary>
            <remarks>
              Instance members are not thread safe.
            </remarks>
        </member>
        <member name="F:ExitGames.Messaging.Channels.SubscriptionContainer.subscriptions">
            <summary>
              The stored subscriptions.
            </summary>
        </member>
        <member name="M:ExitGames.Messaging.Channels.SubscriptionContainer.Add(System.String,System.IDisposable)">
            <summary>
              Adds a subscription.
            </summary>
            <param name = "topic">
              The topic.
            </param>
            <param name = "unsubscriber">
              The subscription.
            </param>
        </member>
        <member name="M:ExitGames.Messaging.Channels.SubscriptionContainer.Contains(System.String)">
            <summary>
              Checks whether a subscription for a topic exists.
            </summary>
            <param name = "topic">
              The topic.
            </param>
            <returns>
              True if a subscription was found.
            </returns>
        </member>
        <member name="M:ExitGames.Messaging.Channels.SubscriptionContainer.GetTopics">
            <summary>
              Gets all subscribed topics.
            </summary>
            <returns>
              A list of all subscribed topics.
            </returns>
        </member>
        <member name="M:ExitGames.Messaging.Channels.SubscriptionContainer.Subscribe``1(System.String,ExitGames.Concurrency.Channels.IChannel{``0},ExitGames.Concurrency.Fibers.IFiber,System.Action{``0})">
            <summary>
              Subscribes to a channel with a topic. 
              This method first unsubscribes from topic if necessary.
            </summary>
            <typeparam name = "T">
              The message type.
            </typeparam>
            <param name = "topic">
              The topic.
            </param>
            <param name = "channel">
              The channel.
            </param>
            <param name = "executor">
              The execution fiber.
            </param>
            <param name = "action">
              The callback action.
            </param>
            <returns>
              True if resubscribed, false if subscribed the first time.
            </returns>
        </member>
        <member name="M:ExitGames.Messaging.Channels.SubscriptionContainer.Unsubscribe(System.String)">
            <summary>
              Unsubscribes from a topic.
            </summary>
            <param name = "topic">
              The topic.
            </param>
            <returns>
              True if unsubscribed.
            </returns>
        </member>
        <member name="M:ExitGames.Messaging.Channels.SubscriptionContainer.Dispose">
            <summary>
              Disposes all subscriptions.
            </summary>
        </member>
        <member name="T:ExitGames.Messaging.Channels.IMessageQueue`1">
            <summary>
              The implementor stores messages of type T.
            </summary>
            <typeparam name = "T">
              The message type.
            </typeparam>
        </member>
        <member name="M:ExitGames.Messaging.Channels.IMessageQueue`1.Dequeue(System.Int32,System.Func{`0,System.Boolean})">
            <summary>
              Dequeues up to the given amount of messages.
            </summary>
            <param name = "maxCount">
              The max number of messages to dequeue.
            </param>
            <param name = "skip">
              A message filter.
            </param>
            <returns>
              A list of messages.
            </returns>
        </member>
        <member name="M:ExitGames.Messaging.Channels.IMessageQueue`1.Dequeue">
            <summary>
              Dequeues the next message.
            </summary>
            <returns>
              A message.
            </returns>
        </member>
        <member name="M:ExitGames.Messaging.Channels.IMessageQueue`1.Dequeue(System.Int32)">
            <summary>
              Dequeues up to the given amount of messages.
            </summary>
            <param name = "maxCount">
              The max number of messages to dequeue.
            </param>
            <returns>
              A list of messages.
            </returns>
        </member>
        <member name="M:ExitGames.Messaging.Channels.IMessageQueue`1.DequeueAll(System.Func{`0,System.Boolean})">
            <summary>
              Dequeues all messages.
            </summary>
            <param name = "skip">
              A message filter.
            </param>
            <returns>
              A list of messages.
            </returns>
        </member>
        <member name="M:ExitGames.Messaging.Channels.IMessageQueue`1.DequeueAll">
            <summary>
              Dequeues all messages.
            </summary>
            <returns>
              A list of messages.
            </returns>
        </member>
        <member name="M:ExitGames.Messaging.Channels.IMessageQueue`1.Enqueue(`0)">
            <summary>
              Enqueues a message.
            </summary>
            <param name = "message">
              A message.
            </param>
        </member>
        <member name="M:ExitGames.Messaging.Channels.IMessageQueue`1.IsSubscribed(System.String)">
            <summary>
              Checks if queue is subscribed to a channel with a certain topic.
            </summary>
            <param name = "topic">
              The topic.
            </param>
            <returns>
              True if subscribed.
            </returns>
        </member>
        <member name="M:ExitGames.Messaging.Channels.IMessageQueue`1.Subscribe(System.String,ExitGames.Concurrency.Channels.IChannel{`0})">
            <summary>
              Subscribes to a <see cref="T:ExitGames.Concurrency.Channels.IChannel`1"/> with a topic.
            </summary>
            <param name="topic">
              The channel topic.
            </param>
            <param name="channel">
              The channel.
            </param>
            <returns>
              True if resubscribed, false if subscribed first time.
            </returns>
        </member>
        <member name="M:ExitGames.Messaging.Channels.IMessageQueue`1.Unsubscribe(System.String)">
            <summary>
              Unsubscribes from a topic channel.
            </summary>
            <param name = "topic">
              The topic.
            </param>
            <returns>
              True if unsubscribed.
            </returns>
        </member>
        <member name="P:ExitGames.Messaging.Channels.IMessageQueue`1.Count">
            <summary>
              Gets the number of queued message.
            </summary>
        </member>
        <member name="T:ExitGames.Messaging.Channels.LockedMessageQueue`1">
            <summary>
              The <see cref="T:ExitGames.Messaging.Channels.LockedMessageQueue`1"/> is a thread safe extension of the <see cref="T:ExitGames.Messaging.Channels.MessageQueue`1"/>.
            </summary>
            <typeparam name="T">
              The message type.
            </typeparam>
        </member>
        <member name="T:ExitGames.Messaging.Channels.MessageQueue`1">
            <summary>
              This class collects messages from a <see cref="T:ExitGames.Messaging.Channels.Channel`1"/> for later use, for example for a http client.
            </summary>
            <typeparam name="T">
              The message type.
            </typeparam>
            <remarks>
              Instance members of this class are NOT thread safe, all instance members have to be executed with given <see cref="P:ExitGames.Messaging.Channels.MessageQueue`1.Executor"/>.
              The <see cref="T:ExitGames.Messaging.Channels.LockedMessageQueue`1"/> provides thread safe instance members.
            </remarks>
        </member>
        <member name="F:ExitGames.Messaging.Channels.MessageQueue`1.disposeExecutor">
            <summary>
              Indicates whether to dispose the executor at <see cref="M:ExitGames.Messaging.Channels.MessageQueue`1.Dispose"/>.
            </summary>
        </member>
        <member name="F:ExitGames.Messaging.Channels.MessageQueue`1.executor">
            <summary>
              The executor fiber.
            </summary>
        </member>
        <member name="F:ExitGames.Messaging.Channels.MessageQueue`1.messages">
            <summary>
              The stored messages.
            </summary>
        </member>
        <member name="F:ExitGames.Messaging.Channels.MessageQueue`1.subscriptions">
            <summary>
              The channel subscriptions.
            </summary>
        </member>
        <member name="M:ExitGames.Messaging.Channels.MessageQueue`1.#ctor(ExitGames.Concurrency.Fibers.IFiber)">
            <summary>
              Initializes a new instance of the <see cref="T:ExitGames.Messaging.Channels.MessageQueue`1"/> class.
            </summary>
            <param name="executor">
              The executor.
            </param>
            <remarks>
              Instances created with this constructor do not dispose the <paramref name="executor"/> at <see cref="M:ExitGames.Messaging.Channels.MessageQueue`1.Dispose"/>
            </remarks>
        </member>
        <member name="M:ExitGames.Messaging.Channels.MessageQueue`1.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:ExitGames.Messaging.Channels.MessageQueue`1"/> class.
            </summary>
        </member>
        <member name="M:ExitGames.Messaging.Channels.MessageQueue`1.Finalize">
            <summary>
              Finalizes an instance of the <see cref="T:ExitGames.Messaging.Channels.MessageQueue`1"/> class.
            </summary>
        </member>
        <member name="M:ExitGames.Messaging.Channels.MessageQueue`1.Dispose">
            <summary>
              Disposes the managed and unmanaged resources.
            </summary>
            <remarks>
              Multi threaded execution of <see cref="M:ExitGames.Messaging.Channels.MessageQueue`1.Unsubscribe(System.String)"/>, <see cref="M:ExitGames.Messaging.Channels.MessageQueue`1.Subscribe(System.String,ExitGames.Concurrency.Channels.IChannel{`0})"/> and <see cref="M:ExitGames.Messaging.Channels.MessageQueue`1.Dispose"/> is not allowed.
            </remarks>
        </member>
        <member name="M:ExitGames.Messaging.Channels.MessageQueue`1.Dequeue">
            <summary>
              Dequeues the next message.
            </summary>
            <returns>
              A message.
            </returns>
        </member>
        <member name="M:ExitGames.Messaging.Channels.MessageQueue`1.Dequeue(System.Int32)">
            <summary>
              Dequeues up to the given amount of messages.
            </summary>
            <param name = "maxCount">
              The max number of messages to dequeue.
            </param>
            <returns>
              A list of messages.
            </returns>
        </member>
        <member name="M:ExitGames.Messaging.Channels.MessageQueue`1.Dequeue(System.Int32,System.Func{`0,System.Boolean})">
            <summary>
              Dequeues up to the given amount of messages.
            </summary>
            <param name = "maxCount">
              The max number of messages to dequeue.
            </param>
            <param name = "skip">
              A message filter.
            </param>
            <returns>
              A list of messages.
            </returns>
        </member>
        <member name="M:ExitGames.Messaging.Channels.MessageQueue`1.DequeueAll">
            <summary>
              Dequeues all messages.
            </summary>
            <returns>
              A list of messages.
            </returns>
        </member>
        <member name="M:ExitGames.Messaging.Channels.MessageQueue`1.DequeueAll(System.Func{`0,System.Boolean})">
            <summary>
              Dequeues all messages.
            </summary>
            <param name = "skip">
              A message filter.
            </param>
            <returns>
              A list of messages.
            </returns>
        </member>
        <member name="M:ExitGames.Messaging.Channels.MessageQueue`1.Enqueue(`0)">
            <summary>
              Enqueues a message.
            </summary>
            <param name = "message">
              A message.
            </param>
        </member>
        <member name="M:ExitGames.Messaging.Channels.MessageQueue`1.IsSubscribed(System.String)">
            <summary>
              Checks if queue is subscribed to a channel with a certain topic.
            </summary>
            <param name = "topic">
              The topic.
            </param>
            <returns>
              True if subscribed.
            </returns>
        </member>
        <member name="M:ExitGames.Messaging.Channels.MessageQueue`1.Subscribe(System.String,ExitGames.Concurrency.Channels.IChannel{`0})">
            <summary>
              Subscribes to a <see cref="T:ExitGames.Concurrency.Channels.IChannel`1"/> with a topic.
            </summary>
            <param name="topic">
              The channel topic.
            </param>
            <param name="channel">
              The channel.
            </param>
            <returns>
              True if resubscribed, false if subscribed first time.
            </returns>
        </member>
        <member name="M:ExitGames.Messaging.Channels.MessageQueue`1.Unsubscribe(System.String)">
            <summary>
              Unsubscribes from a topic channel.
            </summary>
            <param name = "topic">
              The topic.
            </param>
            <returns>
              True if unsubscribed.
            </returns>
        </member>
        <member name="M:ExitGames.Messaging.Channels.MessageQueue`1.Dispose(System.Boolean)">
            <summary>
              Disposes the managed and unmanaged resources.
            </summary>
            <param name="disposing">
              True if called from <see cref="M:ExitGames.Messaging.Channels.MessageQueue`1.Dispose"/>.
            </param>
        </member>
        <member name="P:ExitGames.Messaging.Channels.MessageQueue`1.Count">
            <summary>
              Gets the number of queued message.
            </summary>
        </member>
        <member name="P:ExitGames.Messaging.Channels.MessageQueue`1.Executor">
            <summary>
              Gets the executing <see cref="T:ExitGames.Concurrency.Fibers.IFiber"/>.
            </summary>
        </member>
        <member name="P:ExitGames.Messaging.Channels.MessageQueue`1.Messages">
            <summary>
              Gets the messages.
            </summary>
        </member>
        <member name="P:ExitGames.Messaging.Channels.MessageQueue`1.Subscriptions">
            <summary>
              Gets the suscriptions.
            </summary>
        </member>
        <member name="M:ExitGames.Messaging.Channels.LockedMessageQueue`1.#ctor(ExitGames.Concurrency.Fibers.IFiber)">
            <summary>
              Initializes a new instance of the <see cref="T:ExitGames.Messaging.Channels.LockedMessageQueue`1"/> class.
            </summary>
            <param name="executor">
              The fiber.
            </param>
        </member>
        <member name="M:ExitGames.Messaging.Channels.LockedMessageQueue`1.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:ExitGames.Messaging.Channels.LockedMessageQueue`1"/> class.
            </summary>
        </member>
        <member name="M:ExitGames.Messaging.Channels.LockedMessageQueue`1.Dequeue">
            <summary>
              Dequeues the next message.
            </summary>
            <returns>
              A message.
            </returns>
        </member>
        <member name="M:ExitGames.Messaging.Channels.LockedMessageQueue`1.Dequeue(System.Int32)">
            <summary>
              Dequeues up to the given amount of messages.
            </summary>
            <param name = "maxCount">
              The max number of messages to dequeue.
            </param>
            <returns>
              A list of messages.
            </returns>
        </member>
        <member name="M:ExitGames.Messaging.Channels.LockedMessageQueue`1.Dequeue(System.Int32,System.Func{`0,System.Boolean})">
            <summary>
              Dequeues up to the given amount of messages.
            </summary>
            <param name = "maxCount">
              The max number of messages to dequeue.
            </param>
            <param name = "skip">
              A message filter.
            </param>
            <returns>
              A list of messages.
            </returns>
        </member>
        <member name="M:ExitGames.Messaging.Channels.LockedMessageQueue`1.DequeueAll">
            <summary>
              Dequeues all messages.
            </summary>
            <returns>
              A list of messages.
            </returns>
        </member>
        <member name="M:ExitGames.Messaging.Channels.LockedMessageQueue`1.DequeueAll(System.Func{`0,System.Boolean})">
            <summary>
              Dequeues all messages.
            </summary>
            <param name = "skip">
              A message filter.
            </param>
            <returns>
              A list of messages.
            </returns>
        </member>
        <member name="M:ExitGames.Messaging.Channels.LockedMessageQueue`1.Enqueue(`0)">
            <summary>
              Enqueues a message.
            </summary>
            <param name = "message">
              A message.
            </param>
        </member>
        <member name="M:ExitGames.Messaging.Channels.LockedMessageQueue`1.Enqueue(System.Collections.Generic.List{`0})">
            <summary>
              Enqueues a list of messages.
            </summary>
            <param name = "messages">
              The messages.
            </param>
        </member>
        <member name="M:ExitGames.Messaging.Channels.LockedMessageQueue`1.IsSubscribed(System.String)">
            <summary>
              Checks if queue is subscribed to a channel with a certain topic.
            </summary>
            <param name = "topic">
              The topic.
            </param>
            <returns>
              True if subscribed.
            </returns>
        </member>
        <member name="M:ExitGames.Messaging.Channels.LockedMessageQueue`1.Subscribe(System.String,ExitGames.Concurrency.Channels.IChannel{`0})">
            <summary>
              Subscribes to a <see cref="T:ExitGames.Concurrency.Channels.IChannel`1"/> with a topic.
            </summary>
            <param name="topic">
              The channel topic.
            </param>
            <param name="channel">
              The channel.
            </param>
            <returns>
              True if resubscribed, false if subscribed first time.
            </returns>
        </member>
        <member name="M:ExitGames.Messaging.Channels.LockedMessageQueue`1.Unsubscribe(System.String)">
            <summary>
              Unsubscribes from a topic channel.
            </summary>
            <param name = "topic">
              The topic.
            </param>
            <returns>
              True if unsubscribed.
            </returns>
        </member>
        <member name="M:ExitGames.Messaging.Channels.LockedMessageQueue`1.Dispose(System.Boolean)">
            <summary>
              Disposes the managed and unmanaged resources.
            </summary>
            <param name="disposing">
              True if called from <see cref="M:ExitGames.Messaging.Channels.LockedMessageQueue`1.Dispose(System.Boolean)"/>.
            </param>
        </member>
        <member name="P:ExitGames.Messaging.Channels.LockedMessageQueue`1.Count">
            <summary>
              Gets the number of queued messages.
            </summary>
        </member>
        <member name="T:ExitGames.Messaging.Channels.Channel`1">
            <summary>
              A <see cref="T:ExitGames.Concurrency.Channels.Channel`1"/> implementing the <see cref="T:ExitGames.Messaging.Channels.IChannel`1"/>
            </summary>
            <typeparam name="T">
              The message type.
            </typeparam>
        </member>
        <member name="M:ExitGames.Messaging.Channels.Channel`1.Publish(`0,System.Guid)">
            <summary>
              Publishes a message with a host id.
            </summary>
            <param name = "msg">
              The message .
            </param>
            <param name = "hostId">
              The host id is included to identify and filter received messages that were sent from the same host.
            </param>
            <returns>
              True if there is any receiver.
            </returns>
        </member>
        <member name="T:ExitGames.Net.Sockets.Pgm.PgmSocketReceiver">
            <summary>
              This <see cref="T:ExitGames.Net.Sockets.ISocketReceiver"/> wraps a <see cref="T:ExitGames.Net.Sockets.PooledReceiver"/> and uses a <see cref="T:ExitGames.Net.Sockets.Pgm.PgmReceiver"/>.
            </summary>
        </member>
        <member name="F:ExitGames.Net.Sockets.Pgm.PgmSocketReceiver.PooledReceiver">
            <summary>
              The used <see cref="T:ExitGames.Net.Sockets.PooledReceiver"/>.
            </summary>
        </member>
        <member name="F:ExitGames.Net.Sockets.Pgm.PgmSocketReceiver.SocketReceiver">
            <summary>
              The used <see cref="T:ExitGames.Net.Sockets.Pgm.PgmReceiver"/>.
            </summary>
        </member>
        <member name="M:ExitGames.Net.Sockets.Pgm.PgmSocketReceiver.#ctor(System.String,System.Int32,System.String[])">
            <summary>
              Initializes a new instance of the <see cref="T:ExitGames.Net.Sockets.Pgm.PgmSocketReceiver"/> class.
            </summary>
            <param name="ip">
              The ip.
            </param>
            <param name="port">
              The port.
            </param>
            <param name="receiveInterfaces">
              The receive Interfaces.
            </param>
        </member>
        <member name="M:ExitGames.Net.Sockets.Pgm.PgmSocketReceiver.#ctor(System.String,System.Int32,System.Boolean,System.String[])">
            <summary>
              Initializes a new instance of the <see cref="T:ExitGames.Net.Sockets.Pgm.PgmSocketReceiver"/> class.
            </summary>
            <param name="ip">
              The ip.
            </param>
            <param name="port">
              The port.
            </param>
            <param name="batchedSender">
              The batched sender.
            </param>
            <param name="receiveInterfaces">
              The receive Interfaces.
            </param>
        </member>
        <member name="M:ExitGames.Net.Sockets.Pgm.PgmSocketReceiver.Finalize">
            <summary>
              Finalizes an instance of the <see cref="T:ExitGames.Net.Sockets.Pgm.PgmSocketReceiver"/> class.
            </summary>
        </member>
        <member name="M:ExitGames.Net.Sockets.Pgm.PgmSocketReceiver.Dispose">
            <summary>
              Disposes this instance.
            </summary>
        </member>
        <member name="M:ExitGames.Net.Sockets.Pgm.PgmSocketReceiver.Dispose(System.Boolean)">
            <summary>
              The dispose.
            </summary>
            <param name = "disposing">
              The disposing.
            </param>
        </member>
        <member name="M:ExitGames.Net.Sockets.Pgm.PgmSocketReceiver.OnReceive(ExitGames.Net.Sockets.SocketReceiveEventArgs)">
            <summary>
              The invoke receive.
            </summary>
            <param name = "e">
              The e.
            </param>
        </member>
        <member name="M:ExitGames.Net.Sockets.Pgm.PgmSocketReceiver.SocketReceiver_OnReceive(System.Object,ExitGames.Net.Sockets.SocketReceiveEventArgs)">
            <summary>
              The socket receiver_ receive.
            </summary>
            <param name = "sender">
              The sender.
            </param>
            <param name = "e">
              The e.
            </param>
        </member>
        <member name="E:ExitGames.Net.Sockets.Pgm.PgmSocketReceiver.Receive">
            <summary>
              The receive event.
            </summary>
        </member>
        <member name="P:ExitGames.Net.Sockets.Pgm.PgmSocketReceiver.EndPoint">
            <summary>
              Gets the multicast end point.
            </summary>
            <value>
              The end point.
            </value>
        </member>
        <member name="P:ExitGames.Net.Sockets.Pgm.PgmSocketReceiver.TotalBytesReceived">
            <summary>
              Gets or sets the totanl bytes received.
            </summary>
            <value>
              The total bytes received.
            </value>
        </member>
        <member name="T:ExitGames.Net.Sockets.Pgm.PgmSocketSender">
            <summary>
              This <see cref="T:ExitGames.Net.Sockets.ISocketSender"/> wraps a <see cref="T:ExitGames.Net.Sockets.PooledSender"/> and uses a <see cref="T:ExitGames.Net.Sockets.Pgm.PgmSender"/>.
            </summary>
        </member>
        <member name="F:ExitGames.Net.Sockets.Pgm.PgmSocketSender.PooledSender">
            <summary>
              The used <see cref="T:ExitGames.Net.Sockets.PooledSender"/>.
            </summary>
        </member>
        <member name="F:ExitGames.Net.Sockets.Pgm.PgmSocketSender.SocketSender">
            <summary>
              The used  <see cref="T:ExitGames.Net.Sockets.Pgm.PgmSender"/>.
            </summary>
        </member>
        <member name="M:ExitGames.Net.Sockets.Pgm.PgmSocketSender.#ctor(System.String,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:ExitGames.Net.Sockets.Pgm.PgmSocketSender"/> class.
            </summary>
            <param name="ip">
              The ip.
            </param>
            <param name="port">
              The port.
            </param>
        </member>
        <member name="M:ExitGames.Net.Sockets.Pgm.PgmSocketSender.#ctor(System.String,System.Int32,System.String)">
            <summary>
              Initializes a new instance of the <see cref="T:ExitGames.Net.Sockets.Pgm.PgmSocketSender"/> class.
            </summary>
            <param name="ip">
              The ip.
            </param>
            <param name="port">
              The port.
            </param>
            <param name="bindInterface">
              The bind interface.
            </param>
        </member>
        <member name="M:ExitGames.Net.Sockets.Pgm.PgmSocketSender.#ctor(System.String,System.Int32,System.Boolean,System.Int32,System.Nullable{ExitGames.Net.Sockets.Pgm.PgmSendWindowSize},System.String)">
            <summary>
              Initializes a new instance of the <see cref="T:ExitGames.Net.Sockets.Pgm.PgmSocketSender"/> class.
            </summary>
            <param name="ip">
              The ip.
            </param>
            <param name="port">
              The port.
            </param>
            <param name="sendBatched">
              The send batched.
            </param>
            <param name="batchSize">
              The batch size.
            </param>
            <param name="sendWindowSize">
              The send window size.
            </param>
            <param name="bindInterface">
              The bind interface.
            </param>
        </member>
        <member name="M:ExitGames.Net.Sockets.Pgm.PgmSocketSender.Finalize">
            <summary>
              Finalizes an instance of the <see cref="T:ExitGames.Net.Sockets.Pgm.PgmSocketSender"/> class.
            </summary>
        </member>
        <member name="M:ExitGames.Net.Sockets.Pgm.PgmSocketSender.Dispose">
            <summary>
              Disposes this instance.
            </summary>
        </member>
        <member name="M:ExitGames.Net.Sockets.Pgm.PgmSocketSender.Send(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})">
            <summary>
              Sends some data.
            </summary>
            <param name = "data">
              The data.
            </param>
        </member>
        <member name="M:ExitGames.Net.Sockets.Pgm.PgmSocketSender.Send(System.Byte[],System.Int32,System.Int32)">
            <summary>
              Sends some data.
            </summary>
            <param name = "data">
              The data.
            </param>
            <param name = "offset">
              The offset.
            </param>
            <param name = "length">
              The length.
            </param>
        </member>
        <member name="M:ExitGames.Net.Sockets.Pgm.PgmSocketSender.Send(System.Byte[])">
            <summary>
              Sends some data.
            </summary>
            <param name = "data">
              The data.
            </param>
        </member>
        <member name="M:ExitGames.Net.Sockets.Pgm.PgmSocketSender.Dispose(System.Boolean)">
            <summary>
              Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name = "disposing">
              <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.
            </param>
        </member>
        <member name="P:ExitGames.Net.Sockets.Pgm.PgmSocketSender.Connected">
            <summary>
            Gets a value indicating whether the <see cref="T:ExitGames.Net.Sockets.ISocketSender"/> is connected 
            to a remote host as of the last Send operation.
            </summary>
        </member>
        <member name="P:ExitGames.Net.Sockets.Pgm.PgmSocketSender.EndPoint">
            <summary>
              Gets the multicast end point.
            </summary>
            <value>
              The multicast end point.
            </value>
        </member>
        <member name="P:ExitGames.Net.Sockets.Pgm.PgmSocketSender.TotalBytesSent">
            <summary>
              Gets or sets the total bytes sent.
            </summary>
            <value>
              The total bytes sent.
            </value>
        </member>
        <member name="T:ExitGames.Messaging.Channels.TopicMessage">
            <summary>
              This stuct is sent through the socket.
            </summary>
        </member>
        <member name="M:ExitGames.Messaging.Channels.TopicMessage.Deserialize(System.Byte[],System.Int32,System.Int32,ExitGames.Messaging.Channels.TopicMessage@)">
            <summary>
              Deserializes a <see cref="T:ExitGames.Messaging.Channels.TopicMessage"/>.
            </summary>
            <param name="bytes">
              The bytes.
            </param>
            <param name="offset">
              The offset.
            </param>
            <param name="length">
              The length.
            </param>
            <param name="message">
              The result message
            </param>
            <returns>
              True on success, otherwise false.
            </returns>
        </member>
        <member name="M:ExitGames.Messaging.Channels.TopicMessage.Serialize(ExitGames.Messaging.Channels.TopicMessage)">
            <summary>
              Serializes a <see cref="T:ExitGames.Messaging.Channels.TopicMessage"/>.
            </summary>
            <param name="message">
              The message.
            </param>
            <returns>
              A byte array.
            </returns>
        </member>
        <member name="M:ExitGames.Messaging.Channels.TopicMessage.Serialize(System.Guid,System.String,System.Byte[])">
            <summary>
            Serializes a <see cref="T:ExitGames.Messaging.Channels.TopicMessage"/>.
            </summary>
            <param name="hostId">
            The host Id.
            </param>
            <param name="topic">
            The topic.
            </param>
            <param name="data">
            The data.
            </param>
            <returns>
            A byte array that can be converted to a <see cref="T:ExitGames.Messaging.Channels.TopicMessage"/> with <see cref="M:ExitGames.Messaging.Channels.TopicMessage.Deserialize(System.Byte[],System.Int32,System.Int32,ExitGames.Messaging.Channels.TopicMessage@)"/>.
            </returns>
        </member>
        <member name="P:ExitGames.Messaging.Channels.TopicMessage.Data">
            <summary>
              Gets or sets the payload data.
            </summary>
        </member>
        <member name="P:ExitGames.Messaging.Channels.TopicMessage.HostId">
            <summary>
              Gets or sets the sending host id.
            </summary>
        </member>
        <member name="P:ExitGames.Messaging.Channels.TopicMessage.Topic">
            <summary>
              Gets or sets the topic.
            </summary>
        </member>
        <member name="T:ExitGames.Net.Sockets.BatchMessage">
            <summary>
            batch message.
            </summary>
        </member>
        <member name="F:ExitGames.Net.Sockets.BatchMessage.HeaderSize">
            <summary>
            The header size.
            </summary>
        </member>
        <member name="F:ExitGames.Net.Sockets.BatchMessage.messages">
            <summary>
            The messages.
            </summary>
        </member>
        <member name="F:ExitGames.Net.Sockets.BatchMessage.size">
            <summary>
            The size.
            </summary>
        </member>
        <member name="M:ExitGames.Net.Sockets.BatchMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ExitGames.Net.Sockets.BatchMessage"/> class.
            </summary>
        </member>
        <member name="M:ExitGames.Net.Sockets.BatchMessage.FromBinary(System.Byte[])">
            <summary>
            Reads a <see cref="T:ExitGames.Net.Sockets.BatchMessage"/> from a byte array.
            </summary>
            <param name="data">
            The data.
            </param>
            <returns>
            A <see cref="T:ExitGames.Net.Sockets.BatchMessage"/>.
            </returns>
            <exception cref="T:System.ArgumentException">
            Length of byte array is less than header size.
            </exception>
        </member>
        <member name="M:ExitGames.Net.Sockets.BatchMessage.AddMessage(System.ArraySegment{System.Byte})">
            <summary>
            Adds a message.
            </summary>
            <param name="data">
            The data.
            </param>
        </member>
        <member name="M:ExitGames.Net.Sockets.BatchMessage.Clear">
            <summary>
            Clears all messages.
            </summary>
        </member>
        <member name="M:ExitGames.Net.Sockets.BatchMessage.ToBinary">
            <summary>
            Converts messages to a list of <see cref="T:System.ArraySegment`1"/> of byte.
            </summary>
            <returns>
            A list of <see cref="T:System.ArraySegment`1"/> of byte.
            </returns>
        </member>
        <member name="P:ExitGames.Net.Sockets.BatchMessage.MessageCount">
            <summary>
            Gets MessageCount.
            </summary>
        </member>
        <member name="P:ExitGames.Net.Sockets.BatchMessage.Size">
            <summary>
            Gets Size.
            </summary>
        </member>
        <member name="P:ExitGames.Net.Sockets.BatchMessage.Item(System.Int32)">
            <summary>
            The array segement indexer.
            </summary>
            <param name="index">
            The index.
            </param>
            <returns>
            An <see cref="T:System.ArraySegment`1"/>.
            </returns>
        </member>
        <member name="T:ExitGames.Net.Sockets.PooledReceiver">
            <summary>
            This <see cref="T:ExitGames.Net.Sockets.ISocketReceiver"/> wrapper dispatches received data async with the .NET thread pool.
            </summary>
        </member>
        <member name="F:ExitGames.Net.Sockets.PooledReceiver.Fiber">
            <summary>
            The used fiber.
            </summary>
        </member>
        <member name="F:ExitGames.Net.Sockets.PooledReceiver.log">
            <summary>
            <see cref="T:ExitGames.Logging.ILogger"/> instance used to log messages to the logging framework.
            </summary>
        </member>
        <member name="F:ExitGames.Net.Sockets.PooledReceiver.receiveAction">
            <summary>
            The receive callback.
            </summary>
        </member>
        <member name="F:ExitGames.Net.Sockets.PooledReceiver.receiver">
            <summary>
            The underlying receiver.
            </summary>
        </member>
        <member name="M:ExitGames.Net.Sockets.PooledReceiver.#ctor(ExitGames.Net.Sockets.ISocketReceiver,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ExitGames.Net.Sockets.PooledReceiver"/> class.
            </summary>
            <param name="receiver">
            The underlying receiver.
            </param>
            <param name="batchedSender">
            Indicates whether to expected message batches from the <see cref="T:ExitGames.Net.Sockets.PooledSender"/>.
            </param>
        </member>
        <member name="M:ExitGames.Net.Sockets.PooledReceiver.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:ExitGames.Net.Sockets.PooledReceiver"/> class.
            </summary>
        </member>
        <member name="M:ExitGames.Net.Sockets.PooledReceiver.ResetStatistics">
            <summary>
            Resets message and package count statistics.
            </summary>
        </member>
        <member name="M:ExitGames.Net.Sockets.PooledReceiver.Dispose">
            <summary>
            Disposes the instance.
            </summary>
        </member>
        <member name="M:ExitGames.Net.Sockets.PooledReceiver.Dispose(System.Boolean)">
            <summary>
            Disposes the instance.
            </summary>
            <param name="disposing">
            The disposing.
            </param>
        </member>
        <member name="M:ExitGames.Net.Sockets.PooledReceiver.OnReceive(System.Net.EndPoint,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Invokes the <see cref="E:ExitGames.Net.Sockets.PooledReceiver.Receive"/> event.
            </summary>
            <param name="remoteEndPoint">
            The remote end point.
            </param>
            <param name="buffer">
            The buffer.
            </param>
            <param name="offset">
            The offset.
            </param>
            <param name="length">
            The length.
            </param>
        </member>
        <member name="M:ExitGames.Net.Sockets.PooledReceiver.ProcessBuffer(ExitGames.Net.Sockets.PooledReceiver.ReceiveBuffer)">
            <summary>
            Updates statistics and calls <see cref="M:ExitGames.Net.Sockets.PooledReceiver.OnReceive(System.Net.EndPoint,System.Byte[],System.Int32,System.Int32)"/>.
            </summary>
            <param name="buffer">
            The received buffer.
            </param>
        </member>
        <member name="M:ExitGames.Net.Sockets.PooledReceiver.ProcessBufferBatched(ExitGames.Net.Sockets.PooledReceiver.ReceiveBuffer)">
            <summary>
            Updates statistics and calls <see cref="M:ExitGames.Net.Sockets.PooledReceiver.OnReceive(System.Net.EndPoint,System.Byte[],System.Int32,System.Int32)"/> for each message in the batch.
            </summary>
            <param name="buffer">
            The buffer.
            </param>
        </member>
        <member name="M:ExitGames.Net.Sockets.PooledReceiver.Receiver_OnReceive(System.Object,ExitGames.Net.Sockets.SocketReceiveEventArgs)">
            <summary>
            Receives the data from the underlying <see cref="T:ExitGames.Net.Sockets.ISocketReceiver"/> and queues them to the <see cref="T:ExitGames.Concurrency.Fibers.PoolFiber"/>.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="E:ExitGames.Net.Sockets.PooledReceiver.Receive">
            <summary>
            This event is invoked when new data is received.
            </summary>
        </member>
        <member name="P:ExitGames.Net.Sockets.PooledReceiver.EndPoint">
            <summary>
            Gets the remote end point.
            </summary>
            <value>
            Returns the underlying <see cref="P:ExitGames.Net.Sockets.ISocketReceiver.EndPoint"/>.
            </value>
        </member>
        <member name="P:ExitGames.Net.Sockets.PooledReceiver.ReceivedMessages">
            <summary>
            Gets the number of messages received.
            </summary>
            <value>
            The number of messages received.
            </value>
        </member>
        <member name="P:ExitGames.Net.Sockets.PooledReceiver.ReceivedPackages">
            <summary>
            Gets the number of packages received.
            </summary>
            <value>
            The number of packages received.
            </value>
        </member>
        <member name="P:ExitGames.Net.Sockets.PooledReceiver.TotalBytesReceived">
            <summary>
            Gets the total number of bytes received.
            </summary>
            <value>
            Returns the underlying <see cref="P:ExitGames.Net.Sockets.ISocketReceiver.TotalBytesReceived"/>.
            </value>
        </member>
        <member name="T:ExitGames.Net.Sockets.PooledReceiver.ReceiveBuffer">
            <summary>
            Private struct for buffering incoming data.
            </summary>
        </member>
        <member name="F:ExitGames.Net.Sockets.PooledReceiver.ReceiveBuffer.Data">
            <summary>
            The data.
            </summary>
        </member>
        <member name="F:ExitGames.Net.Sockets.PooledReceiver.ReceiveBuffer.EndPoint">
            <summary>
            The remote end point.
            </summary>
        </member>
        <member name="M:ExitGames.Net.Sockets.PooledReceiver.ReceiveBuffer.#ctor(ExitGames.Net.Sockets.SocketReceiveEventArgs)">
            <summary>
            Initializes a new instance of the <see cref="T:ExitGames.Net.Sockets.PooledReceiver.ReceiveBuffer"/> struct.
            </summary>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="T:ExitGames.Net.Sockets.PooledSender">
            <summary>
            This <see cref="T:ExitGames.Net.Sockets.ISocketSender"/> wrapper is used to send the data async using a the .NET thread pool.
            An optional settings allows the <see cref="T:ExitGames.Net.Sockets.PooledSender"/> to send multiple messages in a batch.
            </summary>
        </member>
        <member name="F:ExitGames.Net.Sockets.PooledSender.DefaultBatchSize">
            <summary>
            The default batch size. 
            </summary>
            <value>
            32 KB
            </value>
        </member>
        <member name="F:ExitGames.Net.Sockets.PooledSender.log">
            <summary>
            <see cref="T:ExitGames.Logging.ILogger"/> instance used to log messages to the logging framework.
            </summary>
        </member>
        <member name="F:ExitGames.Net.Sockets.PooledSender.batchMessage">
            <summary>
            The batch message.
            </summary>
        </member>
        <member name="F:ExitGames.Net.Sockets.PooledSender.enqueueAction">
            <summary>
            The enqueue action.
            </summary>
        </member>
        <member name="F:ExitGames.Net.Sockets.PooledSender.fiber">
            <summary>
            <see cref="T:ExitGames.Concurrency.Fibers.PoolFiber"/> used to send data.
            </summary>
        </member>
        <member name="F:ExitGames.Net.Sockets.PooledSender.packageSize">
            <summary>
            The package size.
            </summary>
        </member>
        <member name="F:ExitGames.Net.Sockets.PooledSender.sender">
            <summary>
            <see cref="T:ExitGames.Net.Sockets.Pgm.PgmSender"/> used to send data.
            </summary>
        </member>
        <member name="F:ExitGames.Net.Sockets.PooledSender.sendArraySegmentListAction">
            <summary>
            A list of <see cref="T:System.ArraySegment`1"/>s.
            </summary>
        </member>
        <member name="M:ExitGames.Net.Sockets.PooledSender.#ctor(ExitGames.Net.Sockets.ISocketSender)">
            <summary>
            Initializes a new instance of the <see cref="T:ExitGames.Net.Sockets.PooledSender"/> class.
            </summary>
            <param name="sender">
            The <see cref="T:ExitGames.Net.Sockets.ISocketSender"/> that is used to send the data.
            </param>
        </member>
        <member name="M:ExitGames.Net.Sockets.PooledSender.#ctor(ExitGames.Net.Sockets.ISocketSender,System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ExitGames.Net.Sockets.PooledSender"/> class.
            </summary>
            <param name="sender">
            The <see cref="T:ExitGames.Net.Sockets.ISocketSender"/> that is used to send the data.
            </param>
            <param name="sendBatched">
            Indicates whether multiple data should be send batched.
            </param>
            <param name="packageSize">
            The size for batch packages.
            </param>
        </member>
        <member name="M:ExitGames.Net.Sockets.PooledSender.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:ExitGames.Net.Sockets.PooledSender"/> class.
            </summary>
        </member>
        <member name="M:ExitGames.Net.Sockets.PooledSender.Dispose">
            <summary>
            Disposes the <see cref="T:ExitGames.Net.Sockets.PooledSender"/>.
            </summary>
        </member>
        <member name="M:ExitGames.Net.Sockets.PooledSender.Send(System.Byte[])">
            <summary>
            Sends a byte array to the socket.
            </summary>
            <param name="data">
            The data.
            </param>
        </member>
        <member name="M:ExitGames.Net.Sockets.PooledSender.Send(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sends a byte array to the socket.
            </summary>
            <param name="data">
            The data.
            </param>
            <param name="offset">
            The offset.
            </param>
            <param name="length">
            The length.
            </param>
        </member>
        <member name="M:ExitGames.Net.Sockets.PooledSender.Send(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})">
            <summary>
            Sends a list of <see cref="T:System.ArraySegment`1"/> of type byte to the socket.
            </summary>
            <param name="data">
            The data.
            </param>
        </member>
        <member name="M:ExitGames.Net.Sockets.PooledSender.DontSendArraySegmentList(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})">
            <summary>
            Does nothing. Used to disable the sending immediately.
            </summary>
            <param name="a">The data.</param>
        </member>
        <member name="M:ExitGames.Net.Sockets.PooledSender.Dispose(System.Boolean)">
            <summary>
            Disposes the instance.
            </summary>
            <param name="disposing">
            The disposing.
            </param>
        </member>
        <member name="M:ExitGames.Net.Sockets.PooledSender.OnSendError(System.Exception,System.Collections.Generic.IList{System.ArraySegment{System.Byte}})">
            <summary>
            Invokes <see cref="T:ExitGames.Net.Sockets.PooledSender.SendErrorEventArgs"/>.
            </summary>
            <param name="e">The exception.</param>
            <param name="payload">The payload.</param>
        </member>
        <member name="M:ExitGames.Net.Sockets.PooledSender.SendArraySegmentList(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})">
            <summary>
            Sends an array segment list.
            </summary>
            <param name="a">
            The a.
            </param>
        </member>
        <member name="M:ExitGames.Net.Sockets.PooledSender.SendBatchMessage">
            <summary>
            The send batch message.
            </summary>
        </member>
        <member name="E:ExitGames.Net.Sockets.PooledSender.SendError">
            <summary>
            This event is invoked if an unexpected error occurs.
            </summary>
        </member>
        <member name="P:ExitGames.Net.Sockets.PooledSender.Connected">
            <summary>
            Gets a value indicating whether the <see cref="T:ExitGames.Net.Sockets.ISocketSender"/> is connected 
            to a remote host as of the last Send operation.
            </summary>
        </member>
        <member name="P:ExitGames.Net.Sockets.PooledSender.EndPoint">
            <summary>
            Gets the remote end point.
            </summary>
            <value>
            Returns the underlying <see cref="P:ExitGames.Net.Sockets.ISocketSender.EndPoint"/>.
            </value>
        </member>
        <member name="P:ExitGames.Net.Sockets.PooledSender.TotalBytesSent">
            <summary>
            Gets the total number of bytes sent.
            </summary>
            <value>
            Returns the underlying <see cref="P:ExitGames.Net.Sockets.ISocketSender.TotalBytesSent"/>.
            </value>
        </member>
        <member name="P:ExitGames.Net.Sockets.PooledSender.Fiber">
            <summary>
            Gets the internally used fiber.
            </summary>
        </member>
        <member name="T:ExitGames.Net.Sockets.PooledSender.SendErrorEventArgs">
            <summary>
            The event args for event <see cref="E:ExitGames.Net.Sockets.PooledSender.SendError"/>.
            </summary>
        </member>
        <member name="F:ExitGames.Net.Sockets.PooledSender.SendErrorEventArgs.exception">
            <summary>
            The exception.
            </summary>
        </member>
        <member name="F:ExitGames.Net.Sockets.PooledSender.SendErrorEventArgs.payload">
            <summary>
            The payload.
            </summary>
        </member>
        <member name="M:ExitGames.Net.Sockets.PooledSender.SendErrorEventArgs.#ctor(System.Exception,System.Collections.Generic.IList{System.ArraySegment{System.Byte}})">
            <summary>
            Initializes a new instance of the <see cref="T:ExitGames.Net.Sockets.PooledSender.SendErrorEventArgs"/> class.
            </summary>
            <param name="exception">The exception.</param>
            <param name="payload">The payload.</param>
        </member>
        <member name="P:ExitGames.Net.Sockets.PooledSender.SendErrorEventArgs.Exception">
            <summary>
            Gets the unhandled exception.
            </summary>
            <value>
            The excepton.
            </value>
        </member>
        <member name="P:ExitGames.Net.Sockets.PooledSender.SendErrorEventArgs.Payload">
            <summary>
            Gets the payload that could not be sent due to the exception.
            </summary>
            <value>
            The payload.
            </value>
        </member>
        <member name="T:ExitGames.Net.Sockets.PooledSender.SendBatchedExecutor">
            <summary>
            The send batched executor.
            </summary>
        </member>
        <member name="F:ExitGames.Net.Sockets.PooledSender.SendBatchedExecutor.sender">
            <summary>
            The sender.
            </summary>
        </member>
        <member name="M:ExitGames.Net.Sockets.PooledSender.SendBatchedExecutor.#ctor(ExitGames.Net.Sockets.PooledSender)">
            <summary>
            Initializes a new instance of the <see cref="T:ExitGames.Net.Sockets.PooledSender.SendBatchedExecutor"/> class.
            </summary>
            <param name="sender">
            The sender.
            </param>
        </member>
        <member name="M:ExitGames.Net.Sockets.PooledSender.SendBatchedExecutor.Execute(System.Collections.Generic.List{System.Action})">
            <summary>
            Executes the actions and send the batch if full.
            </summary>
            <param name="actions">The actions.</param>
        </member>
        <member name="M:ExitGames.Net.Sockets.PooledSender.SendBatchedExecutor.Execute(System.Action)">
            <summary>
            Executes one action and sends the batch if full.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="T:ExitGames.Net.IPAddressCollection">
            <summary>
              The IP address collection.
            </summary>
        </member>
        <member name="M:ExitGames.Net.IPAddressCollection.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:ExitGames.Net.IPAddressCollection"/> class.
            </summary>
        </member>
        <member name="M:ExitGames.Net.IPAddressCollection.#ctor(System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:ExitGames.Net.IPAddressCollection"/> class.
            </summary>
            <param name="capacity">
              The capacity.
            </param>
        </member>
        <member name="M:ExitGames.Net.IPAddressCollection.#ctor(System.Collections.Generic.IEnumerable{System.Net.IPAddress})">
            <summary>
              Initializes a new instance of the <see cref="T:ExitGames.Net.IPAddressCollection"/> class.
            </summary>
            <param name="collection">
              The collection.
            </param>
        </member>
        <member name="M:ExitGames.Net.IPAddressCollection.Add(System.String)">
            <summary>
              Add a new IP address.
            </summary>
            <param name = "addressToAdd">
              The IP address to add.
            </param>
        </member>
        <member name="M:ExitGames.Net.IPAddressCollection.Contains(System.String)">
            <summary>
              Checks whether the collection contains an IP address.
            </summary>
            <param name = "addressToCheck">
              The addressToCheck.
            </param>
            <returns>
              The contains.
            </returns>
        </member>
        <member name="M:ExitGames.Net.IPAddressCollection.Remove(System.String)">
            <summary>
              Removes an ip address.
            </summary>
            <param name = "addressToRemove">
              The address.
            </param>
            <returns>
              The remove.
            </returns>
        </member>
        <member name="T:ExitGames.Net.Sockets.SocketAcceptEventArgs">
            <summary>
            The socket accept event args.
            Used by the <see cref="T:ExitGames.Net.Sockets.Pgm.PgmReceiver"/>.
            </summary>
        </member>
        <member name="F:ExitGames.Net.Sockets.SocketAcceptEventArgs.remoteEndpoint">
            <summary>
            The remote endpoint.
            </summary>
        </member>
        <member name="M:ExitGames.Net.Sockets.SocketAcceptEventArgs.#ctor(System.Net.EndPoint)">
            <summary>
            Initializes a new instance of the <see cref="T:ExitGames.Net.Sockets.SocketAcceptEventArgs"/> class.
            </summary>
            <param name="remoteEndpoint">
            The remote endpoint.
            </param>
        </member>
        <member name="M:ExitGames.Net.Sockets.SocketAcceptEventArgs.#ctor(System.Net.EndPoint,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ExitGames.Net.Sockets.SocketAcceptEventArgs"/> class with the <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> property set to the given value.
            </summary>
            <param name="remoteEndpoint">
            The remote endpoint.
            </param>
            <param name="cancel">
            True to cancel the event; otherwise, false.
            </param>
        </member>
        <member name="P:ExitGames.Net.Sockets.SocketAcceptEventArgs.RemoteEndpoint">
            <summary>
            Gets the remote end point.
            </summary>
            <value>
            The <see cref="T:System.Net.EndPoint"/> with which the Socket is communicating.
            </value>
        </member>
        <member name="T:ExitGames.Net.Sockets.SocketDisconnectEventArgs">
            <summary>
            The socket disconnect event args.
            Used by the <see cref="T:ExitGames.Net.Sockets.Pgm.PgmReceiver"/>.
            </summary>
        </member>
        <member name="F:ExitGames.Net.Sockets.SocketDisconnectEventArgs.endPoint">
            <summary>
            The remote end point.
            </summary>
        </member>
        <member name="F:ExitGames.Net.Sockets.SocketDisconnectEventArgs.socketError">
            <summary>
            The socket error.
            </summary>
        </member>
        <member name="M:ExitGames.Net.Sockets.SocketDisconnectEventArgs.#ctor(System.Net.EndPoint,System.Net.Sockets.SocketError)">
            <summary>
            Initializes a new instance of the <see cref="T:ExitGames.Net.Sockets.SocketDisconnectEventArgs"/> class.
            </summary>
            <param name="endPoint">
            The end point.
            </param>
            <param name="socketError">
            The socket error.
            </param>
        </member>
        <member name="P:ExitGames.Net.Sockets.SocketDisconnectEventArgs.RemoteEndPoint">
            <summary>
            Gets the remote endpoint.
            </summary>
            <value>
            The <see cref="T:System.Net.EndPoint"/> from which the Socket disconnected.
            </value>
        </member>
        <member name="P:ExitGames.Net.Sockets.SocketDisconnectEventArgs.SocketError">
            <summary>
            Gets the socket error.
            </summary>
            <value>
            The error that caused the disconnect.
            </value>
        </member>
        <member name="T:ExitGames.Net.Sockets.SocketHelper">
            <summary>
            Internal helper methods.
            </summary>
        </member>
        <member name="M:ExitGames.Net.Sockets.SocketHelper.FormatSocketException(System.Net.Sockets.SocketException)">
            <summary>
            Formats the socket exception.
            </summary>
            <param name="ex">
            The ex.
            </param>
            <returns>
            The format socket exception.
            </returns>
        </member>
        <member name="T:ExitGames.Net.Sockets.Pgm.PgmSenderPool">
            <summary>
              A pool of <see cref="T:ExitGames.Net.Sockets.Pgm.PgmSender"/>s.
            </summary>
        </member>
        <member name="F:ExitGames.Net.Sockets.Pgm.PgmSenderPool.log">
            <summary>
              The logger.
            </summary>
        </member>
        <member name="F:ExitGames.Net.Sockets.Pgm.PgmSenderPool.address">
            <summary>
              The multicast address.
            </summary>
        </member>
        <member name="F:ExitGames.Net.Sockets.Pgm.PgmSenderPool.bindInterface">
            <summary>
              The interface to bind to.
            </summary>
        </member>
        <member name="F:ExitGames.Net.Sockets.Pgm.PgmSenderPool.port">
            <summary>
              The multicast port.
            </summary>
        </member>
        <member name="F:ExitGames.Net.Sockets.Pgm.PgmSenderPool.queue">
            <summary>
              The pool of <see cref="T:ExitGames.Net.Sockets.Pgm.PgmSender"/> instances.
            </summary>
        </member>
        <member name="F:ExitGames.Net.Sockets.Pgm.PgmSenderPool.queueSize">
            <summary>
              The <see cref="T:ExitGames.Net.Sockets.Pgm.PgmSender"/> pool size.
            </summary>
        </member>
        <member name="M:ExitGames.Net.Sockets.Pgm.PgmSenderPool.#ctor(System.String,System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:ExitGames.Net.Sockets.Pgm.PgmSenderPool"/> class.
            </summary>
            <param name="address">
              The address.
            </param>
            <param name="port">
              The port.
            </param>
            <param name="bindInterface">
              The bind interface.
            </param>
            <param name="queueSize">
              The queue size.
            </param>
            <param name="lockTimeout">
              The lock timeout.
            </param>
        </member>
        <member name="M:ExitGames.Net.Sockets.Pgm.PgmSenderPool.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:ExitGames.Net.Sockets.Pgm.PgmSenderPool"/> class. 
            </summary>
        </member>
        <member name="M:ExitGames.Net.Sockets.Pgm.PgmSenderPool.Send(System.Byte[])">
            <summary>
              Sends a byte array asynchronously.
            </summary>
            <param name = "data">
              The payload.
            </param>
        </member>
        <member name="M:ExitGames.Net.Sockets.Pgm.PgmSenderPool.Dispose">
            <summary>
            Disposes all used <see cref="T:ExitGames.Net.Sockets.Pgm.PgmSender"/> instances.
            </summary>
        </member>
        <member name="M:ExitGames.Net.Sockets.Pgm.PgmSenderPool.Dispose(System.Boolean)">
            <summary>
            Disposes all used <see cref="T:ExitGames.Net.Sockets.Pgm.PgmSender"/> instances.
            </summary>
            <param name="disposing">
            True if called from <see cref="M:ExitGames.Net.Sockets.Pgm.PgmSenderPool.Dispose"/>.
            </param>
        </member>
        <member name="M:ExitGames.Net.Sockets.Pgm.PgmSenderPool.Initialize">
            <summary>
              Creates the <see cref="T:ExitGames.Net.Sockets.Pgm.PgmSender"/> instances.
            </summary>
        </member>
        <member name="P:ExitGames.Net.Sockets.Pgm.PgmSenderPool.Address">
            <summary>
              Gets Address.
            </summary>
        </member>
        <member name="P:ExitGames.Net.Sockets.Pgm.PgmSenderPool.BindInterface">
            <summary>
              Gets BindInterface.
            </summary>
        </member>
        <member name="P:ExitGames.Net.Sockets.Pgm.PgmSenderPool.Port">
            <summary>
              Gets Port.
            </summary>
        </member>
        <member name="P:ExitGames.Net.Sockets.Pgm.PgmSenderPool.QueueSize">
            <summary>
              Gets QueueSize.
            </summary>
        </member>
        <member name="T:ExitGames.Net.Sockets.Pgm.PgmListener">
            <summary>
              The PGM listener receives PGM messages from one or more network interfaces.
              This class is used internally by the <see cref="T:ExitGames.Net.Sockets.Pgm.PgmReceiver"/>.
            </summary>
        </member>
        <member name="F:ExitGames.Net.Sockets.Pgm.PgmListener.log">
            <summary>
              The logger.
            </summary>
        </member>
        <member name="F:ExitGames.Net.Sockets.Pgm.PgmListener.localEndPoint">
            <summary>
              The local end point.
            </summary>
        </member>
        <member name="F:ExitGames.Net.Sockets.Pgm.PgmListener.lock">
            <summary>
              A lock sync root.
            </summary>
        </member>
        <member name="F:ExitGames.Net.Sockets.Pgm.PgmListener.receiveInterfaces">
            <summary>
              The receive interfaces.
            </summary>
        </member>
        <member name="F:ExitGames.Net.Sockets.Pgm.PgmListener.receiveBufferSize">
            <summary>
              The receive buffer size.
            </summary>
        </member>
        <member name="F:ExitGames.Net.Sockets.Pgm.PgmListener.reuseAddress">
            <summary>
              Indicates whether to reuse the local address.
            </summary>
        </member>
        <member name="F:ExitGames.Net.Sockets.Pgm.PgmListener.running">
            <summary>
              Indicates wheter the instance is listening.
            </summary>
        </member>
        <member name="F:ExitGames.Net.Sockets.Pgm.PgmListener.socket">
            <summary>
              The used socket.
            </summary>
        </member>
        <member name="F:ExitGames.Net.Sockets.Pgm.PgmListener.socketAsyncEventArgs">
            <summary>
              The used socket async event args.
            </summary>
        </member>
        <member name="F:ExitGames.Net.Sockets.Pgm.PgmListener.useHighSpeedIntranet">
            <summary>
              Indicates whether to use high speed intranet.
            </summary>
        </member>
        <member name="M:ExitGames.Net.Sockets.Pgm.PgmListener.#ctor(System.Net.IPEndPoint)">
            <summary>
              Initializes a new instance of the <see cref="T:ExitGames.Net.Sockets.Pgm.PgmListener"/> class.
            </summary>
            <param name="endPoint">
              The multicast end point.
            </param>
        </member>
        <member name="M:ExitGames.Net.Sockets.Pgm.PgmListener.#ctor(System.Net.IPAddress,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:ExitGames.Net.Sockets.Pgm.PgmListener"/> class.
            </summary>
            <param name="address">
              The multicast address.
            </param>
            <param name="port">
              The port.
            </param>
        </member>
        <member name="M:ExitGames.Net.Sockets.Pgm.PgmListener.#ctor(System.String,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:ExitGames.Net.Sockets.Pgm.PgmListener"/> class.
            </summary>
            <param name="address">
              The multicast address.
            </param>
            <param name="port">
              The port.
            </param>
        </member>
        <member name="M:ExitGames.Net.Sockets.Pgm.PgmListener.Finalize">
            <summary>
              Finalizes an instance of the <see cref="T:ExitGames.Net.Sockets.Pgm.PgmListener"/> class.
            </summary>
        </member>
        <member name="M:ExitGames.Net.Sockets.Pgm.PgmListener.Start">
            <summary>
              Starts the listening.
            </summary>
            <exception cref="T:System.InvalidOperationException">
              Already running.
            </exception>
            <exception cref="T:System.Net.Sockets.SocketException">
              Exception from the underlying <see cref="T:System.Net.Sockets.Socket"/>.
            </exception>
        </member>
        <member name="M:ExitGames.Net.Sockets.Pgm.PgmListener.Stop">
            <summary>
              Stops the listening and closes the socket.
            </summary>
        </member>
        <member name="M:ExitGames.Net.Sockets.Pgm.PgmListener.Dispose">
            <summary>
              Disposes the listener.
            </summary>
        </member>
        <member name="M:ExitGames.Net.Sockets.Pgm.PgmListener.BeginAccept">
            <summary>
              Begins an asynchronous operation to accept an incoming connection attempt.
            </summary>
        </member>
        <member name="M:ExitGames.Net.Sockets.Pgm.PgmListener.Dispose(System.Boolean)">
            <summary>
              Disposes the listener.
            </summary>
            <param name = "disposing">
              The disposing.
            </param>
        </member>
        <member name="M:ExitGames.Net.Sockets.Pgm.PgmListener.OnAcceptAsyncCompleted(System.Object,System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
              Accept async completed event callback.
            </summary>
            <param name = "sender">
              The sender.
            </param>
            <param name = "e">
              The event args.
            </param>
        </member>
        <member name="M:ExitGames.Net.Sockets.Pgm.PgmListener.OnAcceptCompleted(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
              Accept completed event callback.
            </summary>
            <param name = "e">
              The event args.
            </param>
            <returns>
              True if socket is still open.
            </returns>
        </member>
        <member name="M:ExitGames.Net.Sockets.Pgm.PgmListener.OnAcceptSocket(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
              Accept socket event callback.
            </summary>
            <param name = "e">
              The event args.
            </param>
        </member>
        <member name="E:ExitGames.Net.Sockets.Pgm.PgmListener.AcceptSocket">
            <summary>
              The accept socket event.
            </summary>
        </member>
        <member name="P:ExitGames.Net.Sockets.Pgm.PgmListener.IsRunning">
            <summary>
              Gets a value indicating whether the listener is running.
            </summary>
            <value>True if listening, otherwise false.</value>
        </member>
        <member name="P:ExitGames.Net.Sockets.Pgm.PgmListener.LocalEndPoint">
            <summary>
              Gets an <see cref="T:System.Net.IPEndPoint"/> that contains the local IP address 
              and port number on which the <see cref="T:ExitGames.Net.Sockets.Pgm.PgmListener"/> will listen 
              for new connections.
            </summary>
            <value>
              The local <see cref="T:System.Net.IPEndPoint"/>.
            </value>
        </member>
        <member name="P:ExitGames.Net.Sockets.Pgm.PgmListener.ReceiveBufferSize">
            <summary>
              Gets or sets the size in bytes of the receive buffer of the <see cref="T:System.Net.Sockets.Socket"/>.
            </summary>
            <value>
              The default value is 128 KB.
            </value>
        </member>
        <member name="P:ExitGames.Net.Sockets.Pgm.PgmListener.ReceiveInterfaces">
            <summary>
              Gets the list of interfaces that the instance receives messages from.
              If no interface is specified the first local interface enumerated is used.
            </summary>
            <value>
              An <see cref="T:ExitGames.Net.IPAddressCollection"/> that contains the IPs of all listening interfaces.
            </value>
        </member>
        <member name="P:ExitGames.Net.Sockets.Pgm.PgmListener.ReuseAddress">
            <summary>
              Gets or sets a value indicating whether the receiver socket is allowed to be bound to an address that is already in use.
            </summary>
            <value>
              Default is true.
            </value>
        </member>
        <member name="P:ExitGames.Net.Sockets.Pgm.PgmListener.UseHighSpeedIntranet">
            <summary>
              Gets or sets a value indicating whether a high bandwidth LAN (100Mbps+) connection is used.
            </summary>
            <value>
              Default is true.
            </value>
        </member>
        <member name="T:ExitGames.Net.Sockets.Pgm.PgmReceiver">
            <summary>
              This PGM receiver is a <see cref="T:ExitGames.Net.Sockets.ISocketReceiver"/> implementation that wraps a <see cref="T:ExitGames.Net.Sockets.Pgm.PgmListener"/>.
            </summary>
        </member>
        <member name="F:ExitGames.Net.Sockets.Pgm.PgmReceiver.log">
            <summary>
              The logger.
            </summary>
        </member>
        <member name="F:ExitGames.Net.Sockets.Pgm.PgmReceiver.disposeLock">
            <summary>
              The sync root for dispose.
            </summary>
        </member>
        <member name="F:ExitGames.Net.Sockets.Pgm.PgmReceiver.readerDictionary">
            <summary>
              A dictionary for <see cref="T:ExitGames.Net.Sockets.Pgm.PgmReceiver.AsyncPgmSocketReceiver"/> instances.
            </summary>
        </member>
        <member name="F:ExitGames.Net.Sockets.Pgm.PgmReceiver.bytesReceived">
            <summary>
              The number of bytes received.
            </summary>
        </member>
        <member name="F:ExitGames.Net.Sockets.Pgm.PgmReceiver.listener">
            <summary>
              The <see cref="T:ExitGames.Net.Sockets.Pgm.PgmListener"/>.
            </summary>
        </member>
        <member name="F:ExitGames.Net.Sockets.Pgm.PgmReceiver.readBufferSize">
            <summary>
              The read buffer size.
            </summary>
        </member>
        <member name="F:ExitGames.Net.Sockets.Pgm.PgmReceiver.receiveBufferSize">
            <summary>
              The receive buffer size.
            </summary>
        </member>
        <member name="M:ExitGames.Net.Sockets.Pgm.PgmReceiver.#ctor(System.Net.IPEndPoint)">
            <summary>
              Initializes a new instance of the <see cref="T:ExitGames.Net.Sockets.Pgm.PgmReceiver"/> class.
            </summary>
            <param name="endPoint">
              The multicast end point.
            </param>
        </member>
        <member name="M:ExitGames.Net.Sockets.Pgm.PgmReceiver.#ctor(System.Net.IPAddress,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:ExitGames.Net.Sockets.Pgm.PgmReceiver"/> class.
            </summary>
            <param name="address">
              The multicast address.
            </param>
            <param name="port">
              The port.
            </param>
        </member>
        <member name="M:ExitGames.Net.Sockets.Pgm.PgmReceiver.#ctor(System.String,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:ExitGames.Net.Sockets.Pgm.PgmReceiver"/> class.
            </summary>
            <param name="address">
              The multicast address.
            </param>
            <param name="port">
              The port.
            </param>
        </member>
        <member name="M:ExitGames.Net.Sockets.Pgm.PgmReceiver.Finalize">
            <summary>
              Finalizes an instance of the <see cref="T:ExitGames.Net.Sockets.Pgm.PgmReceiver"/> class.
            </summary>
        </member>
        <member name="M:ExitGames.Net.Sockets.Pgm.PgmReceiver.Start">
            <summary>
              Starts the underlying <see cref="T:ExitGames.Net.Sockets.Pgm.PgmListener"/>.
            </summary>
        </member>
        <member name="M:ExitGames.Net.Sockets.Pgm.PgmReceiver.Dispose">
            <summary>
              Disposes the <see cref="T:ExitGames.Net.Sockets.Pgm.PgmReceiver"/>.
            </summary>
        </member>
        <member name="M:ExitGames.Net.Sockets.Pgm.PgmReceiver.Dispose(System.Boolean)">
            <summary>
              Disposes this instance.
            </summary>
            <param name = "disposing">
              The disposing.
            </param>
        </member>
        <member name="M:ExitGames.Net.Sockets.Pgm.PgmReceiver.OnAccept(System.Net.EndPoint,System.Boolean)">
            <summary>
              Invokes the <see cref="E:ExitGames.Net.Sockets.Pgm.PgmReceiver.Accept"/> event.
            </summary>
            <param name="remoteEndpoint">
              The remote end point.
            </param>
            <param name="cancel">
              Default return value if no event handler is assigned to <see cref="E:ExitGames.Net.Sockets.Pgm.PgmReceiver.Accept"/>.
            </param>
            <returns>
              True if canceled.
            </returns>
        </member>
        <member name="M:ExitGames.Net.Sockets.Pgm.PgmReceiver.OnDisconnected(System.Net.EndPoint,System.Net.Sockets.SocketError)">
            <summary>
              Invokes the <see cref="E:ExitGames.Net.Sockets.Pgm.PgmReceiver.Disconnected"/> event.
            </summary>
            <param name="remoteEndpoint">
              The remote endpoint.
            </param>
            <param name="socketError">
              The socket error.
            </param>
        </member>
        <member name="M:ExitGames.Net.Sockets.Pgm.PgmReceiver.OnReaderReceive(ExitGames.Net.Sockets.AsyncSocketReceiver,System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
              Called when an <see cref="T:ExitGames.Net.Sockets.AsyncSocketReceiver"/> receives a message.
            </summary>
            <param name="reader">
              The <see cref="T:ExitGames.Net.Sockets.AsyncSocketReceiver"/>.
            </param>
            <param name="e">
              The event args.
            </param>
        </member>
        <member name="M:ExitGames.Net.Sockets.Pgm.PgmReceiver.OnReceive(System.Net.EndPoint,System.Byte[],System.Int32,System.Int32)">
            <summary>
              The invoke receive.
            </summary>
            <param name = "remoteEndpoint">
              The remote endpoint.
            </param>
            <param name = "buffer">
              The buffer.
            </param>
            <param name = "offset">
              The offset.
            </param>
            <param name = "bytesTransferred">
              The bytes transferred.
            </param>
        </member>
        <member name="M:ExitGames.Net.Sockets.Pgm.PgmReceiver.PgmListener_OnAcceptSocket(System.Object,System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
              The <see cref="E:ExitGames.Net.Sockets.Pgm.PgmListener.AcceptSocket"/> event listener.
            </summary>
            <param name="sender">
              The sender.
            </param>
            <param name="e">
              The event args.
            </param>
        </member>
        <member name="M:ExitGames.Net.Sockets.Pgm.PgmReceiver.RemoveSocketReceiver(ExitGames.Net.Sockets.AsyncSocketReceiver)">
            <summary>
              Removes an <see cref="T:ExitGames.Net.Sockets.AsyncSocketReceiver"/>.
            </summary>
            <param name="socketReceiver">
              The <see cref="T:ExitGames.Net.Sockets.AsyncSocketReceiver"/>.
            </param>
        </member>
        <member name="E:ExitGames.Net.Sockets.Pgm.PgmReceiver.Accept">
            <summary>
              Event for new PGM connections.
            </summary>
        </member>
        <member name="E:ExitGames.Net.Sockets.Pgm.PgmReceiver.Disconnected">
            <summary>
              Event for disconnected PGM connections.
            </summary>
        </member>
        <member name="E:ExitGames.Net.Sockets.Pgm.PgmReceiver.Receive">
            <summary>
              Event for received PGM messages.
            </summary>
        </member>
        <member name="P:ExitGames.Net.Sockets.Pgm.PgmReceiver.EndPoint">
            <summary>
              Gets the multicast end point.
            </summary>
            <value>
              The end point.
            </value>
        </member>
        <member name="P:ExitGames.Net.Sockets.Pgm.PgmReceiver.IsRunning">
            <summary>
              Gets a value indicating whether the receiver is running.
            </summary>
            <value>
              True if listening.
            </value>
        </member>
        <member name="P:ExitGames.Net.Sockets.Pgm.PgmReceiver.ReadBufferSize">
            <summary>
              Gets or sets the read buffer size.
            </summary>
            <value>
              The buffer size for incoming messages.
            </value>
        </member>
        <member name="P:ExitGames.Net.Sockets.Pgm.PgmReceiver.ReceiveBufferSize">
            <summary>
              Gets or sets the size in bytes of the receive buffer of the <see cref="T:System.Net.Sockets.Socket"/>.
            </summary>
            <value>
              The receive buffer size of the <see cref="T:System.Net.Sockets.Socket"/>. 
            </value>
        </member>
        <member name="P:ExitGames.Net.Sockets.Pgm.PgmReceiver.ReceiveInterfaces">
            <summary>
              Gets the list of interfaces that the instance receives messages from.
              If no interface is specified the first local interface enumerated is used.
            </summary>
            <value>
              An <see cref="T:ExitGames.Net.IPAddressCollection"/> that contains the IPs of all listening interfaces.
            </value>
        </member>
        <member name="P:ExitGames.Net.Sockets.Pgm.PgmReceiver.ReuseAddress">
            <summary>
              Gets or sets a value indicating whether the receiver socket is allowed to be bound to an address that is already in use.
            </summary>
            <value>
              Default is true.
            </value>
        </member>
        <member name="P:ExitGames.Net.Sockets.Pgm.PgmReceiver.TotalBytesReceived">
            <summary>
              Gets or sets the total number of received bytes.
            </summary>
            <value>
              The total number of received bytes.
            </value>
        </member>
        <member name="P:ExitGames.Net.Sockets.Pgm.PgmReceiver.UseHighSpeedIntranet">
            <summary>
              Gets or sets a value indicating whether a high bandwidth LAN (100Mbps+) connection is used.
            </summary>
            <value>
              Default is true.
            </value>
        </member>
        <member name="T:ExitGames.Net.Sockets.Pgm.PgmReceiver.AsyncPgmSocketReceiver">
            <summary>
              The async pgm socket receiver receives messages from another host.
            </summary>
        </member>
        <member name="T:ExitGames.Net.Sockets.AsyncSocketReceiver">
            <summary>
            The <see cref="T:ExitGames.Net.Sockets.AsyncSocketReceiver"/> receives data from a socket using the asynchronous programming model including IO completion ports.
            </summary>
        </member>
        <member name="F:ExitGames.Net.Sockets.AsyncSocketReceiver.receiveAction">
            <summary>
            The receive action.
            </summary>
        </member>
        <member name="F:ExitGames.Net.Sockets.AsyncSocketReceiver.log">
            <summary>
            The logger.
            </summary>
        </member>
        <member name="F:ExitGames.Net.Sockets.AsyncSocketReceiver.buffer">
            <summary>
            The buffer.
            </summary>
        </member>
        <member name="F:ExitGames.Net.Sockets.AsyncSocketReceiver.remoteEndpoint">
            <summary>
            The remote endpoint.
            </summary>
        </member>
        <member name="F:ExitGames.Net.Sockets.AsyncSocketReceiver.socket">
            <summary>
            The socket.
            </summary>
        </member>
        <member name="F:ExitGames.Net.Sockets.AsyncSocketReceiver.socketEventArgs">
            <summary>
            The socket event args.
            </summary>
        </member>
        <member name="M:ExitGames.Net.Sockets.AsyncSocketReceiver.#ctor(System.Net.Sockets.Socket,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ExitGames.Net.Sockets.AsyncSocketReceiver"/> class.
            </summary>
            <param name="socket">
            The socket.
            </param>
            <param name="bufferSize">
            The buffer size.
            </param>
        </member>
        <member name="M:ExitGames.Net.Sockets.AsyncSocketReceiver.BeginReceive">
            <summary>
            Begins an asynchronous request to receive data from the underlying socket.
            </summary>
        </member>
        <member name="M:ExitGames.Net.Sockets.AsyncSocketReceiver.Dispose">
            <summary>
            Disposes the receiver.
            </summary>
        </member>
        <member name="M:ExitGames.Net.Sockets.AsyncSocketReceiver.Dispose(System.Boolean)">
            <summary>
            Disposes the receiver instance.
            </summary>
            <param name="disposing">
            The disposing.
            </param>
        </member>
        <member name="M:ExitGames.Net.Sockets.AsyncSocketReceiver.OnReceiveCompleted(System.Object,System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            Abstract method that is called when the socket has received new data.
            </summary>
            <param name="sender">
            The sender is a <see cref="T:System.Net.Sockets.Socket"/> instance.
            </param>
            <param name="e">
            The <see cref="T:System.Net.Sockets.SocketAsyncEventArgs"/>.
            </param>
        </member>
        <member name="M:ExitGames.Net.Sockets.AsyncSocketReceiver.OnReceiveCompletedCallback(System.IAsyncResult)">
            <summary>
            The receive completed callback.
            </summary>
            <param name="ar">
            The ar.
            </param>
        </member>
        <member name="P:ExitGames.Net.Sockets.AsyncSocketReceiver.BufferSize">
            <summary>
            Gets the size, in bytes, of the buffer for incoming data.
            </summary>
            <value>
            The size of the buffer.
            </value>
        </member>
        <member name="P:ExitGames.Net.Sockets.AsyncSocketReceiver.RemoteEndpoint">
            <summary>
            Gets the remote endpoint of the underlying socket.
            </summary>
            <value>
            The remote IP and port.
            </value>
        </member>
        <member name="F:ExitGames.Net.Sockets.Pgm.PgmReceiver.AsyncPgmSocketReceiver.pgmReceiver">
            <summary>
              The parent.
            </summary>
        </member>
        <member name="M:ExitGames.Net.Sockets.Pgm.PgmReceiver.AsyncPgmSocketReceiver.#ctor(ExitGames.Net.Sockets.Pgm.PgmReceiver,System.Net.Sockets.Socket,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:ExitGames.Net.Sockets.Pgm.PgmReceiver.AsyncPgmSocketReceiver"/> class.
            </summary>
            <param name="pgmReceiver">
              The parent pgm receiver.
            </param>
            <param name="socket">
              The socket.
            </param>
            <param name="bufferSize">
              The buffer size.
            </param>
        </member>
        <member name="M:ExitGames.Net.Sockets.Pgm.PgmReceiver.AsyncPgmSocketReceiver.Dispose(System.Boolean)">
            <summary>
              Disposes the receiver.
            </summary>
            <param name = "disposing">
              The disposing.
            </param>
        </member>
        <member name="M:ExitGames.Net.Sockets.Pgm.PgmReceiver.AsyncPgmSocketReceiver.OnReceiveCompleted(System.Object,System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
              The <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed"/> event handler.
            </summary>
            <param name="sender">
              The sender.
            </param>
            <param name="e">
              The event args.
            </param>
        </member>
        <member name="T:ExitGames.Net.Sockets.Pgm.PgmSender">
            <summary>
              Provides methods to send data using the Pragmatic General Multicast (PGM) protocol.
            </summary>
        </member>
        <member name="F:ExitGames.Net.Sockets.Pgm.PgmSender.DefaultRateKbitsPerSec">
            <summary>
              The default rate kbits per sec.
            </summary>
            <value>
              100 Mbit
            </value>
        </member>
        <member name="F:ExitGames.Net.Sockets.Pgm.PgmSender.DefaultWindowSizeInBytes">
            <summary>
              The default window size in bytes.
            </summary>
            <value>
              5 seconds
            </value>
        </member>
        <member name="F:ExitGames.Net.Sockets.Pgm.PgmSender.DefaultWindowSizeInMSecs">
            <summary>
              The default window size in m secs.
            </summary>
        </member>
        <member name="F:ExitGames.Net.Sockets.Pgm.PgmSender.log">
            <summary>
              Used to log messages to the logging framework.
            </summary>
        </member>
        <member name="F:ExitGames.Net.Sockets.Pgm.PgmSender.syncRoot">
            <summary>
              Object used for synchronization.
            </summary>
        </member>
        <member name="F:ExitGames.Net.Sockets.Pgm.PgmSender.endPoint">
            <summary>
              The multicast address.
            </summary>
        </member>
        <member name="F:ExitGames.Net.Sockets.Pgm.PgmSender.bytesSent">
            <summary>
              The number of bytes sent by this instance.
            </summary>
        </member>
        <member name="F:ExitGames.Net.Sockets.Pgm.PgmSender.socket">
            <summary>
              The used <see cref="T:ExitGames.Net.Sockets.Pgm.PgmSocket"/>.
            </summary>
        </member>
        <member name="M:ExitGames.Net.Sockets.Pgm.PgmSender.#cctor">
            <summary>
              Initializes static members of the <see cref="T:ExitGames.Net.Sockets.Pgm.PgmSender"/> class.
            </summary>
        </member>
        <member name="M:ExitGames.Net.Sockets.Pgm.PgmSender.#ctor(System.Net.IPEndPoint)">
            <summary>
              Initializes a new instance of the <see cref="T:ExitGames.Net.Sockets.Pgm.PgmSender"/> class.
            </summary>
            <param name="endPoint">
              The end point.
            </param>
        </member>
        <member name="M:ExitGames.Net.Sockets.Pgm.PgmSender.#ctor(System.Net.IPAddress,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:ExitGames.Net.Sockets.Pgm.PgmSender"/> class.
            </summary>
            <param name="address">
              The ip address to which the underling socket will be connected.
            </param>
            <param name="port">
              The port to which the underling socket will be connected.
            </param>
        </member>
        <member name="M:ExitGames.Net.Sockets.Pgm.PgmSender.#ctor(System.String,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:ExitGames.Net.Sockets.Pgm.PgmSender"/> class.
            </summary>
            <param name="address">
              The ip address to which the underling socket will be connected.
            </param>
            <param name="port">
              The port to which the underling socket will be connected.
            </param>
        </member>
        <member name="M:ExitGames.Net.Sockets.Pgm.PgmSender.Finalize">
            <summary>
              Finalizes an instance of the <see cref="T:ExitGames.Net.Sockets.Pgm.PgmSender"/> class.
            </summary>
        </member>
        <member name="M:ExitGames.Net.Sockets.Pgm.PgmSender.Close">
            <summary>
              Closes the <see cref="T:System.Net.Sockets.Socket"/>.
            </summary>
        </member>
        <member name="M:ExitGames.Net.Sockets.Pgm.PgmSender.Connect">
            <summary>
              Connects the <see cref="T:ExitGames.Net.Sockets.Pgm.PgmSender"/> socket.
            </summary>
            <exception cref="T:System.Net.Sockets.SocketException">
              Exception thrown by the underlying <see cref="T:System.Net.Sockets.Socket"/>.
            </exception>
        </member>
        <member name="M:ExitGames.Net.Sockets.Pgm.PgmSender.Connect(System.String)">
            <summary>
              Connects the <see cref="T:ExitGames.Net.Sockets.Pgm.PgmSender"/> socket.
            </summary>
            <param name="sendInterface">
              The send Interface.
            </param>
            <exception cref="T:System.Net.Sockets.SocketException">
              Exception thrown by the underlying <see cref="T:System.Net.Sockets.Socket"/>.
            </exception>
        </member>
        <member name="M:ExitGames.Net.Sockets.Pgm.PgmSender.Connect(System.String,System.Nullable{System.Int32},System.Nullable{ExitGames.Net.Sockets.Pgm.PgmSendWindowSize})">
            <summary>
              Connects the <see cref="T:ExitGames.Net.Sockets.Pgm.PgmSender"/> socket.
              Any pre-existing connection is closed.
            </summary>
            <param name="sendInterface">
              The send Interface.
            </param>
            <param name="sendBufferSize">
              The send Buffer Size.
            </param>
            <param name="windowSize">
              The window Size.
            </param>
            <exception cref="T:System.Net.Sockets.SocketException">
              Exception thrown by the underlying <see cref="T:System.Net.Sockets.Socket"/>.
            </exception>
        </member>
        <member name="M:ExitGames.Net.Sockets.Pgm.PgmSender.Dispose">
            <summary>
              Releases the resources used by the <see cref="T:ExitGames.Net.Sockets.Pgm.PgmSender"/>.
            </summary>
        </member>
        <member name="M:ExitGames.Net.Sockets.Pgm.PgmSender.Send(System.Byte[])">
            <summary>
              Sends data to a connected Socket.
            </summary>
            <param name = "data">
              An array of type Byte that contains the data to be sent. 
            </param>
        </member>
        <member name="M:ExitGames.Net.Sockets.Pgm.PgmSender.Send(System.Byte[],System.Int32,System.Int32)">
            <summary>
              Sends data to a connected Socket.
            </summary>
            <param name = "data">
              An array of type Byte that contains the data to be sent. 
            </param>
            <param name = "offset">
              The position in the data buffer at which to begin sending data.
            </param>
            <param name = "length">
              The number of bytes to send.
            </param>
        </member>
        <member name="M:ExitGames.Net.Sockets.Pgm.PgmSender.Send(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})">
            <summary>
              Sends a set of buffers in the list to a connected Socket.
            </summary>
            <param name = "data">
              A list of ArraySegments of type Byte that contains the data to be sent.
            </param>
        </member>
        <member name="M:ExitGames.Net.Sockets.Pgm.PgmSender.Dispose(System.Boolean)">
            <summary>
              Releases the unmanaged resources used by the <see cref="T:ExitGames.Net.Sockets.Pgm.PgmSender"/>
              and optionally releases the managed resources.
            </summary>
            <param name="disposing">
              Indicates if a dispose is in progress.
            </param>
            <remarks>
              Dispose(bool disposing) executes in two distinct scenarios.
              If disposing equals true, the method has been called directly
              or indirectly by a user's code. Managed and unmanaged resources
              can be disposed.
              If disposing equals false, the method has been called by the
              runtime from inside the finalizer and you should not reference
              other objects. Only unmanaged resources can be disposed.
            </remarks>
        </member>
        <member name="P:ExitGames.Net.Sockets.Pgm.PgmSender.Connected">
            <summary>
            Gets a value indicating whether the <see cref="T:ExitGames.Net.Sockets.ISocketSender"/> is connected 
            to a remote host as of the last Send operation.
            </summary>
        </member>
        <member name="P:ExitGames.Net.Sockets.Pgm.PgmSender.EndPoint">
            <summary>
              Gets the multicast end point.
            </summary>
            <value>
              The multicast end point.
            </value>
        </member>
        <member name="P:ExitGames.Net.Sockets.Pgm.PgmSender.TotalBytesSent">
            <summary>
              Gets or sets the total number of sent bytes.
            </summary>
            <value>
              The total number of sent bytes.
            </value>
        </member>
        <member name="T:ExitGames.Net.Sockets.Pgm.PgmSendWindowSize">
            <summary>
              The RM_SEND_WINDOW structure specifies the Reliable Multicast send window. 
              This structure is used with the RM_RATE_WINDOW_SIZE socket option.
            </summary>
            <remarks>
              Any combination of the three available members may be set for a given socket option call. 
              For example, one, any two, or all three members may be specified during a setsockopt 
              function call. Regardless of settings, Windows enforces the following ratio: 
              TransmissionRate == (WindowSizeBytes/WindowSizeMSecs) * 8. 
              As such, setting any two parameters effectively sets the third to ensure optimum performance. 
              The combination of these members can affect the resources used on a PGM sender's computer. 
              For example, a large transmission rate value combined with a large window size results in 
              more required buffer space.
            </remarks>
        </member>
        <member name="F:ExitGames.Net.Sockets.Pgm.PgmSendWindowSize.sendWindow">
            <summary>
              The send window.
            </summary>
        </member>
        <member name="M:ExitGames.Net.Sockets.Pgm.PgmSendWindowSize.#ctor(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
              Initializes a new instance of the <see cref="T:ExitGames.Net.Sockets.Pgm.PgmSendWindowSize"/> structure.
            </summary>
            <param name="rateKbitsPerSec">
              Transmission rate for the send window, in kilobits per second.
            </param>
            <param name="windowSizeInMSecs">
              The window size for the send window, in milliseconds.
            </param>
            <param name="windowSizeInBytes">
              The window size for the session, in bytes.
            </param>
        </member>
        <member name="M:ExitGames.Net.Sockets.Pgm.PgmSendWindowSize.GetBytes">
            <summary>
              Returns the RM_SEND_WINDOW structure in raw binary format.
            </summary>
            <returns>
              Byte array containing RM_SEND_WINDOW structure in raw binary format.
            </returns>
        </member>
        <member name="P:ExitGames.Net.Sockets.Pgm.PgmSendWindowSize.RateKbitsPerSec">
            <summary>
              Gets or sets the transmission rate for the send window, 
              in kilobits per second.
            </summary>
        </member>
        <member name="P:ExitGames.Net.Sockets.Pgm.PgmSendWindowSize.WindowSizeInBytes">
            <summary>
              Gets or sets the window size for the session, in bytes.
            </summary>
        </member>
        <member name="P:ExitGames.Net.Sockets.Pgm.PgmSendWindowSize.WindowSizeInMSecs">
            <summary>
              Gets or sets the window size for the send window, in milliseconds.
            </summary>
        </member>
        <member name="T:ExitGames.Net.Sockets.Pgm.PgmSocket">
            <summary>
            A socket for PGM.
            </summary>
        </member>
        <member name="F:ExitGames.Net.Sockets.Pgm.PgmSocket.SocketOptionLogFormat">
            <summary>
              Socket option log format.
            </summary>
        </member>
        <member name="F:ExitGames.Net.Sockets.Pgm.PgmSocket.log">
            <summary>
              The logger.
            </summary>
        </member>
        <member name="F:ExitGames.Net.Sockets.Pgm.PgmSocket.socketCounter">
            <summary>
              The socket counter.
            </summary>
        </member>
        <member name="M:ExitGames.Net.Sockets.Pgm.PgmSocket.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:ExitGames.Net.Sockets.Pgm.PgmSocket"/> class. 
            </summary>
        </member>
        <member name="M:ExitGames.Net.Sockets.Pgm.PgmSocket.AddReceiveInterface(System.Net.IPAddress)">
            <summary>
            Receiver only. Adds an interface on which to listen (the default is the first local interface enumerated). 
              The value specified replaces the default interface on the first call for a given socket, and adds other interfaces on subsequent calls. 
              To obtain <see cref="F:System.Net.IPAddress.Any"/> behavior, each network interface must be added separately.
            </summary>
            <param name="interfaceIpAddress">
            IPAdress of the network interface to add.
            </param>
        </member>
        <member name="M:ExitGames.Net.Sockets.Pgm.PgmSocket.AddReceiveInterfaces(System.Collections.Generic.IEnumerable{System.Net.IPAddress})">
            <summary>
            Receiver only. Adds an list of interfaces on which to listen.
            </summary>
            <param name="interfaceIpAddresses">
            IPAdress list of the network interfaces to add.
            </param>
            <seealso cref="M:ExitGames.Net.Sockets.Pgm.PgmSocket.AddReceiveInterface(System.Net.IPAddress)"/>
        </member>
        <member name="M:ExitGames.Net.Sockets.Pgm.PgmSocket.SetHighSpeedIntranetOption(System.Boolean)">
            <summary>
            Receiver only. Specifies whether a high bandwidth LAN (100Mbps+) connection is used.
            </summary>
            <param name="value">
            True enables high speed.
            </param>
        </member>
        <member name="M:ExitGames.Net.Sockets.Pgm.PgmSocket.SetReuseAddress(System.Boolean)">
            <summary>
            Specifies if the socket is allowed to be bound to an address that is already in use.
            </summary>
            <param name="value">
            True to allow multiple sockets on one address.
            </param>
        </member>
        <member name="M:ExitGames.Net.Sockets.Pgm.PgmSocket.SetSendInterface(System.Net.IPAddress)">
            <summary>
            Sender only. Sets the sending interface IP address.
            </summary>
            <param name="interfaceIpAddress">
            IPAdress of the network interface.
            </param>
        </member>
        <member name="M:ExitGames.Net.Sockets.Pgm.PgmSocket.SetSendWindowSize(ExitGames.Net.Sockets.Pgm.PgmSendWindowSize)">
            <summary>
            Sets a new send window size.
            </summary>
            <param name="sendWindowSize">
            The send window size.
            </param>
        </member>
        <member name="M:ExitGames.Net.Sockets.Pgm.PgmSocket.GetReceiverStats(System.Net.Sockets.Socket)">
            <summary>
            Grets tje receiver stats for the socket.
            </summary>
            <param name="socket">
            The socket.
            </param>
            <returns>
            The receiver stats.
            </returns>
        </member>
        <member name="M:ExitGames.Net.Sockets.Pgm.PgmSocket.GetReceiverStats">
            <summary>
            Gets the receiver stats.
            </summary>
            <returns>
            The receiver stats.
            </returns>
        </member>
        <member name="M:ExitGames.Net.Sockets.Pgm.PgmSocket.SetPgmSocketOption(ExitGames.Net.Sockets.Pgm.Win32.PgmSocketOptions,System.Int32)">
            <summary>
            Sets pgm socket option.
            </summary>
            <param name="option">
            The option.
            </param>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="M:ExitGames.Net.Sockets.Pgm.PgmSocket.SetPgmSocketOption(ExitGames.Net.Sockets.Pgm.Win32.PgmSocketOptions,System.Byte[])">
            <summary>
            Set pgm socket option.
            </summary>
            <param name="option">
            The option.
            </param>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="M:ExitGames.Net.Sockets.Pgm.PgmSocket.ByteArrayToHexString(System.Byte[])">
            <summary>
            Byte array to hex string.
            </summary>
            <param name="value">
            The value.
            </param>
            <returns>
            The byte array to hex string.
            </returns>
        </member>
        <member name="M:ExitGames.Net.Sockets.Pgm.PgmSocket.LogSetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Object,System.Object)">
            <summary>
            The log set socket option.
            </summary>
            <param name="level">
            The level.
            </param>
            <param name="option">
            The option.
            </param>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="M:ExitGames.Net.Sockets.Pgm.PgmSocket.LogSetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Object,System.Byte[])">
            <summary>
            The log set socket option.
            </summary>
            <param name="level">
            The level.
            </param>
            <param name="option">
            The option.
            </param>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="M:ExitGames.Net.Sockets.Pgm.PgmSocket.LogSetSocketOptionException(System.Net.Sockets.SocketOptionLevel,System.Object,System.Object,System.Exception)">
            <summary>
            The log set socket option exception.
            </summary>
            <param name="level">
            The level.
            </param>
            <param name="option">
            The option.
            </param>
            <param name="value">
            The value.
            </param>
            <param name="exception">
            The exception.
            </param>
        </member>
        <member name="M:ExitGames.Net.Sockets.Pgm.PgmSocket.LogSetSocketOptionException(System.Net.Sockets.SocketOptionLevel,System.Object,System.Byte[],System.Exception)">
            <summary>
            The log set socket option exception.
            </summary>
            <param name="level">
            The level.
            </param>
            <param name="option">
            The option.
            </param>
            <param name="value">
            The value.
            </param>
            <param name="exception">
            The exception.
            </param>
        </member>
        <member name="P:ExitGames.Net.Sockets.Pgm.PgmSocket.PgmProtocolType">
            <summary>
              Gets the <see cref="T:System.Net.Sockets.ProtocolType"/> for the Pragmatic General Multicast (PGM) protocol.
            </summary>
            <value>
              Equals <see cref="F:ExitGames.Net.Sockets.Pgm.Win32.PgmConstants.IpProtoRm"/>.
            </value>
        </member>
        <member name="P:ExitGames.Net.Sockets.Pgm.PgmSocket.PgmSocketOptionLevel">
            <summary>
              Gets the <see cref="T:System.Net.Sockets.SocketOptionLevel"/> used to set 
              Pragmatic General Multicast (PGM) protocol specific socket options.
            </summary>
            <value>
              Equals <see cref="F:ExitGames.Net.Sockets.Pgm.Win32.PgmConstants.IpProtoRm"/>.
            </value>
        </member>
        <member name="T:ExitGames.Net.Sockets.Pgm.Win32.PgmConstants">
            <summary>
            Contains reliable multicast specific constants. 
            </summary>
            <remarks>
            Declared in Wsrm.h (Microsoft Windows SDK).
            </remarks>
        </member>
        <member name="F:ExitGames.Net.Sockets.Pgm.Win32.PgmConstants.BitsPerByte">
            <summary>
            bit s_ pe r_ byte.
            </summary>
        </member>
        <member name="F:ExitGames.Net.Sockets.Pgm.Win32.PgmConstants.IpProtoRm">
            <summary>PGM protocol for reliable multicast.</summary>
        </member>
        <member name="F:ExitGames.Net.Sockets.Pgm.Win32.PgmConstants.Log2BitsPerByte">
            <summary>
            lo g 2_ bit s_ pe r_ byte.
            </summary>
        </member>
        <member name="F:ExitGames.Net.Sockets.Pgm.Win32.PgmConstants.MaxMcastTtl">
            <summary>
            ma x_ mcas t_ ttl.
            </summary>
        </member>
        <member name="F:ExitGames.Net.Sockets.Pgm.Win32.PgmConstants.MaxWindowIncrementPercentage">
            <summary>
            ma x_ windo w_ incremen t_ percentage.
            </summary>
        </member>
        <member name="F:ExitGames.Net.Sockets.Pgm.Win32.PgmConstants.SenderDefaultLateJoinerPercentage">
            <summary>
            sende r_ defaul t_ lat e_ joine r_ percentage.
            </summary>
        </member>
        <member name="F:ExitGames.Net.Sockets.Pgm.Win32.PgmConstants.SenderDefaultRateKbitsPerSec">
            <summary>
            sende r_ defaul t_ rat e_ kbit s_ pe r_ sec.
            </summary>
        </member>
        <member name="F:ExitGames.Net.Sockets.Pgm.Win32.PgmConstants.SenderDefaultWindowAdvPercentage">
            <summary>
            sende r_ defaul t_ windo w_ ad v_ percentage.
            </summary>
        </member>
        <member name="F:ExitGames.Net.Sockets.Pgm.Win32.PgmConstants.SenderDefaultWindowSizeBytes">
            <summary>
            sende r_ defaul t_ windo w_ siz e_ bytes.
            </summary>
        </member>
        <member name="F:ExitGames.Net.Sockets.Pgm.Win32.PgmConstants.SenderMaxLateJoinerPercentage">
            <summary>
            sende r_ ma x_ lat e_ joine r_ percentage.
            </summary>
        </member>
        <member name="T:ExitGames.Net.Sockets.Pgm.Win32.PgmSocketOptions">
            <summary>
            Socket options that apply to sockets created for the IPv4 address 
            family (AF_INET) with the protocol parameter to the socket function 
            specified as reliable multicast (IpProtoRm). 
            </summary>
            <remarks>
            Declared in Wsrm.h (Microsoft Windows SDK).
            </remarks>
        </member>
        <member name="F:ExitGames.Net.Sockets.Pgm.Win32.PgmSocketOptions.RM_OPTIONSBASE">
            <summary>
            r m_ optionsbase.
            </summary>
        </member>
        <member name="F:ExitGames.Net.Sockets.Pgm.Win32.PgmSocketOptions.RM_RATE_WINDOW_SIZE">
            <summary>
            Sender only. Sets the transmission rate limit, 
            window advance time, and window size.
            </summary>
        </member>
        <member name="F:ExitGames.Net.Sockets.Pgm.Win32.PgmSocketOptions.RM_SET_MESSAGE_BOUNDARY">
            <summary>
            Sender only. Specifies size of the next message to be sent, 
            in bytes. Meaningful only to message mode sockets (SOCK_RDM). 
            Can be set while the session is in progress.
            </summary>
        </member>
        <member name="F:ExitGames.Net.Sockets.Pgm.Win32.PgmSocketOptions.RM_FLUSHCACHE">
            <summary>
            Not implemented - flush the entire data (window) right now.
            </summary>
        </member>
        <member name="F:ExitGames.Net.Sockets.Pgm.Win32.PgmSocketOptions.RM_SENDER_WINDOW_ADVANCE_METHOD">
            <summary>
            Sender only. The optval parameter specifies the method used when 
            advancing the trailing edge send window. The optval parameter can 
            only be E_WINDOW_ADVANCE_BY_TIME (the default). 
            Note that E_WINDOW_USE_AS_DATA_CACHE is not supported.
            </summary>
        </member>
        <member name="F:ExitGames.Net.Sockets.Pgm.Win32.PgmSocketOptions.RM_SENDER_STATISTICS">
            <summary>
            Sender only. Retrieves statistics for the sending session.
            </summary>
        </member>
        <member name="F:ExitGames.Net.Sockets.Pgm.Win32.PgmSocketOptions.RM_LATEJOIN">
            <summary>
            Sender only. Percentage of window size allowed to be requested by late-joining 
            receivers upon session acceptance. Maximum value is 75% (default is zero). 
            Disable this setting by calling again with value set to zero.
            </summary>
        </member>
        <member name="F:ExitGames.Net.Sockets.Pgm.Win32.PgmSocketOptions.RM_SET_SEND_IF">
            <summary>
            Sender only. Sets the sending interface IP address in network byte order. 
            </summary>
        </member>
        <member name="F:ExitGames.Net.Sockets.Pgm.Win32.PgmSocketOptions.RM_ADD_RECEIVE_IF">
            <summary>
            Receiver only. Adds an interface on which to listen (the default is the 
            first local interface enumerated). The optval parameter specifies the 
            network interface in network byte order to add. The value specified 
            replaces the default interface on the first call for a given socket, 
            and adds other interfaces on subsequent calls. 
            To obtain INADDR_ANY behavior, each network interface must be added separately.
            </summary>
        </member>
        <member name="F:ExitGames.Net.Sockets.Pgm.Win32.PgmSocketOptions.RM_DEL_RECEIVE_IF">
            <summary>
            Receiver only. Removes an interface added using RM_ADD_RECEIVE_IF. 
            The optval parameter specifies the network interface in network byte 
            order to delete.
            </summary>
        </member>
        <member name="F:ExitGames.Net.Sockets.Pgm.Win32.PgmSocketOptions.RM_SEND_WINDOW_ADV_RATE">
            <summary>
            Sender only. Specifies the incremental advance rate for the trailing 
            edge send window (default is 15%). Maximum value is 50%.
            </summary>
        </member>
        <member name="F:ExitGames.Net.Sockets.Pgm.Win32.PgmSocketOptions.RM_USE_FEC">
            <summary>
            Sender only. Notifies sender to apply forward error correction 
            techniques to send repair data. FEC has three modes: pro-active parity 
            packets only, OnDemand parity packets only, or both. 
            See RM_FEC_INFO structure for more information.
            </summary>
        </member>
        <member name="F:ExitGames.Net.Sockets.Pgm.Win32.PgmSocketOptions.RM_SET_MCAST_TTL">
            <summary>
            Sender only. Sets the maximum time to live (TTL) setting for 
            multicast packets. Maximum and default value is 255.
            </summary>      
        </member>
        <member name="F:ExitGames.Net.Sockets.Pgm.Win32.PgmSocketOptions.RM_RECEIVER_STATISTICS">
            <summary>
            Receiver only. Retrieves statistics for the receiving session.
            </summary>
        </member>
        <member name="F:ExitGames.Net.Sockets.Pgm.Win32.PgmSocketOptions.RM_HIGH_SPEED_INTRANET_OPT">
            <summary>
            Receiver only. Specifies whether a high bandwidth LAN (100Mbps+) 
            connection is used.
            </summary>
        </member>
        <member name="T:ExitGames.Net.Sockets.Pgm.Win32.RM_RECEIVER_STATS">
            <summary>
              The RM_RECEIVER_STATS structure specifies the Reliable Multicast receiver stats.
            </summary>
        </member>
        <member name="F:ExitGames.Net.Sockets.Pgm.Win32.RM_RECEIVER_STATS.AverageSequencesInWindow">
            <summary>
              Average sequences in window.
            </summary>
        </member>
        <member name="F:ExitGames.Net.Sockets.Pgm.Win32.RM_RECEIVER_STATS.DataBytesReceived">
            <summary>
              Data bytes received.
            </summary>
        </member>
        <member name="F:ExitGames.Net.Sockets.Pgm.Win32.RM_RECEIVER_STATS.FirstNakSequenceNumber">
            <summary>
              First nak sequence number.
            </summary>
        </member>
        <member name="F:ExitGames.Net.Sockets.Pgm.Win32.RM_RECEIVER_STATS.LeadingEdgeSeqId">
            <summary>
              Leading edge seq id.
            </summary>
        </member>
        <member name="F:ExitGames.Net.Sockets.Pgm.Win32.RM_RECEIVER_STATS.MaxSequencesInWindow">
            <summary>
              Max sequences in window.
            </summary>
        </member>
        <member name="F:ExitGames.Net.Sockets.Pgm.Win32.RM_RECEIVER_STATS.MinSequencesInWindow">
            <summary>
              Min sequences in window.
            </summary>
        </member>
        <member name="F:ExitGames.Net.Sockets.Pgm.Win32.RM_RECEIVER_STATS.NumDataPacketsBuffered">
            <summary>
              Num data packets buffered.
            </summary>
        </member>
        <member name="F:ExitGames.Net.Sockets.Pgm.Win32.RM_RECEIVER_STATS.NumDuplicateDataPackets">
            <summary>
              Num duplicate data packets.
            </summary>
        </member>
        <member name="F:ExitGames.Net.Sockets.Pgm.Win32.RM_RECEIVER_STATS.NumODataPacketsReceived">
            <summary>
              Num o data packets received.
            </summary>
        </member>
        <member name="F:ExitGames.Net.Sockets.Pgm.Win32.RM_RECEIVER_STATS.NumOutstandingNaks">
            <summary>
              Num outstanding naks.
            </summary>
        </member>
        <member name="F:ExitGames.Net.Sockets.Pgm.Win32.RM_RECEIVER_STATS.NumPendingNaks">
            <summary>
              Num pending naks.
            </summary>
        </member>
        <member name="F:ExitGames.Net.Sockets.Pgm.Win32.RM_RECEIVER_STATS.NumRDataPacketsReceived">
            <summary>
              Num r data packets received.
            </summary>
        </member>
        <member name="F:ExitGames.Net.Sockets.Pgm.Win32.RM_RECEIVER_STATS.RateKBitsPerSecLast">
            <summary>
              Rate k bits per sec last.
            </summary>
        </member>
        <member name="F:ExitGames.Net.Sockets.Pgm.Win32.RM_RECEIVER_STATS.RateKBitsPerSecOverall">
            <summary>
              Rate k bits per sec overall.
            </summary>
        </member>
        <member name="F:ExitGames.Net.Sockets.Pgm.Win32.RM_RECEIVER_STATS.TotalBytesReceived">
            <summary>
              Total bytes received.
            </summary>
        </member>
        <member name="F:ExitGames.Net.Sockets.Pgm.Win32.RM_RECEIVER_STATS.TotalParityNaksSent">
            <summary>
              Total parity naks sent.
            </summary>
        </member>
        <member name="F:ExitGames.Net.Sockets.Pgm.Win32.RM_RECEIVER_STATS.TotalSelectiveNaksSent">
            <summary>
              Total selective naks sent.
            </summary>
        </member>
        <member name="F:ExitGames.Net.Sockets.Pgm.Win32.RM_RECEIVER_STATS.TrailingEdgeSeqId">
            <summary>
              Trailing edge seq id.
            </summary>
        </member>
        <member name="T:ExitGames.Net.Sockets.Pgm.Win32.RM_SEND_WINDOW">
            <summary>
            The RM_SEND_WINDOW structure specifies the Reliable Multicast send window. 
            This structure is used with the RM_RATE_WINDOW_SIZE socket option.
            </summary>
            <remarks>
            Any combination of the three available members may be set for a given socket option call. 
            For example, one, any two, or all three members may be specified during a setsockopt 
            function call. Regardless of settings, Windows enforces the following ratio: 
            TransmissionRate == (WindowSizeBytes/WindowSizeMSecs) * 8. 
            As such, setting any two parameters effectively sets the third to ensure optimum performance. 
            The combination of these members can affect the resources used on a PGM sender's computer. 
            For example, a large transmission rate value combined with a large window size results in 
            more required buffer space.
            </remarks>
        </member>
        <member name="F:ExitGames.Net.Sockets.Pgm.Win32.RM_SEND_WINDOW.RateKbitsPerSec">
            <summary>
            Transmission rate for the send window, in kilobits per second.
            </summary>
        </member>
        <member name="F:ExitGames.Net.Sockets.Pgm.Win32.RM_SEND_WINDOW.WindowSizeInMSecs">
            <summary>
            Window size for the send window, in milliseconds.
            </summary>
        </member>
        <member name="F:ExitGames.Net.Sockets.Pgm.Win32.RM_SEND_WINDOW.WindowSizeInBytes">
            <summary>
            Window size for the session, in bytes.
            </summary>
        </member>
        <member name="T:ExitGames.Net.Sockets.SocketReceiveEventArgs">
            <summary>
            The socket receive event args.
            </summary>
        </member>
        <member name="F:ExitGames.Net.Sockets.SocketReceiveEventArgs.data">
            <summary>
            The data.
            </summary>
        </member>
        <member name="F:ExitGames.Net.Sockets.SocketReceiveEventArgs.length">
            <summary>
            The length.
            </summary>
        </member>
        <member name="F:ExitGames.Net.Sockets.SocketReceiveEventArgs.offset">
            <summary>
            The offset.
            </summary>
        </member>
        <member name="F:ExitGames.Net.Sockets.SocketReceiveEventArgs.remoteEndPoint">
            <summary>
            The remote end point.
            </summary>
        </member>
        <member name="M:ExitGames.Net.Sockets.SocketReceiveEventArgs.#ctor(System.Net.EndPoint,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ExitGames.Net.Sockets.SocketReceiveEventArgs"/> class.
            </summary>
            <param name="remoteEndPoint">
            The remote end point.
            </param>
            <param name="buffer">
            The buffer.
            </param>
            <param name="offset">
            The offset.
            </param>
            <param name="length">
            The length.
            </param>
        </member>
        <member name="P:ExitGames.Net.Sockets.SocketReceiveEventArgs.Buffer">
            <summary>
            Gets the data buffer containing the received data.
            </summary>
            <value>
            Buffer with the receuved data.
            </value>
        </member>
        <member name="P:ExitGames.Net.Sockets.SocketReceiveEventArgs.BytesReceived">
            <summary>
            Gets the number of bytes received in the socket operation.
            </summary>
            <value>
            The number of bytes received in the socket operation.
            </value>
        </member>
        <member name="P:ExitGames.Net.Sockets.SocketReceiveEventArgs.Offset">
            <summary>
            Gets the offset, in bytes, of data in the <see cref="P:ExitGames.Net.Sockets.SocketReceiveEventArgs.Buffer"/> property.
            </summary>
            <value>
            The offset in <see cref="P:ExitGames.Net.Sockets.SocketReceiveEventArgs.Buffer"/> where the received data begins.
            </value>
        </member>
        <member name="P:ExitGames.Net.Sockets.SocketReceiveEventArgs.RemoteEndPoint">
            <summary>
            Gets the remote endpoint from which data was received.
            </summary>
            <value>
            The remote endpoint from which data was received.
            </value>
        </member>
        <member name="T:ExitGames.Threading.BlockingQueue`1">
            <summary>
            This class is a <see cref="T:System.Collections.Generic.Queue`1"/> wrapper that waits at <see cref="M:ExitGames.Threading.BlockingQueue`1.Dequeue"/> until an item becomes available.
            </summary>
            <typeparam name="T">
            Type of object in queue.
            </typeparam>
        </member>
        <member name="F:ExitGames.Threading.BlockingQueue`1.defaultTimeout">
            <summary>
            The default max wait time.
            </summary>
        </member>
        <member name="F:ExitGames.Threading.BlockingQueue`1.maxSize">
            <summary>
            The max queue length.
            </summary>
        </member>
        <member name="F:ExitGames.Threading.BlockingQueue`1.queue">
            <summary>
            The wrapped queue.
            </summary>
        </member>
        <member name="F:ExitGames.Threading.BlockingQueue`1.syncRoot">
            <summary>
            The sync root.
            </summary>
        </member>
        <member name="M:ExitGames.Threading.BlockingQueue`1.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ExitGames.Threading.BlockingQueue`1"/> class.
            </summary>
            <param name="maxSize">
            The max queue length.
            </param>
            <param name="lockTimeout">
            The max time in milliseconds to wait for a new item.
            </param>
        </member>
        <member name="M:ExitGames.Threading.BlockingQueue`1.Dequeue">
            <summary>
            Dequeues the next item.
            This methods waits until an item becomes available or until the default timeout has expired.
            </summary>
            <returns>
            The next item in queue.
            </returns>
            <exception cref="T:System.TimeoutException">
            No item available within given time.
            </exception>
        </member>
        <member name="M:ExitGames.Threading.BlockingQueue`1.Dequeue(System.TimeSpan)">
            <summary>
            Dequeues the next item.
            This methods waits until an item becomes available or until the timeout has expired.
            </summary>
            <param name="timeout">
            The max time to wait.
            </param>
            <returns>
            The next item in queue.
            </returns>
            <exception cref="T:System.TimeoutException">
            No item available within given time.
            </exception>
        </member>
        <member name="M:ExitGames.Threading.BlockingQueue`1.Dequeue(System.Int32)">
            <summary>
            Dequeues the next item.
            This methods waits until an item becomes available or until the timeout has expired.
            </summary>
            <param name="waitTime">
            The max wait time in milliseconds.
            </param>
            <returns>
            The next item in queue.
            </returns>
            <exception cref="T:System.TimeoutException">
            No item available within given time.
            </exception>
        </member>
        <member name="M:ExitGames.Threading.BlockingQueue`1.Enqueue(`0)">
            <summary>
            Enqueues an item. The default timeout is used to detect dead locks.
            </summary>
            <param name="item">
            The item.
            </param>
            <exception cref="T:System.TimeoutException">
            The item could not be enqueued within the given time.
            </exception>
        </member>
        <member name="M:ExitGames.Threading.BlockingQueue`1.Enqueue(`0,System.TimeSpan)">
            <summary>
            Enqueues an item. The timeout is used to detect dead locks.
            </summary>
            <param name="item">
            The item.
            </param>
            <param name="timeout">
            The timeout.
            </param>
             <exception cref="T:System.TimeoutException">
            The item could not be enqueued within the given time.
            </exception>
        </member>
        <member name="M:ExitGames.Threading.BlockingQueue`1.Enqueue(`0,System.Int32)">
            <summary>
            Enqueues an item. The timeout is used to detect dead locks.
            </summary>
            <param name="value">
            The value.
            </param>
            <param name="timeOut">
            The time out.
            </param>
            <exception cref="T:System.TimeoutException">
            The item could not be enqueued within the given time.
            </exception>
        </member>
        <member name="P:ExitGames.Threading.BlockingQueue`1.MaxSize">
            <summary>
            Gets the max queue length.
            </summary>
        </member>
        <member name="T:ExitGames.Threading.Lock">
            <summary>
              This <see cref="T:System.IDisposable"/> uses the <see cref="T:System.Threading.Monitor"/> class. 
              It is used to replaces try-finally blocks with "using" statements.
            </summary>
            <example>
              <code>
                using (Lock.Enter(syncRoot))
                {
                // critical section here
                }
              </code>
            </example>
        </member>
        <member name="F:ExitGames.Threading.Lock.syncObject">
            <summary>
              The sync root.
            </summary>
        </member>
        <member name="M:ExitGames.Threading.Lock.#ctor(System.Object)">
            <summary>
              Initializes a new instance of the <see cref="T:ExitGames.Threading.Lock"/> struct.
            </summary>
            <param name="syncObject">
              The sync object.
            </param>
        </member>
        <member name="M:ExitGames.Threading.Lock.#ctor(System.Object,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:ExitGames.Threading.Lock"/> struct.
            </summary>
            <param name="syncObject">
              The sync object.
            </param>
            <param name="millisecondsTimeout">
              The timeout for <see cref="M:System.Threading.Monitor.TryEnter(System.Object,System.Int32)"/> in milliseconds.
            </param>
            <exception cref="T:ExitGames.Threading.LockTimeoutException">
              <see cref="M:System.Threading.Monitor.TryEnter(System.Object,System.Int32)"/> returned false.
            </exception>
        </member>
        <member name="M:ExitGames.Threading.Lock.Enter(System.Object)">
            <summary>
              Enters a critical section with <see cref="M:System.Threading.Monitor.Enter(System.Object)"/> and returns a new instance of <see cref="T:ExitGames.Threading.Lock"/>.
            </summary>
            <param name="syncObject">
              The sync object.
            </param>
            <returns>
              Disposing the result leads to <see cref="M:System.Threading.Monitor.Exit(System.Object)"/>.
            </returns>
        </member>
        <member name="M:ExitGames.Threading.Lock.TryEnter(System.Object,System.Int32)">
            <summary>
              Enters a critical section with <see cref="M:System.Threading.Monitor.TryEnter(System.Object,System.Int32)"/> and returns a new instance of <see cref="T:ExitGames.Threading.Lock"/>.
            </summary>
            <param name="syncObject">
              The sync object.
            </param>
            <param name="millisecondsTimeout">
              The milliseconds Timeout.
            </param>
            <returns>
              Disposing the result leads to <see cref="M:System.Threading.Monitor.Exit(System.Object)"/>.
            </returns>
        </member>
        <member name="M:ExitGames.Threading.Lock.Dispose">
            <summary>
              Calls <see cref="M:System.Threading.Monitor.Exit(System.Object)"/>.
            </summary>
        </member>
        <member name="T:ExitGames.Threading.SynchronizedDictionary`2">
            <summary>
              Represents a thread-safe collection of key-value pairs that can be accessed by multiple threads concurrently. 
              If using the Net 4.0 framework you should consider to use the new System.Collections.Concurrent.ConcurrentDictionary.
              The SynchronizedDictionary provides methods similar to the ConcurrentDictionary to provide a thread safe
              Dictionary for .NET 3.5 and earlier.
            </summary>
            <typeparam name = "TKey">The type of the keys in the dictionary.</typeparam>
            <typeparam name = "TValue">The type of the values in the dictionary.</typeparam>
        </member>
        <member name="F:ExitGames.Threading.SynchronizedDictionary`2.dictionary">
            <summary>
              The wrapped dictionary.
            </summary>
        </member>
        <member name="F:ExitGames.Threading.SynchronizedDictionary`2.readerWriterLock">
            <summary>
              The locking mechanism.
            </summary>
        </member>
        <member name="M:ExitGames.Threading.SynchronizedDictionary`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ExitGames.Threading.SynchronizedDictionary`2"/> class. 
              Initializes a new instance of the <see cref="T:ExitGames.Threading.SynchronizedDictionary`2"/> class.
            </summary>
        </member>
        <member name="M:ExitGames.Threading.SynchronizedDictionary`2.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ExitGames.Threading.SynchronizedDictionary`2"/> class. 
              Initializes a new instance of the <see cref="T:ExitGames.Threading.SynchronizedDictionary`2"/> class.
            </summary>
            <param name="capacity">
            The initial number of elements that the SynchronizedDictionary can contain.
            </param>
        </member>
        <member name="M:ExitGames.Threading.SynchronizedDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:ExitGames.Threading.SynchronizedDictionary`2"/> class. 
              Initializes a new instance of the <see cref="T:ExitGames.Threading.SynchronizedDictionary`2"/> class.
            </summary>
            <param name="comparer">
            The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use 
              when comparing keys.
            </param>
        </member>
        <member name="M:ExitGames.Threading.SynchronizedDictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:ExitGames.Threading.SynchronizedDictionary`2"/> class. 
              Initializes a new instance of the <see cref="T:ExitGames.Threading.SynchronizedDictionary`2"/> class.
            </summary>
            <param name="capacity">
            The initial number of elements that the SynchronizedDictionary can contain.
            </param>
            <param name="comparer">
            The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use
              when comparing keys.
            </param>
        </member>
        <member name="M:ExitGames.Threading.SynchronizedDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:ExitGames.Threading.SynchronizedDictionary`2"/> class. 
              Initializes a new instance of the <see cref="T:ExitGames.Threading.SynchronizedDictionary`2"/> class.
            </summary>
            <param name="dictionary">
            The <see cref="T:System.Collections.Generic.IDictionary`2"/> whose elements are copied to 
              the new SynchronizedDictionary.
            </param>
        </member>
        <member name="M:ExitGames.Threading.SynchronizedDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:ExitGames.Threading.SynchronizedDictionary`2"/> class. 
              Initializes a new instance of the <see cref="T:ExitGames.Threading.SynchronizedDictionary`2"/> class.
            </summary>
            <param name="dictionary">
            The <see cref="T:System.Collections.Generic.IDictionary`2"/> whose elements are copied to 
              the new SynchronizedDictionary.
            </param>
            <param name="comparer">
            The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use
              when comparing keys.
            </param>
        </member>
        <member name="M:ExitGames.Threading.SynchronizedDictionary`2.Finalize">
            <summary>
              Finalizes an instance of the <see cref="T:ExitGames.Threading.SynchronizedDictionary`2"/> class.
            </summary>
        </member>
        <member name="M:ExitGames.Threading.SynchronizedDictionary`2.AddOrUpdate(`0,`1,System.Func{`0,`1,`1})">
            <summary>
              Adds a key/value pair to the dictionary if the key does not already exist, 
              or updates a key/value pair in the dictionary if the key already exists.
            </summary>
            <param name = "key">The key to be added or whose value should be updated.</param>
            <param name = "addValue">The value to be added for an absent key.</param>
            <param name = "updateValueFactory">The function used to generate a new value for an existing key based on the key's existing value.</param>
            <returns>The new value for the key. This will be either be addValue (if the key was absent) or the result of updateValueFactory (if the key was present).</returns>
        </member>
        <member name="M:ExitGames.Threading.SynchronizedDictionary`2.AddOrUpdate(`0,System.Func{`0,`1},System.Func{`0,`1,`1})">
            <summary>
              Adds a key/value pair to the dictionary if the key does not already exist, 
              or updates a key/value pair in the dictionary if the key already exists.
            </summary>
            <param name = "key">The key to be added or whose value should be updated.</param>
            <param name = "addValueFactory">The function used to generate a value for an absent key.</param>
            <param name = "updateValueFactory">The function used to generate a new value for an existing key based on the key's existing value.</param>
            <returns>The new value for the key. This will be either be the result of addValueFactory (if the key was absent) or the result of updateValueFactory (if the key was present).</returns>
        </member>
        <member name="M:ExitGames.Threading.SynchronizedDictionary`2.Clear">
            <summary>
              Removes all keys and values from the <see cref="T:ExitGames.Threading.SynchronizedDictionary`2"/>.
            </summary>
        </member>
        <member name="M:ExitGames.Threading.SynchronizedDictionary`2.ContainsKey(`0)">
            <summary>
              Determines whether the <see cref="T:ExitGames.Threading.SynchronizedDictionary`2"/> contains the specified key.
            </summary>
            <param name="key">The key to locate.</param>
            <returns>
              True if the <see cref="T:ExitGames.Threading.SynchronizedDictionary`2"/> contains an element with the specified key;
              otherwise, false.
            </returns>
        </member>
        <member name="M:ExitGames.Threading.SynchronizedDictionary`2.GetOrAdd(`0,System.Func{`0,`1})">
            <summary>
              Adds a key/value pair to the <see cref="T:ExitGames.Threading.SynchronizedDictionary`2"/> if the key 
              does not already exist
            </summary>
            <param name="key">The key of the element to get or add.</param>
            <param name="valueFactory">The function used to generate a value for the key</param>
            <returns>
              The value for the key. This will be either the existing value for the key if the
              key is already in the dictionary, or the new value for the key as returned by valueFactory 
              if the key was not in the dictionary.
            </returns>
        </member>
        <member name="M:ExitGames.Threading.SynchronizedDictionary`2.Remove(`0)">
            <summary>
              Removes the value with the specified key from the <see cref="T:ExitGames.Threading.SynchronizedDictionary`2"/>.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns>
              true if the element is successfully found and removed; otherwise, false. 
              This method returns false if key is not found in the <see cref="T:ExitGames.Threading.SynchronizedDictionary`2"/>.
            </returns>
        </member>
        <member name="M:ExitGames.Threading.SynchronizedDictionary`2.TryAdd(`0,`1)">
            <summary>
              Attempts to add the specified key and value to the <see cref="T:ExitGames.Threading.SynchronizedDictionary`2"/>.
            </summary>
            <param name="key">The key of the element to add.</param>
            <param name="value">The value of the element to add. The value can be a null reference (Nothing in Visual Basic) for reference types.</param>
            <returns>
              True if the key/value pair was added to the <see cref="T:ExitGames.Threading.SynchronizedDictionary`2"/> successfully. 
              If the key already exists, this method returns false.
            </returns>
        </member>
        <member name="M:ExitGames.Threading.SynchronizedDictionary`2.TryGetValue(`0,`1@)">
            <summary>
              Attempts to get the value associated with the specified key from the <see cref="T:ExitGames.Threading.SynchronizedDictionary`2"/>.
            </summary>
            <param name="key">The key of the value to get.</param>
            <param name="value">When this method returns true, value contains the object from the <see cref="T:ExitGames.Threading.SynchronizedDictionary`2"/>
              with the specified key.</param>
            <returns>
              true if the key was found in the <see cref="T:ExitGames.Threading.SynchronizedDictionary`2"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:ExitGames.Threading.SynchronizedDictionary`2.TryRemove(`0,`1@)">
            <summary>
              Attempts to remove and return the value with the specified key from the <see cref="T:ExitGames.Threading.SynchronizedDictionary`2"/>.
            </summary>
            <param name="key">The key of the element to remove and return.</param>
            <param name="value">When this method returns true, value contains the object removed from the <see cref="T:ExitGames.Threading.SynchronizedDictionary`2"/> or the default value of if the operation failed.</param>
            <returns>true if an object was removed successfully; otherwise, false.</returns>
        </member>
        <member name="M:ExitGames.Threading.SynchronizedDictionary`2.TryUpdate(`0,`1,`1)">
            <summary>
              Compares the existing value for the specified key with a specified value, 
              and if they are equal, updates the key with a third value.
            </summary>
            <param name = "key">The key whose value is compared with comparisonValue and possibly replaced.</param>
            <param name = "newValue">The value that replaces the value of the element with key if the comparison results in equality</param>
            <param name = "comparisonValue">The value that is compared to the value of the element with key</param>
            <returns>true if the value with key was equal to comparisonValue and replaced with newValue; otherwise, false.</returns>
        </member>
        <member name="M:ExitGames.Threading.SynchronizedDictionary`2.Dispose">
            <summary>
              Releases all resources used by the current instance of the <see cref="T:ExitGames.Threading.SynchronizedDictionary`2"/> class.
            </summary>
        </member>
        <member name="M:ExitGames.Threading.SynchronizedDictionary`2.Dispose(System.Boolean)">
            <summary>
              Releases unmanaged and - optionally - managed resources
            </summary>
            <param name = "disposing">
              <c>true</c> to release both managed and unmanaged resources; 
              <c>false</c> to release only unmanaged resources.
            </param>
            <remarks>
              Dispose(bool disposing) executes in two distinct scenarios.
              If disposing equals true, the method has been called directly
              or indirectly by a user's code. Managed and unmanaged resources
              can be disposed.
              If disposing equals false, the method has been called by the
              runtime from inside the finalizer and you should not reference
              other objects. Only unmanaged resources can be disposed.
            </remarks>
        </member>
        <member name="P:ExitGames.Threading.SynchronizedDictionary`2.Count">
            <summary>
              Gets the number of key/value pairs contained in the <see cref="T:ExitGames.Threading.SynchronizedDictionary`2"/>.
            </summary>
            <value>The number of key/value pairs contained in the <see cref="T:ExitGames.Threading.SynchronizedDictionary`2"/></value>
        </member>
        <member name="P:ExitGames.Threading.SynchronizedDictionary`2.Item(`0)">
            <summary>
              Gets or sets the value associated with the specified key.
            </summary>
            <param name = "key">The key of the value to get or set.</param>
            <returns>
              The value for the key.
            </returns>
        </member>
        <member name="T:ExitGames.Threading.CreateMethodDelegate`2">
            <summary>
              The delegate that creates new instances.
            </summary>
            <param name = "key">
              The key.
            </param>
            <param name = "value">
              The output value.
            </param>
            <typeparam name = "TKey">
              The type of key.
            </typeparam>
            <typeparam name = "TValue">
              The type of value.
            </typeparam>
            <returns>
              True if a value was created. Otherwise false.
            </returns>
        </member>
        <member name="T:ExitGames.Threading.UnsynchronizedSingletonFactory`2">
            <summary>
              This class is used to create instances that are unique per key.
            </summary>
            <typeparam name="TKey">
              The type of key.
            </typeparam>
            <typeparam name="TValue">
              The type of value.
            </typeparam>
            <remarks>
              Instance members are not thread safe.
              For multi-threaded environments use the <see cref="T:ExitGames.Threading.SynchronizedSingletonFactory`2"/>.
            </remarks>
        </member>
        <member name="F:ExitGames.Threading.UnsynchronizedSingletonFactory`2.instances">
            <summary>
              A dictionary for all instances.
            </summary>
        </member>
        <member name="F:ExitGames.Threading.UnsynchronizedSingletonFactory`2.defaultCreateMethod">
            <summary>
              The delegate that creates new instances.
            </summary>
        </member>
        <member name="M:ExitGames.Threading.UnsynchronizedSingletonFactory`2.#ctor(ExitGames.Threading.CreateMethodDelegate{`0,`1})">
            <summary>
              Initializes a new instance of the <see cref="T:ExitGames.Threading.UnsynchronizedSingletonFactory`2"/> class.
            </summary>
            <param name="defaultCreateMethod">
              The default function that creates new instances.
            </param>
        </member>
        <member name="M:ExitGames.Threading.UnsynchronizedSingletonFactory`2.Add(`0,`1)">
            <summary>
              Adds a new value if there is none for the same key.
            </summary>
            <param name = "key">
              The key.
            </param>
            <param name = "value">
              The value.
            </param>
            <returns>
              True if the <paramref name = "value" /> has been added. 
              False if another value for this <paramref name = "key" /> has already been present.
            </returns>
        </member>
        <member name="M:ExitGames.Threading.UnsynchronizedSingletonFactory`2.ForAll(System.Action{`1})">
            <summary>
              This method iterates over a copy of <see cref="P:ExitGames.Threading.UnsynchronizedSingletonFactory`2.Instances"/> and executes the <paramref name="action"/> on each item.
            </summary>
            <param name="action">
              The action.
            </param>
        </member>
        <member name="M:ExitGames.Threading.UnsynchronizedSingletonFactory`2.ForAll``1(System.Func{`1,``0},System.Func{``0,``0,``0},``0)">
            <summary>
              This method iterates over a copy of <see cref="P:ExitGames.Threading.UnsynchronizedSingletonFactory`2.Instances"/>.
              The <paramref name="selector"/> parameter selects a value of each instance.
              These values are combined with the <paramref name="aggregateFunction"/>.
            </summary>
            <param name="selector">
              The action that maps a value to each instance.
            </param>
            <param name="aggregateFunction">
              The function that combines all <paramref name="selector"/> results.
            </param>
            <param name="seed">
              The result value to start with.
            </param>
            <typeparam name="TResult">
              The type of the result value.
            </typeparam>
            <returns>
              An aggregegated value from all instances.
            </returns>
        </member>
        <member name="M:ExitGames.Threading.UnsynchronizedSingletonFactory`2.Get(`0,ExitGames.Threading.CreateMethodDelegate{`0,`1})">
            <summary>
              Gets an existing value for a key or creates a new one.
            </summary>
            <param name = "key">
              The key.
            </param>
            <param name = "createMethod">
              The method that creates a new value if the key has not been added yet.
            </param>
            <returns>
              The value for the key.
            </returns>
        </member>
        <member name="M:ExitGames.Threading.UnsynchronizedSingletonFactory`2.Get(`0)">
            <summary>
              Gets an existing value for a key or creates a new one with the default <see cref="P:ExitGames.Threading.UnsynchronizedSingletonFactory`2.CreateMethod"/>.
            </summary>
            <param name="key">
              The key.
            </param>
            <returns>
              The value for the key.
            </returns>
        </member>
        <member name="M:ExitGames.Threading.UnsynchronizedSingletonFactory`2.Remove(`0)">
            <summary>
              Removes a value from the <see cref="P:ExitGames.Threading.UnsynchronizedSingletonFactory`2.Instances"/>.
            </summary>
            <param name="key">
              The key.
            </param>
            <returns>
              True if key was found and removed, otherwise false.
            </returns>
        </member>
        <member name="M:ExitGames.Threading.UnsynchronizedSingletonFactory`2.TryGet(`0,`1@)">
            <summary>
              Tries to get an existing value for the key.
            </summary>
            <param name = "key">
              The key.
            </param>
            <param name = "value">
              The value.
            </param>
            <returns>
              True if a value was found, otherwise false.
            </returns>
        </member>
        <member name="M:ExitGames.Threading.UnsynchronizedSingletonFactory`2.DoAdd(`0,`1)">
            <summary>
              Adds a value to the <see cref="P:ExitGames.Threading.UnsynchronizedSingletonFactory`2.Instances"/>.
              This method is called from <see cref="M:ExitGames.Threading.UnsynchronizedSingletonFactory`2.Add(`0,`1)"/> and <see cref="M:ExitGames.Threading.UnsynchronizedSingletonFactory`2.Get(`0,ExitGames.Threading.CreateMethodDelegate{`0,`1})">Get</see>.
            </summary>
            <param name="key">
              The key.
            </param>
            <param name="value">
              The value.
            </param>
        </member>
        <member name="P:ExitGames.Threading.UnsynchronizedSingletonFactory`2.Count">
            <summary>
              Gets the number of existing instances.
            </summary>
        </member>
        <member name="P:ExitGames.Threading.UnsynchronizedSingletonFactory`2.CreateMethod">
            <summary>
              Gets or sets the default function that creates new instances.
            </summary>
        </member>
        <member name="P:ExitGames.Threading.UnsynchronizedSingletonFactory`2.Instances">
            <summary>
              Gets a reference to the underlying dictionary that contains all existing instances.
            </summary>
        </member>
        <member name="T:ExitGames.Threading.Timer">
            <summary>
            This class is a manager for scheduled callbacks.
            </summary>
        </member>
        <member name="F:ExitGames.Threading.Timer.log">
            <summary>
            The logger.
            </summary>
        </member>
        <member name="F:ExitGames.Threading.Timer.timers">
            <summary>
            All existing timers.
            </summary>
        </member>
        <member name="F:ExitGames.Threading.Timer.fiber">
            <summary>
            The execution fiber.
            </summary>
        </member>
        <member name="F:ExitGames.Threading.Timer.running">
            <summary>
            Indicates whether the timer is still running.
            </summary>
        </member>
        <member name="M:ExitGames.Threading.Timer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ExitGames.Threading.Timer"/> class.
            </summary>
        </member>
        <member name="M:ExitGames.Threading.Timer.AddAction(System.DateTime,System.Action)">
            <summary>
            Schedules a callback for a specific time.
            </summary>
            <param name="utcExecutionTime">
            The execution time in UTC.
            </param>
            <param name="callback">
            The callback.
            </param>
            <returns>
            An ID that can be used to abort the timer with <see cref="M:ExitGames.Threading.Timer.RemoveAction(System.Guid)"/>.
            </returns>
        </member>
        <member name="M:ExitGames.Threading.Timer.ClearActions">
            <summary>
            Aborts all timers.
            </summary>
        </member>
        <member name="M:ExitGames.Threading.Timer.ExecuteAction(System.Action)">
            <summary>
            Immediately invoks an async callback.
            </summary>
            <param name="callback">
            The callback to invoke.
            </param>
        </member>
        <member name="M:ExitGames.Threading.Timer.RemoveAction(System.Guid)">
            <summary>
            Removes a scheduled action that has been added with <see cref="M:ExitGames.Threading.Timer.AddAction(System.DateTime,System.Action)"/>.
            </summary>
            <param name="id">
            The action id assigned by <see cref="M:ExitGames.Threading.Timer.AddAction(System.DateTime,System.Action)"/>.
            </param>
        </member>
        <member name="M:ExitGames.Threading.Timer.Start">
            <summary>
            Start executing callbacks.
            </summary>
        </member>
        <member name="M:ExitGames.Threading.Timer.Stop">
            <summary>
            Stops all timers.
            </summary>
        </member>
        <member name="M:ExitGames.Threading.Timer.ExecutionEndCallback(System.IAsyncResult)">
            <summary>
            Callback for all async executions.
            </summary>
            <param name="ar">
            The async result.
            </param>
        </member>
        <member name="M:ExitGames.Threading.Timer.DoAddAction(System.Guid,System.DateTime,System.Action)">
            <summary>
            Adds an action. Running on the fiber. 
            </summary>
            <param name="id">
            The id.
            </param>
            <param name="utcExecutionTime">
            The utc execution time.
            </param>
            <param name="callback">
            The callback.
            </param>
        </member>
        <member name="M:ExitGames.Threading.Timer.DoClearActions">
            <summary>
            Clears all actions. Running on the fiber.
            </summary>
        </member>
        <member name="M:ExitGames.Threading.Timer.DoRemoveAction(System.Guid)">
            <summary>
            Removes an action. Running on the fiber.
            </summary>
            <param name="id">
            The action id.
            </param>
        </member>
        <member name="M:ExitGames.Threading.Timer.ExecuteTimerAction(System.Action,System.Guid)">
            <summary>
            Executes a scheduled action. Runs on the fiber.
            </summary>
            <param name="callback">
            The scheduled action.
            </param>
            <param name="id">
            The action id.
            </param>
        </member>
        <member name="P:ExitGames.Threading.Timer.Running">
            <summary>
            Gets a value indicating whether Running.
            </summary>
        </member>
        <member name="T:ExitGames.Threading.UpgradeableReadLock">
            <summary>
              This <see cref="T:System.IDisposable"/> uses the <see cref="T:System.Threading.ReaderWriterLockSlim"/> for critical sections that allow one writer and multiple reader. 
              The counter parts are <see cref="T:ExitGames.Threading.WriteLock"/> and <see cref="T:ExitGames.Threading.ReadLock"/>.
              It is used to replaces try-finally blocks with "using" statements.
            </summary>
            <example>
              <code>
                using (UpgradeableReadLock.Enter(rwLock))
                {
                // critical section here
                }
              </code>
            </example>
        </member>
        <member name="F:ExitGames.Threading.UpgradeableReadLock.syncObject">
            <summary>
              The reader writer lock.
            </summary>
        </member>
        <member name="M:ExitGames.Threading.UpgradeableReadLock.#ctor(System.Threading.ReaderWriterLockSlim)">
            <summary>
              Initializes a new instance of the <see cref="T:ExitGames.Threading.UpgradeableReadLock"/> struct.
            </summary>
            <param name="syncObject">
              The reader writer lock
            </param>
        </member>
        <member name="M:ExitGames.Threading.UpgradeableReadLock.#ctor(System.Threading.ReaderWriterLockSlim,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:ExitGames.Threading.UpgradeableReadLock"/> struct.
            </summary>
            <param name="syncObject">
              The reader writer lock
            </param>
            <param name="millisecondsTimeout">
              The timeout for <see cref="M:System.Threading.ReaderWriterLockSlim.TryEnterUpgradeableReadLock(System.Int32)"/> in milliseconds.
            </param>
            <exception cref="T:ExitGames.Threading.LockTimeoutException">
              <see cref="M:System.Threading.ReaderWriterLockSlim.TryEnterUpgradeableReadLock(System.Int32)"/> returned false.
            </exception>
        </member>
        <member name="M:ExitGames.Threading.UpgradeableReadLock.Enter(System.Threading.ReaderWriterLockSlim)">
            <summary>
              Enters a critical section with <see cref="M:System.Threading.ReaderWriterLockSlim.EnterUpgradeableReadLock"/> and returns a new instance of <see cref="T:ExitGames.Threading.UpgradeableReadLock"/>.
            </summary>
            <param name="syncObject">
              The reader writer lock.
            </param>
            <returns>
            A <see cref="T:ExitGames.Threading.UpgradeableReadLock"/> that can be disposed to call <see cref="M:System.Threading.ReaderWriterLockSlim.ExitUpgradeableReadLock"/>. 
            </returns>
        </member>
        <member name="M:ExitGames.Threading.UpgradeableReadLock.TryEnter(System.Threading.ReaderWriterLockSlim,System.Int32)">
            <summary>
              Enters a critical section with <see cref="M:System.Threading.ReaderWriterLockSlim.TryEnterUpgradeableReadLock(System.Int32)"/> and returns a new instance of <see cref="T:ExitGames.Threading.WriteLock"/>.
            </summary>
            <param name="syncObject">
              The reader writer lock.
            </param>
            <param name="millisecondsTimeout">
              The timeout for <see cref="M:System.Threading.ReaderWriterLockSlim.TryEnterUpgradeableReadLock(System.Int32)"/> in milliseconds.
            </param>
            <returns>
            A <see cref="T:ExitGames.Threading.UpgradeableReadLock"/> that can be disposed to call <see cref="M:System.Threading.ReaderWriterLockSlim.ExitUpgradeableReadLock"/>. 
            </returns>
             <exception cref="T:ExitGames.Threading.LockTimeoutException">
              <see cref="M:System.Threading.ReaderWriterLockSlim.TryEnterUpgradeableReadLock(System.Int32)"/> returned false.
            </exception>
        </member>
        <member name="M:ExitGames.Threading.UpgradeableReadLock.Dispose">
            <summary>
              Calls <see cref="M:System.Threading.ReaderWriterLockSlim.ExitUpgradeableReadLock"/>.
            </summary>
        </member>
        <member name="T:ExitGames.Threading.WriteLock">
            <summary>
              This <see cref="T:System.IDisposable"/> uses the <see cref="T:System.Threading.ReaderWriterLockSlim"/> for critical sections that allow one writer and multiple reader. 
              The counter parts are <see cref="T:ExitGames.Threading.ReadLock"/> and <see cref="T:ExitGames.Threading.UpgradeableReadLock"/>.
              It is used to replaces try-finally blocks with "using" statements.
            </summary>
            <example>
              <code>
                using (WriteLock.Enter(rwLock))
                {
                // critical section here
                }
              </code>
            </example>
        </member>
        <member name="F:ExitGames.Threading.WriteLock.syncObject">
            <summary>
              The reader writer lock.
            </summary>
        </member>
        <member name="M:ExitGames.Threading.WriteLock.#ctor(System.Threading.ReaderWriterLockSlim)">
            <summary>
              Initializes a new instance of the <see cref="T:ExitGames.Threading.WriteLock"/> struct.
            </summary>
            <param name="syncObject">
              The reader writer lock
            </param>
        </member>
        <member name="M:ExitGames.Threading.WriteLock.#ctor(System.Threading.ReaderWriterLockSlim,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:ExitGames.Threading.WriteLock"/> struct.
            </summary>
            <param name="syncObject">
              The reader writer lock
            </param>
            <param name="millisecondsTimeout">
              The timeout for <see cref="M:System.Threading.ReaderWriterLockSlim.TryEnterWriteLock(System.Int32)"/> in milliseconds.
            </param>
            <exception cref="T:ExitGames.Threading.LockTimeoutException">
              <see cref="M:System.Threading.ReaderWriterLockSlim.TryEnterWriteLock(System.Int32)"/> returned false.
            </exception>
        </member>
        <member name="M:ExitGames.Threading.WriteLock.Enter(System.Threading.ReaderWriterLockSlim)">
            <summary>
              Enters a critical section with <see cref="M:System.Threading.ReaderWriterLockSlim.EnterWriteLock"/> and returns a new instance of <see cref="T:ExitGames.Threading.WriteLock"/>.
            </summary>
            <param name="syncObject">
              The reader writer lock.
            </param>
            <returns>
            A <see cref="T:ExitGames.Threading.WriteLock"/> that can be disposed to call <see cref="M:System.Threading.ReaderWriterLockSlim.ExitWriteLock"/>. 
            </returns>
        </member>
        <member name="M:ExitGames.Threading.WriteLock.TryEnter(System.Threading.ReaderWriterLockSlim,System.Int32)">
            <summary>
              Enters a critical section with <see cref="M:System.Threading.ReaderWriterLockSlim.TryEnterWriteLock(System.Int32)"/> and returns a new instance of <see cref="T:ExitGames.Threading.WriteLock"/>.
            </summary>
            <param name="syncObject">
              The reader writer lock.
            </param>
            <param name="millisecondsTimeout">
              The timeout for <see cref="M:System.Threading.ReaderWriterLockSlim.TryEnterWriteLock(System.Int32)"/> in milliseconds.
            </param>
            <returns>
            A <see cref="T:ExitGames.Threading.WriteLock"/> that can be disposed to call <see cref="M:System.Threading.ReaderWriterLockSlim.ExitWriteLock"/>. 
            </returns>
             <exception cref="T:ExitGames.Threading.LockTimeoutException">
              <see cref="M:System.Threading.ReaderWriterLockSlim.TryEnterWriteLock(System.Int32)"/> returned false.
            </exception>
        </member>
        <member name="M:ExitGames.Threading.WriteLock.Dispose">
            <summary>
              Calls <see cref="M:System.Threading.ReaderWriterLockSlim.ExitWriteLock"/>.
            </summary>
        </member>
    </members>
</doc>
